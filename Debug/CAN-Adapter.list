
CAN-Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a28c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aadc  0800aadc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aadc  0800aadc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aadc  0800aadc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000259c  200001e4  0800acc8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002780  0800acc8  00022780  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014951  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347f  00000000  00000000  00034b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00037fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c35e  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e06  00000000  00000000  00055a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ff2  00000000  00000000  00066814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c20  00000000  00000000  000fa85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a334 	.word	0x0800a334

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800a334 	.word	0x0800a334

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <handleError>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void handleError(char *str) {
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b0a3      	sub	sp, #140	; 0x8c
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	char finalString[128];
	sprintf(finalString, "<E%s>\r\n", str);
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	490c      	ldr	r1, [pc, #48]	; (8000454 <handleError+0x3c>)
 8000424:	2408      	movs	r4, #8
 8000426:	193b      	adds	r3, r7, r4
 8000428:	0018      	movs	r0, r3
 800042a:	f009 fb59 	bl	8009ae0 <siprintf>
	CDC_Transmit_FS((uint8_t*) finalString, strlen(finalString));
 800042e:	193b      	adds	r3, r7, r4
 8000430:	0018      	movs	r0, r3
 8000432:	f7ff fe69 	bl	8000108 <strlen>
 8000436:	0003      	movs	r3, r0
 8000438:	b29a      	uxth	r2, r3
 800043a:	193b      	adds	r3, r7, r4
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f008 fe56 	bl	80090f0 <CDC_Transmit_FS>

	error = 1;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <handleError+0x40>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b023      	add	sp, #140	; 0x8c
 8000450:	bd90      	pop	{r4, r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	0800a34c 	.word	0x0800a34c
 8000458:	20000200 	.word	0x20000200

0800045c <printLog>:

void printLog(char *str) {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b0a3      	sub	sp, #140	; 0x8c
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	char finalString[128];
	sprintf(finalString, "<P%s>\r\n", str);
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	490a      	ldr	r1, [pc, #40]	; (8000490 <printLog+0x34>)
 8000468:	2408      	movs	r4, #8
 800046a:	193b      	adds	r3, r7, r4
 800046c:	0018      	movs	r0, r3
 800046e:	f009 fb37 	bl	8009ae0 <siprintf>
	CDC_Transmit_FS((uint8_t*) finalString, strlen(finalString));
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff fe47 	bl	8000108 <strlen>
 800047a:	0003      	movs	r3, r0
 800047c:	b29a      	uxth	r2, r3
 800047e:	193b      	adds	r3, r7, r4
 8000480:	0011      	movs	r1, r2
 8000482:	0018      	movs	r0, r3
 8000484:	f008 fe34 	bl	80090f0 <CDC_Transmit_FS>
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b023      	add	sp, #140	; 0x8c
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	0800a354 	.word	0x0800a354

08000494 <pow10_>:
uint32_t pow10_(uint8_t value) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	0002      	movs	r2, r0
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	701a      	strb	r2, [r3, #0]
	if (value > 0)
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00c      	beq.n	80004c2 <pow10_+0x2e>
		return 10 * pow10_(value - 1);
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ffef 	bl	8000494 <pow10_>
 80004b6:	0002      	movs	r2, r0
 80004b8:	0013      	movs	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	189b      	adds	r3, r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	e000      	b.n	80004c4 <pow10_+0x30>
	else
		return 1;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}

080004cc <DecToInt>:

uint32_t DecToInt(uint8_t *string, uint8_t len) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	000a      	movs	r2, r1
 80004d6:	1cfb      	adds	r3, r7, #3
 80004d8:	701a      	strb	r2, [r3, #0]
	uint32_t value = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 80004de:	210b      	movs	r1, #11
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e033      	b.n	8000556 <DecToInt+0x8a>
		if (string[i] >= '0' && string[i] <= '9')
 80004ee:	210b      	movs	r1, #11
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	18d3      	adds	r3, r2, r3
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b2f      	cmp	r3, #47	; 0x2f
 80004fc:	d91e      	bls.n	800053c <DecToInt+0x70>
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	18d3      	adds	r3, r2, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b39      	cmp	r3, #57	; 0x39
 800050a:	d817      	bhi.n	800053c <DecToInt+0x70>
			value += (string[i] - '0') * pow10_(len - i - 1);
 800050c:	187b      	adds	r3, r7, r1
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	3b30      	subs	r3, #48	; 0x30
 8000518:	001c      	movs	r4, r3
 800051a:	1cfa      	adds	r2, r7, #3
 800051c:	187b      	adds	r3, r7, r1
 800051e:	7812      	ldrb	r2, [r2, #0]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	3b01      	subs	r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ffb2 	bl	8000494 <pow10_>
 8000530:	0003      	movs	r3, r0
 8000532:	4363      	muls	r3, r4
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e006      	b.n	800054a <DecToInt+0x7e>
		else {
			handleError("Can't convert into int, not a number!");
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <DecToInt+0xa4>)
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff ff6a 	bl	8000418 <handleError>
			return 0xFFFFFFFF;
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	e00d      	b.n	8000566 <DecToInt+0x9a>
	for (i = 0; i < len; i++)
 800054a:	210b      	movs	r1, #11
 800054c:	187b      	adds	r3, r7, r1
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	187b      	adds	r3, r7, r1
 8000552:	3201      	adds	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	230b      	movs	r3, #11
 8000558:	18fa      	adds	r2, r7, r3
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3c4      	bcc.n	80004ee <DecToInt+0x22>
		}
	return value;
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	0800a35c 	.word	0x0800a35c

08000574 <pow16>:

uint32_t pow16(uint8_t value) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
	return 1 << (value * 4);
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	2201      	movs	r2, #1
 8000588:	409a      	lsls	r2, r3
 800058a:	0013      	movs	r3, r2
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}

08000594 <HexToInt>:

uint32_t HexToInt(uint8_t *string, uint8_t len) {
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	000a      	movs	r2, r1
 800059e:	1cfb      	adds	r3, r7, #3
 80005a0:	701a      	strb	r2, [r3, #0]
	uint32_t value = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
	uint32_t tmp = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
	uint8_t i = 0;
 80005aa:	210f      	movs	r1, #15
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < len; i++) {
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e05b      	b.n	8000672 <HexToInt+0xde>
		switch (string[i]) {
 80005ba:	230f      	movs	r3, #15
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	18d3      	adds	r3, r2, r3
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	3b30      	subs	r3, #48	; 0x30
 80005c8:	2b36      	cmp	r3, #54	; 0x36
 80005ca:	d834      	bhi.n	8000636 <HexToInt+0xa2>
 80005cc:	009a      	lsls	r2, r3, #2
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <HexToInt+0xf8>)
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	469f      	mov	pc, r3
		case '0':
			tmp = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
			break;
 80005da:	e033      	b.n	8000644 <HexToInt+0xb0>
		case '1':
			tmp = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
			break;
 80005e0:	e030      	b.n	8000644 <HexToInt+0xb0>
		case '2':
			tmp = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
			break;
 80005e6:	e02d      	b.n	8000644 <HexToInt+0xb0>
		case '3':
			tmp = 3;
 80005e8:	2303      	movs	r3, #3
 80005ea:	613b      	str	r3, [r7, #16]
			break;
 80005ec:	e02a      	b.n	8000644 <HexToInt+0xb0>
		case '4':
			tmp = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	613b      	str	r3, [r7, #16]
			break;
 80005f2:	e027      	b.n	8000644 <HexToInt+0xb0>
		case '5':
			tmp = 5;
 80005f4:	2305      	movs	r3, #5
 80005f6:	613b      	str	r3, [r7, #16]
			break;
 80005f8:	e024      	b.n	8000644 <HexToInt+0xb0>
		case '6':
			tmp = 6;
 80005fa:	2306      	movs	r3, #6
 80005fc:	613b      	str	r3, [r7, #16]
			break;
 80005fe:	e021      	b.n	8000644 <HexToInt+0xb0>
		case '7':
			tmp = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	613b      	str	r3, [r7, #16]
			break;
 8000604:	e01e      	b.n	8000644 <HexToInt+0xb0>
		case '8':
			tmp = 8;
 8000606:	2308      	movs	r3, #8
 8000608:	613b      	str	r3, [r7, #16]
			break;
 800060a:	e01b      	b.n	8000644 <HexToInt+0xb0>
		case '9':
			tmp = 9;
 800060c:	2309      	movs	r3, #9
 800060e:	613b      	str	r3, [r7, #16]
			break;
 8000610:	e018      	b.n	8000644 <HexToInt+0xb0>
		case 'A':
		case 'a':
			tmp = 10;
 8000612:	230a      	movs	r3, #10
 8000614:	613b      	str	r3, [r7, #16]
			break;
 8000616:	e015      	b.n	8000644 <HexToInt+0xb0>
		case 'B':
		case 'b':
			tmp = 11;
 8000618:	230b      	movs	r3, #11
 800061a:	613b      	str	r3, [r7, #16]
			break;
 800061c:	e012      	b.n	8000644 <HexToInt+0xb0>
		case 'C':
		case 'c':
			tmp = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	613b      	str	r3, [r7, #16]
			break;
 8000622:	e00f      	b.n	8000644 <HexToInt+0xb0>
		case 'D':
		case 'd':
			tmp = 13;
 8000624:	230d      	movs	r3, #13
 8000626:	613b      	str	r3, [r7, #16]
			break;
 8000628:	e00c      	b.n	8000644 <HexToInt+0xb0>
		case 'E':
		case 'e':
			tmp = 14;
 800062a:	230e      	movs	r3, #14
 800062c:	613b      	str	r3, [r7, #16]
			break;
 800062e:	e009      	b.n	8000644 <HexToInt+0xb0>
		case 'F':
		case 'f':
			tmp = 15;
 8000630:	230f      	movs	r3, #15
 8000632:	613b      	str	r3, [r7, #16]
			break;
 8000634:	e006      	b.n	8000644 <HexToInt+0xb0>
		default:
			handleError("Can't parse hex value! Invalid string!");
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HexToInt+0xfc>)
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff feed 	bl	8000418 <handleError>
			return 0xFFFFFFFF;
 800063e:	2301      	movs	r3, #1
 8000640:	425b      	negs	r3, r3
 8000642:	e01e      	b.n	8000682 <HexToInt+0xee>
		}
		value += tmp * pow16(len - i - 1);
 8000644:	1cfa      	adds	r2, r7, #3
 8000646:	240f      	movs	r4, #15
 8000648:	193b      	adds	r3, r7, r4
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff8c 	bl	8000574 <pow16>
 800065c:	0002      	movs	r2, r0
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	4353      	muls	r3, r2
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	193b      	adds	r3, r7, r4
 800066e:	3201      	adds	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	230f      	movs	r3, #15
 8000674:	18fa      	adds	r2, r7, r3
 8000676:	1cfb      	adds	r3, r7, #3
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d39c      	bcc.n	80005ba <HexToInt+0x26>
	}
	return value;
 8000680:	697b      	ldr	r3, [r7, #20]
}
 8000682:	0018      	movs	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	b007      	add	sp, #28
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	0800a7bc 	.word	0x0800a7bc
 8000690:	0800a384 	.word	0x0800a384

08000694 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &recMsgs[recCnt].header, recMsgs[recCnt].buf) != HAL_OK)
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001a      	movs	r2, r3
 80006a2:	0013      	movs	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	189b      	adds	r3, r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80006ac:	1899      	adds	r1, r3, r2
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	001a      	movs	r2, r3
 80006b4:	0013      	movs	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3318      	adds	r3, #24
 80006be:	001a      	movs	r2, r3
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	3304      	adds	r3, #4
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	000a      	movs	r2, r1
 80006ca:	2100      	movs	r1, #0
 80006cc:	f001 fb99 	bl	8001e02 <HAL_CAN_GetRxMessage>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		Error_Handler();
 80006d4:	f000 fe70 	bl	80013b8 <Error_Handler>
	if (recCnt < 128)
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db05      	blt.n	80006ee <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
		recCnt++;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80006ec:	701a      	strb	r2, [r3, #0]

	lastRx = HAL_GetTick();
 80006ee:	f000 fff9 	bl	80016e4 <HAL_GetTick>
 80006f2:	0002      	movs	r2, r0
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80006f6:	601a      	str	r2, [r3, #0]
	totalRXCnt++;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000700:	601a      	str	r2, [r3, #0]
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000204 	.word	0x20000204
 8000710:	20000500 	.word	0x20000500
 8000714:	2000020c 	.word	0x2000020c
 8000718:	20000214 	.word	0x20000214

0800071c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	handleError("CAN BUS error acquired. Restarting CAN");
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_CAN_ErrorCallback+0x18>)
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff fe76 	bl	8000418 <handleError>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800a3ac 	.word	0x0800a3ac

08000738 <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *Buf, uint32_t len) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	uint8_t *ptr = Buf;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]
	while (len--) {
 8000746:	e02c      	b.n	80007a2 <CDC_ReceiveCallback+0x6a>
		if (*ptr == '<')
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b3c      	cmp	r3, #60	; 0x3c
 800074e:	d103      	bne.n	8000758 <CDC_ReceiveCallback+0x20>
			usbPtr = 0;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e021      	b.n	800079c <CDC_ReceiveCallback+0x64>
		else if (*ptr == '>') {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b3e      	cmp	r3, #62	; 0x3e
 800075e:	d110      	bne.n	8000782 <CDC_ReceiveCallback+0x4a>
			usbMesLen = usbPtr;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <CDC_ReceiveCallback+0x84>)
 8000766:	701a      	strb	r2, [r3, #0]
			gotUsbMessage = 1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <CDC_ReceiveCallback+0x88>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
			usbBuf[usbPtr] = 0;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	001a      	movs	r2, r3
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <CDC_ReceiveCallback+0x8c>)
 8000776:	2100      	movs	r1, #0
 8000778:	5499      	strb	r1, [r3, r2]
			usbPtr = 0;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e00c      	b.n	800079c <CDC_ReceiveCallback+0x64>
		} else {
			usbBuf[usbPtr] = *ptr;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	001a      	movs	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	7819      	ldrb	r1, [r3, #0]
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <CDC_ReceiveCallback+0x8c>)
 800078e:	5499      	strb	r1, [r3, r2]
			usbPtr++;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <CDC_ReceiveCallback+0x80>)
 800079a:	701a      	strb	r2, [r3, #0]
		}
		ptr++;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
	while (len--) {
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	603a      	str	r2, [r7, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1cd      	bne.n	8000748 <CDC_ReceiveCallback+0x10>
	}

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b004      	add	sp, #16
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000201 	.word	0x20000201
 80007bc:	20000202 	.word	0x20000202
 80007c0:	20000203 	.word	0x20000203
 80007c4:	20000470 	.word	0x20000470

080007c8 <CanCustomInit>:

void CanCustomInit() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_CAN_Stop(&hcan);
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <CanCustomInit+0xa8>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 f9ee 	bl	8001bb0 <HAL_CAN_Stop>
	HAL_CAN_DeInit(&hcan);
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <CanCustomInit+0xa8>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f88c 	bl	80018f4 <HAL_CAN_DeInit>
	hcan.Instance = CAN;
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <CanCustomInit+0xa8>)
 80007de:	4a25      	ldr	r2, [pc, #148]	; (8000874 <CanCustomInit+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 3000 / bitrate;
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <CanCustomInit+0xb0>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	0019      	movs	r1, r3
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <CanCustomInit+0xb4>)
 80007ea:	f7ff fd29 	bl	8000240 <__divsi3>
 80007ee:	0003      	movs	r3, r0
 80007f0:	001a      	movs	r2, r3
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <CanCustomInit+0xa8>)
 80007f4:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = canMode;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <CanCustomInit+0xb8>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <CanCustomInit+0xa8>)
 80007fc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <CanCustomInit+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <CanCustomInit+0xa8>)
 8000806:	22c0      	movs	r2, #192	; 0xc0
 8000808:	0312      	lsls	r2, r2, #12
 800080a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <CanCustomInit+0xa8>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	0352      	lsls	r2, r2, #13
 8000812:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <CanCustomInit+0xa8>)
 8000816:	2200      	movs	r2, #0
 8000818:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <CanCustomInit+0xa8>)
 800081c:	2200      	movs	r2, #0
 800081e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <CanCustomInit+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <CanCustomInit+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <CanCustomInit+0xa8>)
 800082e:	2200      	movs	r2, #0
 8000830:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <CanCustomInit+0xa8>)
 8000834:	2200      	movs	r2, #0
 8000836:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <CanCustomInit+0xa8>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 ff5c 	bl	80016f8 <HAL_CAN_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d003      	beq.n	800084c <CanCustomInit+0x84>
		handleError("Cant' init CAN!");
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <CanCustomInit+0xbc>)
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fde6 	bl	8000418 <handleError>
	if (canState)
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <CanCustomInit+0xc0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d009      	beq.n	8000868 <CanCustomInit+0xa0>
		if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <CanCustomInit+0xa8>)
 8000856:	0018      	movs	r0, r3
 8000858:	f001 f964 	bl	8001b24 <HAL_CAN_Start>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d003      	beq.n	8000868 <CanCustomInit+0xa0>
			handleError("Can't start CAN!");
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <CanCustomInit+0xc4>)
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fdd8 	bl	8000418 <handleError>
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20001700 	.word	0x20001700
 8000874:	40006400 	.word	0x40006400
 8000878:	20000000 	.word	0x20000000
 800087c:	00000bb8 	.word	0x00000bb8
 8000880:	20000208 	.word	0x20000208
 8000884:	0800a3d4 	.word	0x0800a3d4
 8000888:	20000205 	.word	0x20000205
 800088c:	0800a3e4 	.word	0x0800a3e4

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08f      	sub	sp, #60	; 0x3c
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fecb 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 fc81 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fd2f 	bl	8001300 <MX_GPIO_Init>
  MX_CAN_Init();
 80008a2:	f000 fcd5 	bl	8001250 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 80008a6:	f008 fb97 	bl	8008fd8 <MX_USB_DEVICE_Init>
  MX_IWDG_Init();
 80008aa:	f000 fd09 	bl	80012c0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk;
 80008ae:	4bdb      	ldr	r3, [pc, #876]	; (8000c1c <main+0x38c>)
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4bda      	ldr	r3, [pc, #872]	; (8000c1c <main+0x38c>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0149      	lsls	r1, r1, #5
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk;
 80008bc:	4bd7      	ldr	r3, [pc, #860]	; (8000c1c <main+0x38c>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	4bd6      	ldr	r3, [pc, #856]	; (8000c1c <main+0x38c>)
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0109      	lsls	r1, r1, #4
 80008c6:	430a      	orrs	r2, r1
 80008c8:	609a      	str	r2, [r3, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	filter.FilterBank = 0;
 80008ca:	4bd5      	ldr	r3, [pc, #852]	; (8000c20 <main+0x390>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80008d0:	4bd3      	ldr	r3, [pc, #844]	; (8000c20 <main+0x390>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80008d6:	4bd2      	ldr	r3, [pc, #840]	; (8000c20 <main+0x390>)
 80008d8:	2201      	movs	r2, #1
 80008da:	61da      	str	r2, [r3, #28]
	filter.FilterMaskIdHigh = 0x0000;
 80008dc:	4bd0      	ldr	r3, [pc, #832]	; (8000c20 <main+0x390>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow = 0x0000;
 80008e2:	4bcf      	ldr	r3, [pc, #828]	; (8000c20 <main+0x390>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008e8:	4bcd      	ldr	r3, [pc, #820]	; (8000c20 <main+0x390>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
	filter.FilterActivation = ENABLE;
 80008ee:	4bcc      	ldr	r3, [pc, #816]	; (8000c20 <main+0x390>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
	filter.SlaveStartFilterBank = 14;
 80008f4:	4bca      	ldr	r3, [pc, #808]	; (8000c20 <main+0x390>)
 80008f6:	220e      	movs	r2, #14
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 80008fa:	4ac9      	ldr	r2, [pc, #804]	; (8000c20 <main+0x390>)
 80008fc:	4bc9      	ldr	r3, [pc, #804]	; (8000c24 <main+0x394>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 f81d 	bl	8001940 <HAL_CAN_ConfigFilter>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d004      	beq.n	8000914 <main+0x84>
		handleError("Cant' config CAN filter!");
 800090a:	4bc7      	ldr	r3, [pc, #796]	; (8000c28 <main+0x398>)
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff fd83 	bl	8000418 <handleError>
		goto loopStart;
 8000912:	e02b      	b.n	800096c <main+0xdc>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000914:	4bc3      	ldr	r3, [pc, #780]	; (8000c24 <main+0x394>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f904 	bl	8001b24 <HAL_CAN_Start>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d004      	beq.n	800092a <main+0x9a>
		handleError("Cant' start CAN!");
 8000920:	4bc2      	ldr	r3, [pc, #776]	; (8000c2c <main+0x39c>)
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fd78 	bl	8000418 <handleError>
		goto loopStart;
 8000928:	e020      	b.n	800096c <main+0xdc>
	}
	canState = 1;
 800092a:	4bc1      	ldr	r3, [pc, #772]	; (8000c30 <main+0x3a0>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000930:	4bbc      	ldr	r3, [pc, #752]	; (8000c24 <main+0x394>)
 8000932:	2102      	movs	r1, #2
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fb80 	bl	800203a <HAL_CAN_ActivateNotification>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d004      	beq.n	8000948 <main+0xb8>
		handleError("Cant' attach CAN RXD PENDING IRQ!");
 800093e:	4bbd      	ldr	r3, [pc, #756]	; (8000c34 <main+0x3a4>)
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fd69 	bl	8000418 <handleError>
		goto loopStart;
 8000946:	e011      	b.n	800096c <main+0xdc>
	}

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK) {
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	021a      	lsls	r2, r3, #8
 800094c:	4bb5      	ldr	r3, [pc, #724]	; (8000c24 <main+0x394>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fb72 	bl	800203a <HAL_CAN_ActivateNotification>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d004      	beq.n	8000964 <main+0xd4>
		handleError("Cant' attach CAN ERROR IRQ!");
 800095a:	4bb7      	ldr	r3, [pc, #732]	; (8000c38 <main+0x3a8>)
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fd5b 	bl	8000418 <handleError>
		goto loopStart;
 8000962:	e003      	b.n	800096c <main+0xdc>
	}
	printLog("Reset");
 8000964:	4bb5      	ldr	r3, [pc, #724]	; (8000c3c <main+0x3ac>)
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fd78 	bl	800045c <printLog>

	while (1) {
		loopStart:
		HAL_IWDG_Refresh(&hiwdg);
 800096c:	4bb4      	ldr	r3, [pc, #720]	; (8000c40 <main+0x3b0>)
 800096e:	0018      	movs	r0, r3
 8000970:	f002 f96a 	bl	8002c48 <HAL_IWDG_Refresh>
		if (error) {
 8000974:	4bb3      	ldr	r3, [pc, #716]	; (8000c44 <main+0x3b4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00d      	beq.n	8000998 <main+0x108>
			error = 0;
 800097c:	4bb1      	ldr	r3, [pc, #708]	; (8000c44 <main+0x3b4>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
			CanCustomInit();
 8000982:	f7ff ff21 	bl	80007c8 <CanCustomInit>
			memset(usbBuf,0,sizeof(usbBuf));
 8000986:	4bb0      	ldr	r3, [pc, #704]	; (8000c48 <main+0x3b8>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	2100      	movs	r1, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f009 f89e 	bl	8009ace <memset>
			usbPtr=0;
 8000992:	4bae      	ldr	r3, [pc, #696]	; (8000c4c <main+0x3bc>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
		}

		if (recCnt > 0) {
 8000998:	4bad      	ldr	r3, [pc, #692]	; (8000c50 <main+0x3c0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d100      	bne.n	80009a2 <main+0x112>
 80009a0:	e07a      	b.n	8000a98 <main+0x208>
			uint8_t cur = recCnt - 1;
 80009a2:	4bab      	ldr	r3, [pc, #684]	; (8000c50 <main+0x3c0>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	2129      	movs	r1, #41	; 0x29
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	3a01      	subs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
			CAN_RxHeaderTypeDef *hdr = &recMsgs[cur].header;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	0013      	movs	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4aa6      	ldr	r2, [pc, #664]	; (8000c54 <main+0x3c4>)
 80009bc:	189b      	adds	r3, r3, r2
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
			sprintf(outString, "<R%1d%1d%1d_", (int) hdr->DLC, (int) hdr->IDE, (int) hdr->RTR);
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	001a      	movs	r2, r3
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	001c      	movs	r4, r3
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	49a1      	ldr	r1, [pc, #644]	; (8000c58 <main+0x3c8>)
 80009d2:	48a2      	ldr	r0, [pc, #648]	; (8000c5c <main+0x3cc>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	0023      	movs	r3, r4
 80009d8:	f009 f882 	bl	8009ae0 <siprintf>
			if (!hdr->IDE) {
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d107      	bne.n	80009f4 <main+0x164>
				sprintf(idString, "%03lX_", hdr->StdId);
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	499d      	ldr	r1, [pc, #628]	; (8000c60 <main+0x3d0>)
 80009ea:	4b9e      	ldr	r3, [pc, #632]	; (8000c64 <main+0x3d4>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f009 f877 	bl	8009ae0 <siprintf>
 80009f2:	e006      	b.n	8000a02 <main+0x172>
			} else {
				sprintf(idString, "%08lX_", hdr->ExtId);
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	499b      	ldr	r1, [pc, #620]	; (8000c68 <main+0x3d8>)
 80009fa:	4b9a      	ldr	r3, [pc, #616]	; (8000c64 <main+0x3d4>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f009 f86f 	bl	8009ae0 <siprintf>
			}
			strcat(outString, idString);
 8000a02:	4a98      	ldr	r2, [pc, #608]	; (8000c64 <main+0x3d4>)
 8000a04:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <main+0x3cc>)
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f009 f889 	bl	8009b20 <strcat>
			for (int i = 0; i < hdr->DLC; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a12:	e01c      	b.n	8000a4e <main+0x1be>
				char byteString[3];
				sprintf(byteString, "%02X", recMsgs[cur].buf[i]);
 8000a14:	2329      	movs	r3, #41	; 0x29
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	498e      	ldr	r1, [pc, #568]	; (8000c54 <main+0x3c4>)
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	189b      	adds	r3, r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18ca      	adds	r2, r1, r3
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	331c      	adds	r3, #28
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001a      	movs	r2, r3
 8000a30:	498e      	ldr	r1, [pc, #568]	; (8000c6c <main+0x3dc>)
 8000a32:	2420      	movs	r4, #32
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	0018      	movs	r0, r3
 8000a38:	f009 f852 	bl	8009ae0 <siprintf>
				strcat(outString, byteString);
 8000a3c:	193a      	adds	r2, r7, r4
 8000a3e:	4b87      	ldr	r3, [pc, #540]	; (8000c5c <main+0x3cc>)
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f009 f86c 	bl	8009b20 <strcat>
			for (int i = 0; i < hdr->DLC; i++) {
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	691a      	ldr	r2, [r3, #16]
 8000a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8dd      	bhi.n	8000a14 <main+0x184>
			}
			strcat(outString, ">\r\n");
 8000a58:	4b80      	ldr	r3, [pc, #512]	; (8000c5c <main+0x3cc>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fb54 	bl	8000108 <strlen>
 8000a60:	0003      	movs	r3, r0
 8000a62:	001a      	movs	r2, r3
 8000a64:	4b7d      	ldr	r3, [pc, #500]	; (8000c5c <main+0x3cc>)
 8000a66:	18d2      	adds	r2, r2, r3
 8000a68:	4b81      	ldr	r3, [pc, #516]	; (8000c70 <main+0x3e0>)
 8000a6a:	0010      	movs	r0, r2
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	2304      	movs	r3, #4
 8000a70:	001a      	movs	r2, r3
 8000a72:	f009 f823 	bl	8009abc <memcpy>
			CDC_Transmit_FS((uint8_t*) outString, strlen(outString));
 8000a76:	4b79      	ldr	r3, [pc, #484]	; (8000c5c <main+0x3cc>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fb45 	bl	8000108 <strlen>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b76      	ldr	r3, [pc, #472]	; (8000c5c <main+0x3cc>)
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f008 fb32 	bl	80090f0 <CDC_Transmit_FS>
			recCnt--;
 8000a8c:	4b70      	ldr	r3, [pc, #448]	; (8000c50 <main+0x3c0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b6e      	ldr	r3, [pc, #440]	; (8000c50 <main+0x3c0>)
 8000a96:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - lastRx < 30 || recCnt==128)
 8000a98:	f000 fe24 	bl	80016e4 <HAL_GetTick>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	4b75      	ldr	r3, [pc, #468]	; (8000c74 <main+0x3e4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b1d      	cmp	r3, #29
 8000aa6:	d903      	bls.n	8000ab0 <main+0x220>
 8000aa8:	4b69      	ldr	r3, [pc, #420]	; (8000c50 <main+0x3c0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b80      	cmp	r3, #128	; 0x80
 8000aae:	d106      	bne.n	8000abe <main+0x22e>
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, 0);
 8000ab0:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <main+0x3e8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 f856 	bl	8002b68 <HAL_GPIO_WritePin>
 8000abc:	e005      	b.n	8000aca <main+0x23a>
		else
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, 1);
 8000abe:	4b6e      	ldr	r3, [pc, #440]	; (8000c78 <main+0x3e8>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 f84f 	bl	8002b68 <HAL_GPIO_WritePin>

		if (HAL_GetTick() - lastTx < 30)
 8000aca:	f000 fe0b 	bl	80016e4 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <main+0x3ec>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b1d      	cmp	r3, #29
 8000ad8:	d806      	bhi.n	8000ae8 <main+0x258>
			HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, 0);
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <main+0x3e8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 f841 	bl	8002b68 <HAL_GPIO_WritePin>
 8000ae6:	e005      	b.n	8000af4 <main+0x264>
		else
			HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, 1);
 8000ae8:	4b63      	ldr	r3, [pc, #396]	; (8000c78 <main+0x3e8>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	2101      	movs	r1, #1
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 f83a 	bl	8002b68 <HAL_GPIO_WritePin>

		if (gotUsbMessage) {
 8000af4:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <main+0x3f0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d100      	bne.n	8000afe <main+0x26e>
 8000afc:	e324      	b.n	8001148 <main+0x8b8>
			uint8_t len = usbMesLen;
 8000afe:	2323      	movs	r3, #35	; 0x23
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	4a60      	ldr	r2, [pc, #384]	; (8000c84 <main+0x3f4>)
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	701a      	strb	r2, [r3, #0]
			gotUsbMessage = 0;
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <main+0x3f0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]

			switch (usbBuf[0]) {
 8000b0e:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <main+0x3b8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3b31      	subs	r3, #49	; 0x31
 8000b14:	2b43      	cmp	r3, #67	; 0x43
 8000b16:	d900      	bls.n	8000b1a <main+0x28a>
 8000b18:	e305      	b.n	8001126 <main+0x896>
 8000b1a:	009a      	lsls	r2, r3, #2
 8000b1c:	4b5a      	ldr	r3, [pc, #360]	; (8000c88 <main+0x3f8>)
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	469f      	mov	pc, r3
			case '1':
				usbBuf[0]=0;
 8000b24:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <main+0x3b8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
				if (canState) {
 8000b2a:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <main+0x3a0>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d004      	beq.n	8000b3c <main+0x2ac>
					printLog("CAN Adapter is already started");
 8000b32:	4b56      	ldr	r3, [pc, #344]	; (8000c8c <main+0x3fc>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fc91 	bl	800045c <printLog>
					break;
 8000b3a:	e312      	b.n	8001162 <main+0x8d2>
				}
				if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000b3c:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <main+0x394>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fff0 	bl	8001b24 <HAL_CAN_Start>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d004      	beq.n	8000b52 <main+0x2c2>
					handleError("Cant' start CAN!");
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <main+0x39c>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fc64 	bl	8000418 <handleError>
					goto loopStart;
 8000b50:	e70c      	b.n	800096c <main+0xdc>
				}
				if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <main+0x394>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fa6f 	bl	800203a <HAL_CAN_ActivateNotification>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d004      	beq.n	8000b6a <main+0x2da>
					handleError("Cant' attach CAN IRQ!");
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <main+0x400>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fc58 	bl	8000418 <handleError>
					goto loopStart;
 8000b68:	e700      	b.n	800096c <main+0xdc>
				}

				if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK) {
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	021a      	lsls	r2, r3, #8
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <main+0x394>)
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fa61 	bl	800203a <HAL_CAN_ActivateNotification>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d004      	beq.n	8000b86 <main+0x2f6>
					handleError("Cant' attach CAN IRQ!");
 8000b7c:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <main+0x400>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fc4a 	bl	8000418 <handleError>
					goto loopStart;
 8000b84:	e6f2      	b.n	800096c <main+0xdc>
				}
				canState = 1;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <main+0x3a0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
				printLog("CAN Adapter turned ON");
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <main+0x404>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fc64 	bl	800045c <printLog>
				break;
 8000b94:	e2e5      	b.n	8001162 <main+0x8d2>
			case '2':
				usbBuf[0]=0;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <main+0x3b8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
				if (!canState) {
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <main+0x3a0>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <main+0x31e>
					printLog("CAN Adapter is already stopped");
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <main+0x408>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff fc58 	bl	800045c <printLog>
					break;
 8000bac:	e2d9      	b.n	8001162 <main+0x8d2>
				}
				if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <main+0x394>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fffd 	bl	8001bb0 <HAL_CAN_Stop>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d004      	beq.n	8000bc4 <main+0x334>
					handleError("Cant' stop CAN!");
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <main+0x40c>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fc2b 	bl	8000418 <handleError>
					goto loopStart;
 8000bc2:	e6d3      	b.n	800096c <main+0xdc>
				}
				canState = 0;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <main+0x3a0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
				printLog("CAN Adapter turned OFF");
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <main+0x410>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fc45 	bl	800045c <printLog>
				break;
 8000bd2:	e2c6      	b.n	8001162 <main+0x8d2>
			case '3':
				usbBuf[0]=0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <main+0x3b8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
				if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <main+0x390>)
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <main+0x394>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fead 	bl	8001940 <HAL_CAN_ConfigFilter>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d004      	beq.n	8000bf4 <main+0x364>
					handleError("Cant' config CAN filter!");
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <main+0x398>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fc13 	bl	8000418 <handleError>
					goto loopStart;
 8000bf2:	e6bb      	b.n	800096c <main+0xdc>
				}
				printLog("Filter set");
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <main+0x414>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fc30 	bl	800045c <printLog>
				break;
 8000bfc:	e2b1      	b.n	8001162 <main+0x8d2>
			case '4':
				usbBuf[0]=0;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <main+0x3b8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
				if (usbBuf[1] == '0') {
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <main+0x3b8>)
 8000c06:	785b      	ldrb	r3, [r3, #1]
 8000c08:	2b30      	cmp	r3, #48	; 0x30
 8000c0a:	d14f      	bne.n	8000cac <main+0x41c>
					filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <main+0x390>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
					printLog("Mask filter selected");
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <main+0x418>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fc21 	bl	800045c <printLog>
					sprintf(errorString, "Filter code must be 0 or 1, not %c", usbBuf[1]);
					handleError(errorString);
					goto loopStart;
				}

				break;
 8000c1a:	e2a2      	b.n	8001162 <main+0x8d2>
 8000c1c:	40015800 	.word	0x40015800
 8000c20:	200017a8 	.word	0x200017a8
 8000c24:	20001700 	.word	0x20001700
 8000c28:	0800a3f8 	.word	0x0800a3f8
 8000c2c:	0800a414 	.word	0x0800a414
 8000c30:	20000205 	.word	0x20000205
 8000c34:	0800a428 	.word	0x0800a428
 8000c38:	0800a44c 	.word	0x0800a44c
 8000c3c:	0800a468 	.word	0x0800a468
 8000c40:	200004f0 	.word	0x200004f0
 8000c44:	20000200 	.word	0x20000200
 8000c48:	20000470 	.word	0x20000470
 8000c4c:	20000201 	.word	0x20000201
 8000c50:	20000204 	.word	0x20000204
 8000c54:	20000500 	.word	0x20000500
 8000c58:	0800a470 	.word	0x0800a470
 8000c5c:	20000220 	.word	0x20000220
 8000c60:	0800a480 	.word	0x0800a480
 8000c64:	200017d0 	.word	0x200017d0
 8000c68:	0800a488 	.word	0x0800a488
 8000c6c:	0800a490 	.word	0x0800a490
 8000c70:	0800a498 	.word	0x0800a498
 8000c74:	2000020c 	.word	0x2000020c
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	20000210 	.word	0x20000210
 8000c80:	20000203 	.word	0x20000203
 8000c84:	20000202 	.word	0x20000202
 8000c88:	0800a898 	.word	0x0800a898
 8000c8c:	0800a49c 	.word	0x0800a49c
 8000c90:	0800a4bc 	.word	0x0800a4bc
 8000c94:	0800a4d4 	.word	0x0800a4d4
 8000c98:	0800a4ec 	.word	0x0800a4ec
 8000c9c:	0800a50c 	.word	0x0800a50c
 8000ca0:	0800a51c 	.word	0x0800a51c
 8000ca4:	0800a534 	.word	0x0800a534
 8000ca8:	0800a540 	.word	0x0800a540
				} else if (usbBuf[1] == '1') {
 8000cac:	4bc5      	ldr	r3, [pc, #788]	; (8000fc4 <main+0x734>)
 8000cae:	785b      	ldrb	r3, [r3, #1]
 8000cb0:	2b31      	cmp	r3, #49	; 0x31
 8000cb2:	d107      	bne.n	8000cc4 <main+0x434>
					filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000cb4:	4bc4      	ldr	r3, [pc, #784]	; (8000fc8 <main+0x738>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	619a      	str	r2, [r3, #24]
					printLog("List filter selected");
 8000cba:	4bc4      	ldr	r3, [pc, #784]	; (8000fcc <main+0x73c>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fbcd 	bl	800045c <printLog>
				break;
 8000cc2:	e24e      	b.n	8001162 <main+0x8d2>
					sprintf(errorString, "Filter code must be 0 or 1, not %c", usbBuf[1]);
 8000cc4:	4bbf      	ldr	r3, [pc, #764]	; (8000fc4 <main+0x734>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	49c1      	ldr	r1, [pc, #772]	; (8000fd0 <main+0x740>)
 8000ccc:	4bc1      	ldr	r3, [pc, #772]	; (8000fd4 <main+0x744>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f008 ff06 	bl	8009ae0 <siprintf>
					handleError(errorString);
 8000cd4:	4bbf      	ldr	r3, [pc, #764]	; (8000fd4 <main+0x744>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fb9e 	bl	8000418 <handleError>
					goto loopStart;
 8000cdc:	e646      	b.n	800096c <main+0xdc>
			case '5':
				usbBuf[0]=0;
 8000cde:	4bb9      	ldr	r3, [pc, #740]	; (8000fc4 <main+0x734>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
				filter.FilterMaskIdLow = HexToInt(usbBuf + 1, 8);
 8000ce4:	4bbc      	ldr	r3, [pc, #752]	; (8000fd8 <main+0x748>)
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fc53 	bl	8000594 <HexToInt>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	4bb5      	ldr	r3, [pc, #724]	; (8000fc8 <main+0x738>)
 8000cf2:	60da      	str	r2, [r3, #12]
				if (error) goto loopStart;
 8000cf4:	4bb9      	ldr	r3, [pc, #740]	; (8000fdc <main+0x74c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d100      	bne.n	8000cfe <main+0x46e>
 8000cfc:	e227      	b.n	800114e <main+0x8be>
 8000cfe:	e635      	b.n	800096c <main+0xdc>
				break;
			case '6':
				usbBuf[0]=0;
 8000d00:	4bb0      	ldr	r3, [pc, #704]	; (8000fc4 <main+0x734>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
				filter.FilterMaskIdHigh = HexToInt(usbBuf + 1, 8);
 8000d06:	4bb4      	ldr	r3, [pc, #720]	; (8000fd8 <main+0x748>)
 8000d08:	2108      	movs	r1, #8
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fc42 	bl	8000594 <HexToInt>
 8000d10:	0002      	movs	r2, r0
 8000d12:	4bad      	ldr	r3, [pc, #692]	; (8000fc8 <main+0x738>)
 8000d14:	609a      	str	r2, [r3, #8]
				if (error) goto loopStart;
 8000d16:	4bb1      	ldr	r3, [pc, #708]	; (8000fdc <main+0x74c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <main+0x490>
 8000d1e:	e219      	b.n	8001154 <main+0x8c4>
 8000d20:	e624      	b.n	800096c <main+0xdc>
				break;
			case '7':
				usbBuf[0]=0;
 8000d22:	4ba8      	ldr	r3, [pc, #672]	; (8000fc4 <main+0x734>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
				filter.FilterIdLow = HexToInt(usbBuf + 1, 8);
 8000d28:	4bab      	ldr	r3, [pc, #684]	; (8000fd8 <main+0x748>)
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fc31 	bl	8000594 <HexToInt>
 8000d32:	0002      	movs	r2, r0
 8000d34:	4ba4      	ldr	r3, [pc, #656]	; (8000fc8 <main+0x738>)
 8000d36:	605a      	str	r2, [r3, #4]
				if (error) goto loopStart;
 8000d38:	4ba8      	ldr	r3, [pc, #672]	; (8000fdc <main+0x74c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d100      	bne.n	8000d42 <main+0x4b2>
 8000d40:	e20b      	b.n	800115a <main+0x8ca>
 8000d42:	e613      	b.n	800096c <main+0xdc>
				break;
			case '8':
				usbBuf[0]=0;
 8000d44:	4b9f      	ldr	r3, [pc, #636]	; (8000fc4 <main+0x734>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
				filter.FilterIdHigh = HexToInt(usbBuf + 1, 8);
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	; (8000fd8 <main+0x748>)
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fc20 	bl	8000594 <HexToInt>
 8000d54:	0002      	movs	r2, r0
 8000d56:	4b9c      	ldr	r3, [pc, #624]	; (8000fc8 <main+0x738>)
 8000d58:	601a      	str	r2, [r3, #0]
				if (error) goto loopStart;
 8000d5a:	4ba0      	ldr	r3, [pc, #640]	; (8000fdc <main+0x74c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d100      	bne.n	8000d64 <main+0x4d4>
 8000d62:	e1fd      	b.n	8001160 <main+0x8d0>
 8000d64:	e602      	b.n	800096c <main+0xdc>
				break;
			case '9':
				usbBuf[0]=0;
 8000d66:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <main+0x734>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
				bitrate = DecToInt(usbBuf + 1, len - 1);
 8000d6c:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <main+0x748>)
 8000d6e:	2323      	movs	r3, #35	; 0x23
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f7ff fba6 	bl	80004cc <DecToInt>
 8000d80:	0003      	movs	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b96      	ldr	r3, [pc, #600]	; (8000fe0 <main+0x750>)
 8000d86:	801a      	strh	r2, [r3, #0]
				if (error) goto loopStart;
 8000d88:	4b94      	ldr	r3, [pc, #592]	; (8000fdc <main+0x74c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <main+0x502>
 8000d90:	e1ce      	b.n	8001130 <main+0x8a0>
				if (bitrate == 0 || bitrate > 1000) {
 8000d92:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <main+0x750>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <main+0x516>
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <main+0x750>)
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	23fa      	movs	r3, #250	; 0xfa
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d90c      	bls.n	8000dc0 <main+0x530>
					sprintf(errorString, "%d is not valid bitrate, must be 1..1000 kb/s", bitrate);
 8000da6:	4b8e      	ldr	r3, [pc, #568]	; (8000fe0 <main+0x750>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	001a      	movs	r2, r3
 8000dac:	498d      	ldr	r1, [pc, #564]	; (8000fe4 <main+0x754>)
 8000dae:	4b89      	ldr	r3, [pc, #548]	; (8000fd4 <main+0x744>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f008 fe95 	bl	8009ae0 <siprintf>
					handleError(errorString);
 8000db6:	4b87      	ldr	r3, [pc, #540]	; (8000fd4 <main+0x744>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fb2d 	bl	8000418 <handleError>
					goto loopStart;
 8000dbe:	e5d5      	b.n	800096c <main+0xdc>
				}
				CanCustomInit();
 8000dc0:	f7ff fd02 	bl	80007c8 <CanCustomInit>
				sprintf(outString, "Bitrate set to %d kB/s", bitrate);
 8000dc4:	4b86      	ldr	r3, [pc, #536]	; (8000fe0 <main+0x750>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	4987      	ldr	r1, [pc, #540]	; (8000fe8 <main+0x758>)
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <main+0x75c>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f008 fe86 	bl	8009ae0 <siprintf>
				printLog(outString);
 8000dd4:	4b85      	ldr	r3, [pc, #532]	; (8000fec <main+0x75c>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fb40 	bl	800045c <printLog>
				break;
 8000ddc:	e1c1      	b.n	8001162 <main+0x8d2>
			case 'T':
				usbBuf[0]=0;
 8000dde:	4b79      	ldr	r3, [pc, #484]	; (8000fc4 <main+0x734>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
				if ((usbBuf[1] - '0') > 8) {
 8000de4:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <main+0x734>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	2b38      	cmp	r3, #56	; 0x38
 8000dea:	d904      	bls.n	8000df6 <main+0x566>
					handleError("Message length can't be more than 8!");
 8000dec:	4b80      	ldr	r3, [pc, #512]	; (8000ff0 <main+0x760>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff fb12 	bl	8000418 <handleError>
					goto loopStart;
 8000df4:	e5ba      	b.n	800096c <main+0xdc>
					break;
				}
				if ((usbBuf[2] - '0') > 9) {
 8000df6:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <main+0x734>)
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	2b39      	cmp	r3, #57	; 0x39
 8000dfc:	d904      	bls.n	8000e08 <main+0x578>
					handleError("IDE symbol must be a digit!");
 8000dfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ff4 <main+0x764>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fb09 	bl	8000418 <handleError>
					goto loopStart;
 8000e06:	e5b1      	b.n	800096c <main+0xdc>
					break;
				}
				if ((usbBuf[3] - '0') > 9) {
 8000e08:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <main+0x734>)
 8000e0a:	78db      	ldrb	r3, [r3, #3]
 8000e0c:	2b39      	cmp	r3, #57	; 0x39
 8000e0e:	d904      	bls.n	8000e1a <main+0x58a>
					handleError("RTR symbol must be a digit!");
 8000e10:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <main+0x768>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fb00 	bl	8000418 <handleError>
					goto loopStart;
 8000e18:	e5a8      	b.n	800096c <main+0xdc>
					break;
				}
				uint8_t txData[8] = { 0, };
 8000e1a:	2318      	movs	r3, #24
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
				CAN_TxHeaderTypeDef header = { 0, };
 8000e26:	003b      	movs	r3, r7
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2318      	movs	r3, #24
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f008 fe4d 	bl	8009ace <memset>
				header.DLC = usbBuf[1] - '0';
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <main+0x734>)
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	3b30      	subs	r3, #48	; 0x30
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	611a      	str	r2, [r3, #16]
				header.IDE = (usbBuf[2] == '0') ? 0 : 4;
 8000e40:	4b60      	ldr	r3, [pc, #384]	; (8000fc4 <main+0x734>)
 8000e42:	789b      	ldrb	r3, [r3, #2]
 8000e44:	2b30      	cmp	r3, #48	; 0x30
 8000e46:	d101      	bne.n	8000e4c <main+0x5bc>
 8000e48:	2200      	movs	r2, #0
 8000e4a:	e000      	b.n	8000e4e <main+0x5be>
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	003b      	movs	r3, r7
 8000e50:	609a      	str	r2, [r3, #8]
				header.RTR = (usbBuf[3] == '0') ? 0 : 2;
 8000e52:	4b5c      	ldr	r3, [pc, #368]	; (8000fc4 <main+0x734>)
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	2b30      	cmp	r3, #48	; 0x30
 8000e58:	d101      	bne.n	8000e5e <main+0x5ce>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	e000      	b.n	8000e60 <main+0x5d0>
 8000e5e:	2202      	movs	r2, #2
 8000e60:	003b      	movs	r3, r7
 8000e62:	60da      	str	r2, [r3, #12]
				if (header.IDE) {
 8000e64:	003b      	movs	r3, r7
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d01e      	beq.n	8000eaa <main+0x61a>
					header.ExtId = HexToInt(usbBuf + 4, 8);
 8000e6c:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <main+0x76c>)
 8000e6e:	2108      	movs	r1, #8
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fb8f 	bl	8000594 <HexToInt>
 8000e76:	0002      	movs	r2, r0
 8000e78:	003b      	movs	r3, r7
 8000e7a:	605a      	str	r2, [r3, #4]
					if (error) goto loopStart;
 8000e7c:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <main+0x74c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d000      	beq.n	8000e86 <main+0x5f6>
 8000e84:	e156      	b.n	8001134 <main+0x8a4>
					if (header.ExtId > 0x1FFFFFFF) {
 8000e86:	003b      	movs	r3, r7
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	059b      	lsls	r3, r3, #22
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d32a      	bcc.n	8000ee8 <main+0x658>
						sprintf(errorString, "Extended ID must be lesser than 0x1FFFFFFF (it's %lx)", header.ExtId);
 8000e92:	003b      	movs	r3, r7
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	495a      	ldr	r1, [pc, #360]	; (8001000 <main+0x770>)
 8000e98:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <main+0x744>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f008 fe20 	bl	8009ae0 <siprintf>
						handleError(errorString);
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <main+0x744>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff fab8 	bl	8000418 <handleError>
						goto loopStart;
 8000ea8:	e560      	b.n	800096c <main+0xdc>
						break;
					}
				} else {
					header.StdId = HexToInt(usbBuf + 4, 3);
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <main+0x76c>)
 8000eac:	2103      	movs	r1, #3
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff fb70 	bl	8000594 <HexToInt>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	601a      	str	r2, [r3, #0]
					if (error) goto loopStart;
 8000eba:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <main+0x74c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <main+0x634>
 8000ec2:	e139      	b.n	8001138 <main+0x8a8>
					if (header.StdId > 0x7FF) {
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d30b      	bcc.n	8000ee8 <main+0x658>
						sprintf(errorString, "Standard ID must be lesser than 0x7FF (it's %lx)", header.StdId);
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	494b      	ldr	r1, [pc, #300]	; (8001004 <main+0x774>)
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <main+0x744>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f008 fe01 	bl	8009ae0 <siprintf>
						handleError(errorString);
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x744>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fa99 	bl	8000418 <handleError>
						goto loopStart;
 8000ee6:	e541      	b.n	800096c <main+0xdc>
						break;
					}
				}

				header.TransmitGlobalTime = 0;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	751a      	strb	r2, [r3, #20]
				for (uint8_t i = 0; i < header.DLC; ++i) {
 8000eee:	232b      	movs	r3, #43	; 0x2b
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e023      	b.n	8000f40 <main+0x6b0>
					txData[i] = HexToInt(usbBuf + 7 + (header.IDE != 0) * 5 + 2 * i, 2);
 8000ef8:	003b      	movs	r3, r7
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <main+0x674>
 8000f00:	2305      	movs	r3, #5
 8000f02:	e000      	b.n	8000f06 <main+0x676>
 8000f04:	2300      	movs	r3, #0
 8000f06:	242b      	movs	r4, #43	; 0x2b
 8000f08:	193a      	adds	r2, r7, r4
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	1dda      	adds	r2, r3, #7
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <main+0x734>)
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	2102      	movs	r1, #2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fb3b 	bl	8000594 <HexToInt>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2d1      	uxtb	r1, r2
 8000f26:	2218      	movs	r2, #24
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	54d1      	strb	r1, [r2, r3]
					if (error) goto loopStart;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <main+0x74c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d000      	beq.n	8000f36 <main+0x6a6>
 8000f34:	e102      	b.n	800113c <main+0x8ac>
				for (uint8_t i = 0; i < header.DLC; ++i) {
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	193a      	adds	r2, r7, r4
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	232b      	movs	r3, #43	; 0x2b
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	003b      	movs	r3, r7
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3d4      	bcc.n	8000ef8 <main+0x668>
				}
				if (HAL_CAN_AddTxMessage(&hcan, &header, txData, &mailBox) != HAL_OK) {
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <main+0x778>)
 8000f50:	2218      	movs	r2, #24
 8000f52:	18ba      	adds	r2, r7, r2
 8000f54:	0039      	movs	r1, r7
 8000f56:	482d      	ldr	r0, [pc, #180]	; (800100c <main+0x77c>)
 8000f58:	f000 fe75 	bl	8001c46 <HAL_CAN_AddTxMessage>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d004      	beq.n	8000f6a <main+0x6da>
					handleError("Can't send CAN message...");
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <main+0x780>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fa58 	bl	8000418 <handleError>
					goto loopStart;
 8000f68:	e500      	b.n	800096c <main+0xdc>
				}
				totalTXCnt++;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <main+0x784>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <main+0x784>)
 8000f72:	601a      	str	r2, [r3, #0]
				lastTx = HAL_GetTick();
 8000f74:	f000 fbb6 	bl	80016e4 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <main+0x788>)
 8000f7c:	601a      	str	r2, [r3, #0]
				break;
 8000f7e:	e0f0      	b.n	8001162 <main+0x8d2>

			case 't':
				usbBuf[0]=0;
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <main+0x734>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
				header.DLC = 8;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2208      	movs	r2, #8
 8000f8a:	611a      	str	r2, [r3, #16]
				header.IDE = 4;
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	2204      	movs	r2, #4
 8000f90:	609a      	str	r2, [r3, #8]
				header.RTR = 0;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
				header.TransmitGlobalTime = 0;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	751a      	strb	r2, [r3, #20]
				header.ExtId = HexToInt(usbBuf + 1, 8);
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <main+0x748>)
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff faf6 	bl	8000594 <HexToInt>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	003b      	movs	r3, r7
 8000fac:	605a      	str	r2, [r3, #4]
				if (error) goto loopStart;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <main+0x74c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d000      	beq.n	8000fb8 <main+0x728>
 8000fb6:	e0c3      	b.n	8001140 <main+0x8b0>
				for (uint8_t i = 0; i < header.DLC; ++i) {
 8000fb8:	232a      	movs	r3, #42	; 0x2a
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e04a      	b.n	8001058 <main+0x7c8>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000470 	.word	0x20000470
 8000fc8:	200017a8 	.word	0x200017a8
 8000fcc:	0800a558 	.word	0x0800a558
 8000fd0:	0800a570 	.word	0x0800a570
 8000fd4:	20001728 	.word	0x20001728
 8000fd8:	20000471 	.word	0x20000471
 8000fdc:	20000200 	.word	0x20000200
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	0800a594 	.word	0x0800a594
 8000fe8:	0800a5c4 	.word	0x0800a5c4
 8000fec:	20000220 	.word	0x20000220
 8000ff0:	0800a5dc 	.word	0x0800a5dc
 8000ff4:	0800a604 	.word	0x0800a604
 8000ff8:	0800a620 	.word	0x0800a620
 8000ffc:	20000474 	.word	0x20000474
 8001000:	0800a63c 	.word	0x0800a63c
 8001004:	0800a674 	.word	0x0800a674
 8001008:	2000021c 	.word	0x2000021c
 800100c:	20001700 	.word	0x20001700
 8001010:	0800a6a8 	.word	0x0800a6a8
 8001014:	20000218 	.word	0x20000218
 8001018:	20000210 	.word	0x20000210
					txData[i] = HexToInt(usbBuf + 9 + 2 * i, 2);
 800101c:	242a      	movs	r4, #42	; 0x2a
 800101e:	193b      	adds	r3, r7, r4
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	3309      	adds	r3, #9
 8001026:	001a      	movs	r2, r3
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <main+0x8d8>)
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	2102      	movs	r1, #2
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fab0 	bl	8000594 <HexToInt>
 8001034:	0002      	movs	r2, r0
 8001036:	0020      	movs	r0, r4
 8001038:	183b      	adds	r3, r7, r0
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2d1      	uxtb	r1, r2
 800103e:	2218      	movs	r2, #24
 8001040:	18ba      	adds	r2, r7, r2
 8001042:	54d1      	strb	r1, [r2, r3]
					if (error) goto loopStart;
 8001044:	4b49      	ldr	r3, [pc, #292]	; (800116c <main+0x8dc>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d000      	beq.n	800104e <main+0x7be>
 800104c:	e07a      	b.n	8001144 <main+0x8b4>
				for (uint8_t i = 0; i < header.DLC; ++i) {
 800104e:	183b      	adds	r3, r7, r0
 8001050:	183a      	adds	r2, r7, r0
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	3201      	adds	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	232a      	movs	r3, #42	; 0x2a
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	003b      	movs	r3, r7
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3da      	bcc.n	800101c <main+0x78c>
				}
				HAL_CAN_AddTxMessage(&hcan, &header, txData, &mailBox);
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <main+0x8e0>)
 8001068:	2218      	movs	r2, #24
 800106a:	18ba      	adds	r2, r7, r2
 800106c:	0039      	movs	r1, r7
 800106e:	4841      	ldr	r0, [pc, #260]	; (8001174 <main+0x8e4>)
 8001070:	f000 fde9 	bl	8001c46 <HAL_CAN_AddTxMessage>
				totalTXCnt++;
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <main+0x8e8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <main+0x8e8>)
 800107c:	601a      	str	r2, [r3, #0]
				lastTx = HAL_GetTick();
 800107e:	f000 fb31 	bl	80016e4 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <main+0x8ec>)
 8001086:	601a      	str	r2, [r3, #0]
				break;
 8001088:	e06b      	b.n	8001162 <main+0x8d2>
			case 'V':
				usbBuf[0]=0;
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <main+0x8d8>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
				sprintf(outString, "<V%08x>\r\n", VERSION);
 8001090:	2304      	movs	r3, #4
 8001092:	33ff      	adds	r3, #255	; 0xff
 8001094:	001a      	movs	r2, r3
 8001096:	493a      	ldr	r1, [pc, #232]	; (8001180 <main+0x8f0>)
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <main+0x8f4>)
 800109a:	0018      	movs	r0, r3
 800109c:	f008 fd20 	bl	8009ae0 <siprintf>
				CDC_Transmit_FS((uint8_t*) outString, (strlen(outString)));
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <main+0x8f4>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f830 	bl	8000108 <strlen>
 80010a8:	0003      	movs	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <main+0x8f4>)
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f008 f81d 	bl	80090f0 <CDC_Transmit_FS>
				break;
 80010b6:	e054      	b.n	8001162 <main+0x8d2>
			case 'N':
				usbBuf[0]=0;
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <main+0x8d8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
				canMode = CAN_MODE_NORMAL;
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <main+0x8f8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
				CanCustomInit();
 80010c4:	f7ff fb80 	bl	80007c8 <CanCustomInit>
				printLog("Can mode set to NORMAL");
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <main+0x8fc>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff f9c6 	bl	800045c <printLog>
				break;
 80010d0:	e047      	b.n	8001162 <main+0x8d2>

			case 'S':
				usbBuf[0]=0;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <main+0x8d8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
				canMode = CAN_MODE_SILENT;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x8f8>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	0612      	lsls	r2, r2, #24
 80010de:	601a      	str	r2, [r3, #0]
				CanCustomInit();
 80010e0:	f7ff fb72 	bl	80007c8 <CanCustomInit>
				printLog("Can mode set to SILENT");
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <main+0x900>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff f9b8 	bl	800045c <printLog>
				break;
 80010ec:	e039      	b.n	8001162 <main+0x8d2>

			case 'L':
				usbBuf[0]=0;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <main+0x8d8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
				canMode = CAN_MODE_LOOPBACK;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <main+0x8f8>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	05d2      	lsls	r2, r2, #23
 80010fa:	601a      	str	r2, [r3, #0]
				CanCustomInit();
 80010fc:	f7ff fb64 	bl	80007c8 <CanCustomInit>
				printLog("Can mode set to LOOPBACK");
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <main+0x904>)
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff f9aa 	bl	800045c <printLog>
				break;
 8001108:	e02b      	b.n	8001162 <main+0x8d2>

			case 'K':
				usbBuf[0]=0;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <main+0x8d8>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
				canMode = CAN_MODE_SILENT_LOOPBACK;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <main+0x8f8>)
 8001112:	22c0      	movs	r2, #192	; 0xc0
 8001114:	0612      	lsls	r2, r2, #24
 8001116:	601a      	str	r2, [r3, #0]
				CanCustomInit();
 8001118:	f7ff fb56 	bl	80007c8 <CanCustomInit>
				printLog("Can mode set to SILENT LOOPBACK");
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <main+0x908>)
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff f99c 	bl	800045c <printLog>
				break;
 8001124:	e01d      	b.n	8001162 <main+0x8d2>

			default:
				printLog("Command not supported");
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <main+0x90c>)
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff f997 	bl	800045c <printLog>
				break;
 800112e:	e018      	b.n	8001162 <main+0x8d2>
				if (error) goto loopStart;
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	e41b      	b.n	800096c <main+0xdc>
					if (error) goto loopStart;
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	e419      	b.n	800096c <main+0xdc>
					if (error) goto loopStart;
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	e417      	b.n	800096c <main+0xdc>
					if (error) goto loopStart;
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	e415      	b.n	800096c <main+0xdc>
				if (error) goto loopStart;
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	e413      	b.n	800096c <main+0xdc>
					if (error) goto loopStart;
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	e411      	b.n	800096c <main+0xdc>
			}
		}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	f7ff fc0f 	bl	800096c <main+0xdc>
				break;
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	f7ff fc0c 	bl	800096c <main+0xdc>
				break;
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	f7ff fc09 	bl	800096c <main+0xdc>
				break;
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	f7ff fc06 	bl	800096c <main+0xdc>
				break;
 8001160:	46c0      	nop			; (mov r8, r8)
		loopStart:
 8001162:	f7ff fc03 	bl	800096c <main+0xdc>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000470 	.word	0x20000470
 800116c:	20000200 	.word	0x20000200
 8001170:	2000021c 	.word	0x2000021c
 8001174:	20001700 	.word	0x20001700
 8001178:	20000218 	.word	0x20000218
 800117c:	20000210 	.word	0x20000210
 8001180:	0800a6c4 	.word	0x0800a6c4
 8001184:	20000220 	.word	0x20000220
 8001188:	20000208 	.word	0x20000208
 800118c:	0800a6d0 	.word	0x0800a6d0
 8001190:	0800a6e8 	.word	0x0800a6e8
 8001194:	0800a700 	.word	0x0800a700
 8001198:	0800a71c 	.word	0x0800a71c
 800119c:	0800a73c 	.word	0x0800a73c

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b099      	sub	sp, #100	; 0x64
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	242c      	movs	r4, #44	; 0x2c
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	0018      	movs	r0, r3
 80011ac:	2334      	movs	r3, #52	; 0x34
 80011ae:	001a      	movs	r2, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	f008 fc8c 	bl	8009ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b6:	231c      	movs	r3, #28
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	0018      	movs	r0, r3
 80011bc:	2310      	movs	r3, #16
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f008 fc84 	bl	8009ace <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c6:	003b      	movs	r3, r7
 80011c8:	0018      	movs	r0, r3
 80011ca:	231c      	movs	r3, #28
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f008 fc7d 	bl	8009ace <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
 80011d4:	0021      	movs	r1, r4
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2228      	movs	r2, #40	; 0x28
 80011da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2201      	movs	r2, #1
 80011e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2201      	movs	r2, #1
 80011e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	0018      	movs	r0, r3
 80011f2:	f003 fbab 	bl	800494c <HAL_RCC_OscConfig>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80011fa:	f000 f8dd 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	211c      	movs	r1, #28
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2207      	movs	r2, #7
 8001204:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2203      	movs	r2, #3
 800120a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2101      	movs	r1, #1
 800121c:	0018      	movs	r0, r3
 800121e:	f003 ff1b 	bl	8005058 <HAL_RCC_ClockConfig>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001226:	f000 f8c7 	bl	80013b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800122a:	003b      	movs	r3, r7
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	0292      	lsls	r2, r2, #10
 8001230:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	003b      	movs	r3, r7
 800123a:	0018      	movs	r0, r3
 800123c:	f004 f868 	bl	8005310 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001244:	f000 f8b8 	bl	80013b8 <Error_Handler>
  }
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b019      	add	sp, #100	; 0x64
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_CAN_Init+0x68>)
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MX_CAN_Init+0x6c>)
 8001258:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_CAN_Init+0x68>)
 800125c:	220c      	movs	r2, #12
 800125e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_CAN_Init+0x68>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_CAN_Init+0x68>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_CAN_Init+0x68>)
 800126e:	22c0      	movs	r2, #192	; 0xc0
 8001270:	0312      	lsls	r2, r2, #12
 8001272:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_CAN_Init+0x68>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	0352      	lsls	r2, r2, #13
 800127a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_CAN_Init+0x68>)
 800127e:	2200      	movs	r2, #0
 8001280:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_CAN_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_CAN_Init+0x68>)
 800128a:	2200      	movs	r2, #0
 800128c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_CAN_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_CAN_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_CAN_Init+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <MX_CAN_Init+0x68>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fa28 	bl	80016f8 <HAL_CAN_Init>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012ac:	f000 f884 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20001700 	.word	0x20001700
 80012bc:	40006400 	.word	0x40006400

080012c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_IWDG_Init+0x34>)
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <MX_IWDG_Init+0x38>)
 80012c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_IWDG_Init+0x34>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_IWDG_Init+0x34>)
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <MX_IWDG_Init+0x3c>)
 80012d4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_IWDG_Init+0x34>)
 80012d8:	4a08      	ldr	r2, [pc, #32]	; (80012fc <MX_IWDG_Init+0x3c>)
 80012da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <MX_IWDG_Init+0x34>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fc60 	bl	8002ba4 <HAL_IWDG_Init>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80012e8:	f000 f866 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	200004f0 	.word	0x200004f0
 80012f8:	40003000 	.word	0x40003000
 80012fc:	00000fff 	.word	0x00000fff

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	240c      	movs	r4, #12
 8001308:	193b      	adds	r3, r7, r4
 800130a:	0018      	movs	r0, r3
 800130c:	2314      	movs	r3, #20
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f008 fbdc 	bl	8009ace <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <MX_GPIO_Init+0xb0>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	03c9      	lsls	r1, r1, #15
 8001320:	430a      	orrs	r2, r1
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	03db      	lsls	r3, r3, #15
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	02c9      	lsls	r1, r1, #11
 800133c:	430a      	orrs	r2, r1
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	02db      	lsls	r3, r3, #11
 8001348:	4013      	ands	r3, r2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_GPIO_Init+0xb0>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0289      	lsls	r1, r1, #10
 8001358:	430a      	orrs	r2, r1
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_GPIO_Init+0xb0>)
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_GPIO_Init+0xb4>)
 800136c:	2200      	movs	r2, #0
 800136e:	2103      	movs	r1, #3
 8001370:	0018      	movs	r0, r3
 8001372:	f001 fbf9 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_GPIO_Init+0xb4>)
 8001378:	2201      	movs	r2, #1
 800137a:	2108      	movs	r1, #8
 800137c:	0018      	movs	r0, r3
 800137e:	f001 fbf3 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_LED_Pin RX_LED_Pin USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin|USB_PULLUP_Pin;
 8001382:	0021      	movs	r1, r4
 8001384:	187b      	adds	r3, r7, r1
 8001386:	220b      	movs	r2, #11
 8001388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	187b      	adds	r3, r7, r1
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <MX_GPIO_Init+0xb4>)
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f001 f990 	bl	80026c8 <HAL_GPIO_Init>

}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b009      	add	sp, #36	; 0x24
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	430a      	orrs	r2, r1
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2201      	movs	r2, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0549      	lsls	r1, r1, #21
 80013ec:	430a      	orrs	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_MspInit+0x44>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b08b      	sub	sp, #44	; 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2414      	movs	r4, #20
 8001416:	193b      	adds	r3, r7, r4
 8001418:	0018      	movs	r0, r3
 800141a:	2314      	movs	r3, #20
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f008 fb55 	bl	8009ace <memset>
  if(hcan->Instance==CAN)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_CAN_MspInit+0xa0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d13a      	bne.n	80014a4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001430:	69da      	ldr	r2, [r3, #28]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0489      	lsls	r1, r1, #18
 8001438:	430a      	orrs	r2, r1
 800143a:	61da      	str	r2, [r3, #28]
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 800143e:	69da      	ldr	r2, [r3, #28]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	049b      	lsls	r3, r3, #18
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	02c9      	lsls	r1, r1, #11
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_CAN_MspInit+0xa4>)
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	02db      	lsls	r3, r3, #11
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	193b      	adds	r3, r7, r4
 8001468:	22c0      	movs	r2, #192	; 0xc0
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	0021      	movs	r1, r4
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2202      	movs	r2, #2
 8001474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2203      	movs	r2, #3
 8001480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2204      	movs	r2, #4
 8001486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	187b      	adds	r3, r7, r1
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_CAN_MspInit+0xa8>)
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f001 f91a 	bl	80026c8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	201e      	movs	r0, #30
 800149a:	f001 f8d3 	bl	8002644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800149e:	201e      	movs	r0, #30
 80014a0:	f001 f8e5 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b00b      	add	sp, #44	; 0x2c
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	40006400 	.word	0x40006400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_CAN_MspDeInit+0x3c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10f      	bne.n	80014ea <HAL_CAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_CAN_MspDeInit+0x40>)
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_CAN_MspDeInit+0x40>)
 80014d0:	490a      	ldr	r1, [pc, #40]	; (80014fc <HAL_CAN_MspDeInit+0x44>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	61da      	str	r2, [r3, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_CAN_MspDeInit+0x48>)
 80014dc:	0019      	movs	r1, r3
 80014de:	0010      	movs	r0, r2
 80014e0:	f001 fa6a 	bl	80029b8 <HAL_GPIO_DeInit>

    /* CAN interrupt DeInit */
    HAL_NVIC_DisableIRQ(CEC_CAN_IRQn);
 80014e4:	201e      	movs	r0, #30
 80014e6:	f001 f8d2 	bl	800268e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	40006400 	.word	0x40006400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	fdffffff 	.word	0xfdffffff
 8001500:	48000400 	.word	0x48000400

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8ca 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <CEC_CAN_IRQHandler+0x14>)
 800153a:	0018      	movs	r0, r3
 800153c:	f000 fda7 	bl	800208e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20001700 	.word	0x20001700

0800154c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <USB_IRQHandler+0x14>)
 8001552:	0018      	movs	r0, r3
 8001554:	f001 fcbe 	bl	8002ed4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	2000247c 	.word	0x2000247c

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f008 fa68 	bl	8009a68 <__errno>
 8001598:	0003      	movs	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	18d2      	adds	r2, r2, r3
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b006      	add	sp, #24
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20004000 	.word	0x20004000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000240 	.word	0x20000240
 80015cc:	20002780 	.word	0x20002780

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001606:	f7ff ffe3 	bl	80015d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800160a:	f008 fa33 	bl	8009a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff f93f 	bl	8000890 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   r0, =_estack
 8001614:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001620:	0800aae4 	.word	0x0800aae4
  ldr r2, =_sbss
 8001624:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001628:	20002780 	.word	0x20002780

0800162c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_COMP_IRQHandler>
	...

08001630 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_Init+0x24>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_Init+0x24>)
 800163a:	2110      	movs	r1, #16
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f809 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff febd 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_InitTick+0x5c>)
 8001662:	681c      	ldr	r4, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_InitTick+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0019      	movs	r1, r3
 800166a:	23fa      	movs	r3, #250	; 0xfa
 800166c:	0098      	lsls	r0, r3, #2
 800166e:	f7fe fd5d 	bl	800012c <__udivsi3>
 8001672:	0003      	movs	r3, r0
 8001674:	0019      	movs	r1, r3
 8001676:	0020      	movs	r0, r4
 8001678:	f7fe fd58 	bl	800012c <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	0018      	movs	r0, r3
 8001680:	f001 f815 	bl	80026ae <HAL_SYSTICK_Config>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00f      	b.n	80016ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d80b      	bhi.n	80016aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	2301      	movs	r3, #1
 8001696:	425b      	negs	r3, r3
 8001698:	2200      	movs	r2, #0
 800169a:	0018      	movs	r0, r3
 800169c:	f000 ffd2 	bl	8002644 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_InitTick+0x64>)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b003      	add	sp, #12
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	20000004 	.word	0x20000004
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	18d2      	adds	r2, r2, r3
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	200017e4 	.word	0x200017e4

080016e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	200017e4 	.word	0x200017e4

080016f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0f0      	b.n	80018ec <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fe77 	bl	800140c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172e:	f7ff ffd9 	bl	80016e4 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001736:	e013      	b.n	8001760 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001738:	f7ff ffd4 	bl	80016e4 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b0a      	cmp	r3, #10
 8001744:	d90c      	bls.n	8001760 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	0292      	lsls	r2, r2, #10
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	2105      	movs	r1, #5
 800175a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0c5      	b.n	80018ec <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	4013      	ands	r3, r2
 800176a:	d0e5      	beq.n	8001738 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2102      	movs	r1, #2
 8001778:	438a      	bics	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff ffb2 	bl	80016e4 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001784:	e013      	b.n	80017ae <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001786:	f7ff ffad 	bl	80016e4 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b0a      	cmp	r3, #10
 8001792:	d90c      	bls.n	80017ae <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0292      	lsls	r2, r2, #10
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	2105      	movs	r1, #5
 80017a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e09e      	b.n	80018ec <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1e5      	bne.n	8001786 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e1b      	ldrb	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	438a      	bics	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e5b      	ldrb	r3, [r3, #25]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e007      	b.n	800180e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2140      	movs	r1, #64	; 0x40
 800180a:	438a      	bics	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7e9b      	ldrb	r3, [r3, #26]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2120      	movs	r1, #32
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2120      	movs	r1, #32
 8001834:	438a      	bics	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7edb      	ldrb	r3, [r3, #27]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2110      	movs	r1, #16
 800184c:	438a      	bics	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e007      	b.n	8001862 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2110      	movs	r1, #16
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7f1b      	ldrb	r3, [r3, #28]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2108      	movs	r1, #8
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e007      	b.n	800188c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2108      	movs	r1, #8
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7f5b      	ldrb	r3, [r3, #29]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2104      	movs	r1, #4
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e007      	b.n	80018b6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2104      	movs	r1, #4
 80018b2:	438a      	bics	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	0011      	movs	r1, r2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	1e5a      	subs	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	2101      	movs	r1, #1
 80018e8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e018      	b.n	8001938 <HAL_CAN_DeInit+0x44>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f951 	bl	8001bb0 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff fdd1 	bl	80014b8 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0209      	lsls	r1, r1, #8
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001950:	2013      	movs	r0, #19
 8001952:	183b      	adds	r3, r7, r0
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	2120      	movs	r1, #32
 8001958:	5c52      	ldrb	r2, [r2, r1]
 800195a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800195c:	0002      	movs	r2, r0
 800195e:	18bb      	adds	r3, r7, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d004      	beq.n	8001970 <HAL_CAN_ConfigFilter+0x30>
 8001966:	18bb      	adds	r3, r7, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d000      	beq.n	8001970 <HAL_CAN_ConfigFilter+0x30>
 800196e:	e0cd      	b.n	8001b0c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	58d3      	ldr	r3, [r2, r3]
 8001978:	2201      	movs	r2, #1
 800197a:	431a      	orrs	r2, r3
 800197c:	0011      	movs	r1, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	221f      	movs	r2, #31
 800198c:	4013      	ands	r3, r2
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	2387      	movs	r3, #135	; 0x87
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	58d3      	ldr	r3, [r2, r3]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	43d2      	mvns	r2, r2
 80019a2:	401a      	ands	r2, r3
 80019a4:	0011      	movs	r1, r2
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	2387      	movs	r3, #135	; 0x87
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d129      	bne.n	8001a0a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	2383      	movs	r3, #131	; 0x83
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	58d3      	ldr	r3, [r2, r3]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	43d2      	mvns	r2, r2
 80019c2:	401a      	ands	r2, r3
 80019c4:	0011      	movs	r1, r2
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	2383      	movs	r3, #131	; 0x83
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019e0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3248      	adds	r2, #72	; 0x48
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019fe:	6979      	ldr	r1, [r7, #20]
 8001a00:	3348      	adds	r3, #72	; 0x48
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	18cb      	adds	r3, r1, r3
 8001a06:	3304      	adds	r3, #4
 8001a08:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d128      	bne.n	8001a64 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	2383      	movs	r3, #131	; 0x83
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	58d2      	ldr	r2, [r2, r3]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	0011      	movs	r1, r2
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	2383      	movs	r3, #131	; 0x83
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a3a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3248      	adds	r2, #72	; 0x48
 8001a40:	00d2      	lsls	r2, r2, #3
 8001a42:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	3348      	adds	r3, #72	; 0x48
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	18cb      	adds	r3, r1, r3
 8001a60:	3304      	adds	r3, #4
 8001a62:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10c      	bne.n	8001a86 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	2381      	movs	r3, #129	; 0x81
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	58d3      	ldr	r3, [r2, r3]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	43d2      	mvns	r2, r2
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	2381      	movs	r3, #129	; 0x81
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	50d1      	str	r1, [r2, r3]
 8001a84:	e00a      	b.n	8001a9c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	2381      	movs	r3, #129	; 0x81
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	58d2      	ldr	r2, [r2, r3]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	0011      	movs	r1, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	2381      	movs	r3, #129	; 0x81
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10c      	bne.n	8001abe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	2385      	movs	r3, #133	; 0x85
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	58d3      	ldr	r3, [r2, r3]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	43d2      	mvns	r2, r2
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	2385      	movs	r3, #133	; 0x85
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	50d1      	str	r1, [r2, r3]
 8001abc:	e00a      	b.n	8001ad4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	2385      	movs	r3, #133	; 0x85
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	58d2      	ldr	r2, [r2, r3]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	0011      	movs	r1, r2
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	2385      	movs	r3, #133	; 0x85
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10a      	bne.n	8001af2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	2387      	movs	r3, #135	; 0x87
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	58d2      	ldr	r2, [r2, r3]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	0011      	movs	r1, r2
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	2387      	movs	r3, #135	; 0x87
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	2201      	movs	r2, #1
 8001afc:	4393      	bics	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e007      	b.n	8001b1c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	02d2      	lsls	r2, r2, #11
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b006      	add	sp, #24
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d12f      	bne.n	8001b98 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fdc8 	bl	80016e4 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b58:	e013      	b.n	8001b82 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b5a:	f7ff fdc3 	bl	80016e4 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d90c      	bls.n	8001b82 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0292      	lsls	r2, r2, #10
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	2105      	movs	r1, #5
 8001b7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e012      	b.n	8001ba8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1e5      	bne.n	8001b5a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e007      	b.n	8001ba8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	0312      	lsls	r2, r2, #12
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
  }
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d134      	bne.n	8001c2e <HAL_CAN_Stop+0x7e>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fd86 	bl	80016e4 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bdc:	e013      	b.n	8001c06 <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bde:	f7ff fd81 	bl	80016e4 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b0a      	cmp	r3, #10
 8001bea:	d90c      	bls.n	8001c06 <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0292      	lsls	r2, r2, #10
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	2105      	movs	r1, #5
 8001c00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e01b      	b.n	8001c3e <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d0e5      	beq.n	8001bde <HAL_CAN_Stop+0x2e>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	438a      	bics	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	0352      	lsls	r2, r2, #13
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
  }
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b088      	sub	sp, #32
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c54:	201f      	movs	r0, #31
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	5c52      	ldrb	r2, [r2, r1]
 8001c5e:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d004      	beq.n	8001c7a <HAL_CAN_AddTxMessage+0x34>
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d000      	beq.n	8001c7a <HAL_CAN_AddTxMessage+0x34>
 8001c78:	e0b7      	b.n	8001dea <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	04db      	lsls	r3, r3, #19
 8001c80:	4013      	ands	r3, r2
 8001c82:	d10a      	bne.n	8001c9a <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c8c:	d105      	bne.n	8001c9a <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	055b      	lsls	r3, r3, #21
 8001c94:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c96:	d100      	bne.n	8001c9a <HAL_CAN_AddTxMessage+0x54>
 8001c98:	e09e      	b.n	8001dd8 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	0e1b      	lsrs	r3, r3, #24
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	0412      	lsls	r2, r2, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e09e      	b.n	8001dfa <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	3218      	adds	r2, #24
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	50d1      	str	r1, [r2, r3]
 8001ce6:	e00f      	b.n	8001d08 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001cfe:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	3218      	adds	r2, #24
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6819      	ldr	r1, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3318      	adds	r3, #24
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	18cb      	adds	r3, r1, r3
 8001d18:	3304      	adds	r3, #4
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	7d1b      	ldrb	r3, [r3, #20]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d112      	bne.n	8001d4a <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	3304      	adds	r3, #4
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6819      	ldr	r1, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3318      	adds	r3, #24
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	18cb      	adds	r3, r1, r3
 8001d46:	3304      	adds	r3, #4
 8001d48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3307      	adds	r3, #7
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	061a      	lsls	r2, r3, #24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3306      	adds	r3, #6
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3305      	adds	r3, #5
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	6979      	ldr	r1, [r7, #20]
 8001d76:	23c6      	movs	r3, #198	; 0xc6
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	0109      	lsls	r1, r1, #4
 8001d7c:	1841      	adds	r1, r0, r1
 8001d7e:	18cb      	adds	r3, r1, r3
 8001d80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3303      	adds	r3, #3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	061a      	lsls	r2, r3, #24
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	0019      	movs	r1, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	6979      	ldr	r1, [r7, #20]
 8001dac:	23c4      	movs	r3, #196	; 0xc4
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	0109      	lsls	r1, r1, #4
 8001db2:	1841      	adds	r1, r0, r1
 8001db4:	18cb      	adds	r3, r1, r3
 8001db6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	3218      	adds	r2, #24
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	58d2      	ldr	r2, [r2, r3]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	3218      	adds	r2, #24
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e010      	b.n	8001dfa <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	0392      	lsls	r2, r2, #14
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e007      	b.n	8001dfa <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	02d2      	lsls	r2, r2, #11
 8001df2:	431a      	orrs	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
  }
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b008      	add	sp, #32
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e10:	2017      	movs	r0, #23
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	2120      	movs	r1, #32
 8001e18:	5c52      	ldrb	r2, [r2, r1]
 8001e1a:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	18bb      	adds	r3, r7, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d004      	beq.n	8001e30 <HAL_CAN_GetRxMessage+0x2e>
 8001e26:	18bb      	adds	r3, r7, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d000      	beq.n	8001e30 <HAL_CAN_GetRxMessage+0x2e>
 8001e2e:	e0f8      	b.n	8002022 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d117      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	0392      	lsls	r2, r2, #14
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0ee      	b.n	8002032 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0392      	lsls	r2, r2, #14
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0df      	b.n	8002032 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	321b      	adds	r2, #27
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	58d3      	ldr	r3, [r2, r3]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	321b      	adds	r2, #27
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	58d3      	ldr	r3, [r2, r3]
 8001e9a:	0d5b      	lsrs	r3, r3, #21
 8001e9c:	055b      	lsls	r3, r3, #21
 8001e9e:	0d5a      	lsrs	r2, r3, #21
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e00a      	b.n	8001ebc <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	321b      	adds	r2, #27
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	58d3      	ldr	r3, [r2, r3]
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	321b      	adds	r2, #27
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	58d3      	ldr	r3, [r2, r3]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	331b      	adds	r3, #27
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	18d3      	adds	r3, r2, r3
 8001edc:	3304      	adds	r3, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	331b      	adds	r3, #27
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	331b      	adds	r3, #27
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	3304      	adds	r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	0c1a      	lsrs	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	23dc      	movs	r3, #220	; 0xdc
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	188a      	adds	r2, r1, r2
 8001f2a:	18d3      	adds	r3, r2, r3
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	23dc      	movs	r3, #220	; 0xdc
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	188a      	adds	r2, r1, r2
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0a1a      	lsrs	r2, r3, #8
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	23dc      	movs	r3, #220	; 0xdc
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	188a      	adds	r2, r1, r2
 8001f5e:	18d3      	adds	r3, r2, r3
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0c1a      	lsrs	r2, r3, #16
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3302      	adds	r3, #2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	23dc      	movs	r3, #220	; 0xdc
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	188a      	adds	r2, r1, r2
 8001f7a:	18d3      	adds	r3, r2, r3
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0e1a      	lsrs	r2, r3, #24
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	3303      	adds	r3, #3
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	23de      	movs	r3, #222	; 0xde
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	188a      	adds	r2, r1, r2
 8001f96:	18d3      	adds	r3, r2, r3
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	23de      	movs	r3, #222	; 0xde
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	188a      	adds	r2, r1, r2
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0a1a      	lsrs	r2, r3, #8
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	3305      	adds	r3, #5
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	23de      	movs	r3, #222	; 0xde
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	188a      	adds	r2, r1, r2
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0c1a      	lsrs	r2, r3, #16
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	23de      	movs	r3, #222	; 0xde
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	188a      	adds	r2, r1, r2
 8001fe8:	18d3      	adds	r3, r2, r3
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e1a      	lsrs	r2, r3, #24
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d108      	bne.n	800200e <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2120      	movs	r1, #32
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	e007      	b.n	800201e <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2120      	movs	r1, #32
 800201a:	430a      	orrs	r2, r1
 800201c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e007      	b.n	8002032 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	02d2      	lsls	r2, r2, #11
 800202a:	431a      	orrs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
  }
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b006      	add	sp, #24
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002044:	200f      	movs	r0, #15
 8002046:	183b      	adds	r3, r7, r0
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	2120      	movs	r1, #32
 800204c:	5c52      	ldrb	r2, [r2, r1]
 800204e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002050:	0002      	movs	r2, r0
 8002052:	18bb      	adds	r3, r7, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_CAN_ActivateNotification+0x28>
 800205a:	18bb      	adds	r3, r7, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d109      	bne.n	8002076 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6959      	ldr	r1, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e007      	b.n	8002086 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	02d2      	lsls	r2, r2, #11
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
  }
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b08a      	sub	sp, #40	; 0x28
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d100      	bne.n	80020d4 <HAL_CAN_IRQHandler+0x46>
 80020d2:	e084      	b.n	80021de <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d024      	beq.n	8002126 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f981 	bl	80023f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80020f4:	e017      	b.n	8002126 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d005      	beq.n	800210a <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	4313      	orrs	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e00d      	b.n	8002126 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2208      	movs	r2, #8
 800210e:	4013      	ands	r3, r2
 8002110:	d005      	beq.n	800211e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	0152      	lsls	r2, r2, #5
 8002118:	4313      	orrs	r3, r2
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	e003      	b.n	8002126 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f980 	bl	8002426 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d028      	beq.n	8002182 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f95d 	bl	8002406 <HAL_CAN_TxMailbox1CompleteCallback>
 800214c:	e019      	b.n	8002182 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4013      	ands	r3, r2
 8002156:	d005      	beq.n	8002164 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0192      	lsls	r2, r2, #6
 800215e:	4313      	orrs	r3, r2
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e00e      	b.n	8002182 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4013      	ands	r3, r2
 800216c:	d005      	beq.n	800217a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	01d2      	lsls	r2, r2, #7
 8002174:	4313      	orrs	r3, r2
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e003      	b.n	8002182 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f95a 	bl	8002436 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	4013      	ands	r3, r2
 800218a:	d028      	beq.n	80021de <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	0252      	lsls	r2, r2, #9
 8002194:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	4013      	ands	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f937 	bl	8002416 <HAL_CAN_TxMailbox2CompleteCallback>
 80021a8:	e019      	b.n	80021de <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	02db      	lsls	r3, r3, #11
 80021b0:	4013      	ands	r3, r2
 80021b2:	d005      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0212      	lsls	r2, r2, #8
 80021ba:	4313      	orrs	r3, r2
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e00e      	b.n	80021de <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	031b      	lsls	r3, r3, #12
 80021c6:	4013      	ands	r3, r2
 80021c8:	d005      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0252      	lsls	r2, r2, #9
 80021d0:	4313      	orrs	r3, r2
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	e003      	b.n	80021de <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f934 	bl	8002446 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	2208      	movs	r2, #8
 80021e2:	4013      	ands	r3, r2
 80021e4:	d00c      	beq.n	8002200 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2210      	movs	r2, #16
 80021ea:	4013      	ands	r3, r2
 80021ec:	d008      	beq.n	8002200 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4313      	orrs	r3, r2
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	2204      	movs	r2, #4
 8002204:	4013      	ands	r3, r2
 8002206:	d00b      	beq.n	8002220 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2208      	movs	r2, #8
 800220c:	4013      	ands	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f91b 	bl	8002456 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2203      	movs	r2, #3
 8002230:	4013      	ands	r3, r2
 8002232:	d003      	beq.n	800223c <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f7fe fa2c 	bl	8000694 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	4013      	ands	r3, r2
 8002242:	d00c      	beq.n	800225e <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2210      	movs	r2, #16
 8002248:	4013      	ands	r3, r2
 800224a:	d008      	beq.n	800225e <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	00d2      	lsls	r2, r2, #3
 8002252:	4313      	orrs	r3, r2
 8002254:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2220      	movs	r2, #32
 8002262:	4013      	ands	r3, r2
 8002264:	d00b      	beq.n	800227e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2208      	movs	r2, #8
 800226a:	4013      	ands	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2208      	movs	r2, #8
 8002274:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f8fc 	bl	8002476 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	2210      	movs	r2, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2203      	movs	r2, #3
 800228e:	4013      	ands	r3, r2
 8002290:	d003      	beq.n	800229a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f8e6 	bl	8002466 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	029b      	lsls	r3, r3, #10
 80022a0:	4013      	ands	r3, r2
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2210      	movs	r2, #16
 80022a8:	4013      	ands	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8e5 	bl	8002486 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4013      	ands	r3, r2
 80022c4:	d00b      	beq.n	80022de <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2208      	movs	r2, #8
 80022ca:	4013      	ands	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2208      	movs	r2, #8
 80022d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f8dc 	bl	8002496 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022de:	6a3a      	ldr	r2, [r7, #32]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4013      	ands	r3, r2
 80022e6:	d100      	bne.n	80022ea <HAL_CAN_IRQHandler+0x25c>
 80022e8:	e074      	b.n	80023d4 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d100      	bne.n	80022f4 <HAL_CAN_IRQHandler+0x266>
 80022f2:	e06b      	b.n	80023cc <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4013      	ands	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002304:	d003      	beq.n	800230e <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	2201      	movs	r2, #1
 800230a:	4313      	orrs	r3, r2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d007      	beq.n	8002328 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800231e:	d003      	beq.n	8002328 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	2202      	movs	r2, #2
 8002324:	4313      	orrs	r3, r2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4013      	ands	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2204      	movs	r2, #4
 8002336:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002338:	d003      	beq.n	8002342 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	2204      	movs	r2, #4
 800233e:	4313      	orrs	r3, r2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002342:	6a3a      	ldr	r2, [r7, #32]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4013      	ands	r3, r2
 800234a:	d03f      	beq.n	80023cc <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2270      	movs	r2, #112	; 0x70
 8002350:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002352:	d03b      	beq.n	80023cc <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2270      	movs	r2, #112	; 0x70
 8002358:	4013      	ands	r3, r2
 800235a:	2b60      	cmp	r3, #96	; 0x60
 800235c:	d027      	beq.n	80023ae <HAL_CAN_IRQHandler+0x320>
 800235e:	d82c      	bhi.n	80023ba <HAL_CAN_IRQHandler+0x32c>
 8002360:	2b50      	cmp	r3, #80	; 0x50
 8002362:	d01f      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x316>
 8002364:	d829      	bhi.n	80023ba <HAL_CAN_IRQHandler+0x32c>
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d017      	beq.n	800239a <HAL_CAN_IRQHandler+0x30c>
 800236a:	d826      	bhi.n	80023ba <HAL_CAN_IRQHandler+0x32c>
 800236c:	2b30      	cmp	r3, #48	; 0x30
 800236e:	d00f      	beq.n	8002390 <HAL_CAN_IRQHandler+0x302>
 8002370:	d823      	bhi.n	80023ba <HAL_CAN_IRQHandler+0x32c>
 8002372:	2b10      	cmp	r3, #16
 8002374:	d002      	beq.n	800237c <HAL_CAN_IRQHandler+0x2ee>
 8002376:	2b20      	cmp	r3, #32
 8002378:	d005      	beq.n	8002386 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800237a:	e01e      	b.n	80023ba <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2208      	movs	r2, #8
 8002380:	4313      	orrs	r3, r2
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002384:	e01a      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2210      	movs	r2, #16
 800238a:	4313      	orrs	r3, r2
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238e:	e015      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2220      	movs	r2, #32
 8002394:	4313      	orrs	r3, r2
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002398:	e010      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4313      	orrs	r3, r2
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a2:	e00b      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	4313      	orrs	r3, r2
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023ac:	e006      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0052      	lsls	r2, r2, #1
 80023b4:	4313      	orrs	r3, r2
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b8:	e000      	b.n	80023bc <HAL_CAN_IRQHandler+0x32e>
            break;
 80023ba:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2170      	movs	r1, #112	; 0x70
 80023c8:	438a      	bics	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2204      	movs	r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7fe f997 	bl	800071c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b00a      	add	sp, #40	; 0x28
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b002      	add	sp, #8
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b002      	add	sp, #8
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	0002      	movs	r2, r0
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b7f      	cmp	r3, #127	; 0x7f
 80024ba:	d809      	bhi.n	80024d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	001a      	movs	r2, r3
 80024c2:	231f      	movs	r3, #31
 80024c4:	401a      	ands	r2, r3
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_EnableIRQ+0x30>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	4091      	lsls	r1, r2
 80024cc:	000a      	movs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
  }
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b7f      	cmp	r3, #127	; 0x7f
 80024ee:	d810      	bhi.n	8002512 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	231f      	movs	r3, #31
 80024f8:	4013      	ands	r3, r2
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_DisableIRQ+0x40>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002506:	f3bf 8f4f 	dsb	sy
}
 800250a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800250c:	f3bf 8f6f 	isb	sy
}
 8002510:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	0002      	movs	r2, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b7f      	cmp	r3, #127	; 0x7f
 8002534:	d828      	bhi.n	8002588 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002536:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <__NVIC_SetPriority+0xd4>)
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b25b      	sxtb	r3, r3
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	33c0      	adds	r3, #192	; 0xc0
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	589b      	ldr	r3, [r3, r2]
 8002546:	1dfa      	adds	r2, r7, #7
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	0011      	movs	r1, r2
 800254c:	2203      	movs	r2, #3
 800254e:	400a      	ands	r2, r1
 8002550:	00d2      	lsls	r2, r2, #3
 8002552:	21ff      	movs	r1, #255	; 0xff
 8002554:	4091      	lsls	r1, r2
 8002556:	000a      	movs	r2, r1
 8002558:	43d2      	mvns	r2, r2
 800255a:	401a      	ands	r2, r3
 800255c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	22ff      	movs	r2, #255	; 0xff
 8002564:	401a      	ands	r2, r3
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	0018      	movs	r0, r3
 800256c:	2303      	movs	r3, #3
 800256e:	4003      	ands	r3, r0
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002574:	481f      	ldr	r0, [pc, #124]	; (80025f4 <__NVIC_SetPriority+0xd4>)
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	430a      	orrs	r2, r1
 8002580:	33c0      	adds	r3, #192	; 0xc0
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002586:	e031      	b.n	80025ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <__NVIC_SetPriority+0xd8>)
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	0019      	movs	r1, r3
 8002590:	230f      	movs	r3, #15
 8002592:	400b      	ands	r3, r1
 8002594:	3b08      	subs	r3, #8
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3306      	adds	r3, #6
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	3304      	adds	r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1dfa      	adds	r2, r7, #7
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	0011      	movs	r1, r2
 80025a8:	2203      	movs	r2, #3
 80025aa:	400a      	ands	r2, r1
 80025ac:	00d2      	lsls	r2, r2, #3
 80025ae:	21ff      	movs	r1, #255	; 0xff
 80025b0:	4091      	lsls	r1, r2
 80025b2:	000a      	movs	r2, r1
 80025b4:	43d2      	mvns	r2, r2
 80025b6:	401a      	ands	r2, r3
 80025b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	401a      	ands	r2, r3
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	0018      	movs	r0, r3
 80025c8:	2303      	movs	r3, #3
 80025ca:	4003      	ands	r3, r0
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d0:	4809      	ldr	r0, [pc, #36]	; (80025f8 <__NVIC_SetPriority+0xd8>)
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	001c      	movs	r4, r3
 80025d8:	230f      	movs	r3, #15
 80025da:	4023      	ands	r3, r4
 80025dc:	3b08      	subs	r3, #8
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	430a      	orrs	r2, r1
 80025e2:	3306      	adds	r3, #6
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	18c3      	adds	r3, r0, r3
 80025e8:	3304      	adds	r3, #4
 80025ea:	601a      	str	r2, [r3, #0]
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b003      	add	sp, #12
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	045b      	lsls	r3, r3, #17
 800260c:	429a      	cmp	r2, r3
 800260e:	d301      	bcc.n	8002614 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002610:	2301      	movs	r3, #1
 8002612:	e010      	b.n	8002636 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <SysTick_Config+0x44>)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	3a01      	subs	r2, #1
 800261a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261c:	2301      	movs	r3, #1
 800261e:	425b      	negs	r3, r3
 8002620:	2103      	movs	r1, #3
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ff7c 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x44>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x44>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	210f      	movs	r1, #15
 8002650:	187b      	adds	r3, r7, r1
 8002652:	1c02      	adds	r2, r0, #0
 8002654:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	187b      	adds	r3, r7, r1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	0002      	movs	r2, r0
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b25b      	sxtb	r3, r3
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff ff11 	bl	80024a8 <__NVIC_EnableIRQ>
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	0002      	movs	r2, r0
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff ff1b 	bl	80024dc <__NVIC_DisableIRQ>
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff ff9f 	bl	80025fc <SysTick_Config>
 80026be:	0003      	movs	r3, r0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d6:	e155      	b.n	8002984 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4091      	lsls	r1, r2
 80026e2:	000a      	movs	r2, r1
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d100      	bne.n	80026f0 <HAL_GPIO_Init+0x28>
 80026ee:	e146      	b.n	800297e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d005      	beq.n	8002708 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002704:	2b02      	cmp	r3, #2
 8002706:	d130      	bne.n	800276a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	409a      	lsls	r2, r3
 8002716:	0013      	movs	r3, r2
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	0013      	movs	r3, r2
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273e:	2201      	movs	r2, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	43da      	mvns	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	2201      	movs	r2, #1
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	4013      	ands	r3, r2
 8002772:	2b03      	cmp	r3, #3
 8002774:	d017      	beq.n	80027a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	409a      	lsls	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	43da      	mvns	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	409a      	lsls	r2, r3
 8002798:	0013      	movs	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d123      	bne.n	80027fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	58d3      	ldr	r3, [r2, r3]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	43da      	mvns	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2107      	movs	r1, #7
 80027de:	400b      	ands	r3, r1
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	6939      	ldr	r1, [r7, #16]
 80027f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	409a      	lsls	r2, r3
 8002808:	0013      	movs	r3, r2
 800280a:	43da      	mvns	r2, r3
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2203      	movs	r2, #3
 8002818:	401a      	ands	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	029b      	lsls	r3, r3, #10
 8002836:	4013      	ands	r3, r2
 8002838:	d100      	bne.n	800283c <HAL_GPIO_Init+0x174>
 800283a:	e0a0      	b.n	800297e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283c:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_GPIO_Init+0x2d4>)
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_GPIO_Init+0x2d4>)
 8002842:	2101      	movs	r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	619a      	str	r2, [r3, #24]
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_GPIO_Init+0x2d4>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2d8>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	589b      	ldr	r3, [r3, r2]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2203      	movs	r2, #3
 8002866:	4013      	ands	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	409a      	lsls	r2, r3
 800286e:	0013      	movs	r3, r2
 8002870:	43da      	mvns	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	2390      	movs	r3, #144	; 0x90
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	429a      	cmp	r2, r3
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x1ee>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a47      	ldr	r2, [pc, #284]	; (80029a4 <HAL_GPIO_Init+0x2dc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1ea>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_GPIO_Init+0x2e0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1e6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_GPIO_Init+0x2e4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1e2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a44      	ldr	r2, [pc, #272]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1de>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x1f0>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x1f0>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x1f0>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x1f0>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x1f0>
 80028b6:	2300      	movs	r3, #0
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	2103      	movs	r1, #3
 80028bc:	400a      	ands	r2, r1
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2d8>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43da      	mvns	r2, r3
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	4013      	ands	r3, r2
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43da      	mvns	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	4013      	ands	r3, r2
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43da      	mvns	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	035b      	lsls	r3, r3, #13
 8002942:	4013      	ands	r3, r2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43da      	mvns	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	039b      	lsls	r3, r3, #14
 800296c:	4013      	ands	r3, r2
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	40da      	lsrs	r2, r3
 800298c:	1e13      	subs	r3, r2, #0
 800298e:	d000      	beq.n	8002992 <HAL_GPIO_Init+0x2ca>
 8002990:	e6a2      	b.n	80026d8 <HAL_GPIO_Init+0x10>
  } 
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010000 	.word	0x40010000
 80029a4:	48000400 	.word	0x48000400
 80029a8:	48000800 	.word	0x48000800
 80029ac:	48000c00 	.word	0x48000c00
 80029b0:	48001000 	.word	0x48001000
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80029c6:	e0b7      	b.n	8002b38 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029c8:	2201      	movs	r2, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	409a      	lsls	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d100      	bne.n	80029dc <HAL_GPIO_DeInit+0x24>
 80029da:	e0aa      	b.n	8002b32 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029dc:	4a5c      	ldr	r2, [pc, #368]	; (8002b50 <HAL_GPIO_DeInit+0x198>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	2390      	movs	r3, #144	; 0x90
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_DeInit+0x82>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_GPIO_DeInit+0x19c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_DeInit+0x7e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <HAL_GPIO_DeInit+0x1a0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_DeInit+0x7a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_GPIO_DeInit+0x1a4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_DeInit+0x76>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_DeInit+0x1a8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_DeInit+0x72>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_DeInit+0x84>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_DeInit+0x84>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_DeInit+0x84>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_DeInit+0x84>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_DeInit+0x84>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	400a      	ands	r2, r1
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d132      	bne.n	8002ab2 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a4c:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a5a:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43d9      	mvns	r1, r3
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43d9      	mvns	r1, r3
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_GPIO_DeInit+0x1ac>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2203      	movs	r2, #3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a94:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <HAL_GPIO_DeInit+0x198>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	589a      	ldr	r2, [r3, r2]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	482a      	ldr	r0, [pc, #168]	; (8002b50 <HAL_GPIO_DeInit+0x198>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	400a      	ands	r2, r1
 8002aac:	3302      	adds	r3, #2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	0052      	lsls	r2, r2, #1
 8002aba:	2103      	movs	r1, #3
 8002abc:	4091      	lsls	r1, r2
 8002abe:	000a      	movs	r2, r1
 8002ac0:	43d2      	mvns	r2, r2
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	58d3      	ldr	r3, [r2, r3]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	2107      	movs	r1, #7
 8002ad8:	400a      	ands	r2, r1
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	210f      	movs	r1, #15
 8002ade:	4091      	lsls	r1, r2
 8002ae0:	000a      	movs	r2, r1
 8002ae2:	43d1      	mvns	r1, r2
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	08d2      	lsrs	r2, r2, #3
 8002ae8:	4019      	ands	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	0052      	lsls	r2, r2, #1
 8002afa:	2103      	movs	r1, #3
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4091      	lsls	r1, r2
 8002b12:	000a      	movs	r2, r1
 8002b14:	43d2      	mvns	r2, r2
 8002b16:	401a      	ands	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	0052      	lsls	r2, r2, #1
 8002b24:	2103      	movs	r1, #3
 8002b26:	4091      	lsls	r1, r2
 8002b28:	000a      	movs	r2, r1
 8002b2a:	43d2      	mvns	r2, r2
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	40da      	lsrs	r2, r3
 8002b3e:	1e13      	subs	r3, r2, #0
 8002b40:	d000      	beq.n	8002b44 <HAL_GPIO_DeInit+0x18c>
 8002b42:	e741      	b.n	80029c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b006      	add	sp, #24
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40010000 	.word	0x40010000
 8002b54:	48000400 	.word	0x48000400
 8002b58:	48000800 	.word	0x48000800
 8002b5c:	48000c00 	.word	0x48000c00
 8002b60:	48001000 	.word	0x48001000
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	0008      	movs	r0, r1
 8002b72:	0011      	movs	r1, r2
 8002b74:	1cbb      	adds	r3, r7, #2
 8002b76:	1c02      	adds	r2, r0, #0
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	1c7b      	adds	r3, r7, #1
 8002b7c:	1c0a      	adds	r2, r1, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	1c7b      	adds	r3, r7, #1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b88:	1cbb      	adds	r3, r7, #2
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b92:	1cbb      	adds	r3, r7, #2
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e03d      	b.n	8002c32 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <HAL_IWDG_Init+0x98>)
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <HAL_IWDG_Init+0x9c>)
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6852      	ldr	r2, [r2, #4]
 8002bce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002bda:	f7fe fd83 	bl	80016e4 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002be2:	e00e      	b.n	8002c02 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002be4:	f7fe fd7e 	bl	80016e4 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b27      	cmp	r3, #39	; 0x27
 8002bf0:	d907      	bls.n	8002c02 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d001      	beq.n	8002c02 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e017      	b.n	8002c32 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2207      	movs	r2, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d1ea      	bne.n	8002be4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d005      	beq.n	8002c28 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68d2      	ldr	r2, [r2, #12]
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	e003      	b.n	8002c30 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_IWDG_Init+0xa0>)
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	0000cccc 	.word	0x0000cccc
 8002c40:	00005555 	.word	0x00005555
 8002c44:	0000aaaa 	.word	0x0000aaaa

08002c48 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <HAL_IWDG_Refresh+0x1c>)
 8002c56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	0000aaaa 	.word	0x0000aaaa

08002c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af06      	add	r7, sp, #24
 8002c6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0ff      	b.n	8002e7a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a81      	ldr	r2, [pc, #516]	; (8002e84 <HAL_PCD_Init+0x21c>)
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d108      	bne.n	8002c98 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	23aa      	movs	r3, #170	; 0xaa
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f006 fb8a 	bl	80093ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_PCD_Init+0x21c>)
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f002 fc47 	bl	8005538 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002caa:	230f      	movs	r3, #15
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e058      	b.n	8002d66 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cb4:	200f      	movs	r0, #15
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	0013      	movs	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	18cb      	adds	r3, r1, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cce:	183b      	adds	r3, r7, r0
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	183a      	adds	r2, r7, r0
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ce4:	0004      	movs	r4, r0
 8002ce6:	183b      	adds	r3, r7, r0
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b298      	uxth	r0, r3
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	18cb      	adds	r3, r1, r3
 8002cfc:	3336      	adds	r3, #54	; 0x36
 8002cfe:	1c02      	adds	r2, r0, #0
 8002d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	18cb      	adds	r3, r1, r3
 8002d14:	3303      	adds	r3, #3
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	0013      	movs	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	18cb      	adds	r3, r1, r3
 8002d2a:	3338      	adds	r3, #56	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	0013      	movs	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	18cb      	adds	r3, r1, r3
 8002d40:	333c      	adds	r3, #60	; 0x3c
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	18cb      	adds	r3, r1, r3
 8002d56:	3340      	adds	r3, #64	; 0x40
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	3201      	adds	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	210f      	movs	r1, #15
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d39f      	bcc.n	8002cb4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e056      	b.n	8002e2a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7c:	240f      	movs	r4, #15
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	236a      	movs	r3, #106	; 0x6a
 8002d86:	33ff      	adds	r3, #255	; 0xff
 8002d88:	0019      	movs	r1, r3
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	18c3      	adds	r3, r0, r3
 8002d94:	185b      	adds	r3, r3, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	23b4      	movs	r3, #180	; 0xb4
 8002da2:	0059      	lsls	r1, r3, #1
 8002da4:	0013      	movs	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	189b      	adds	r3, r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	18c3      	adds	r3, r0, r3
 8002dae:	185b      	adds	r3, r3, r1
 8002db0:	193a      	adds	r2, r7, r4
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	236c      	movs	r3, #108	; 0x6c
 8002dbe:	33ff      	adds	r3, #255	; 0xff
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	18c3      	adds	r3, r0, r3
 8002dcc:	185b      	adds	r3, r3, r1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	781a      	ldrb	r2, [r3, #0]
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	23bc      	movs	r3, #188	; 0xbc
 8002dda:	0059      	lsls	r1, r3, #1
 8002ddc:	0013      	movs	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	18c3      	adds	r3, r0, r3
 8002de6:	185b      	adds	r3, r3, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	23be      	movs	r3, #190	; 0xbe
 8002df4:	0059      	lsls	r1, r3, #1
 8002df6:	0013      	movs	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	18c3      	adds	r3, r0, r3
 8002e00:	185b      	adds	r3, r3, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	23c0      	movs	r3, #192	; 0xc0
 8002e0e:	0059      	lsls	r1, r3, #1
 8002e10:	0013      	movs	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	18c3      	adds	r3, r0, r3
 8002e1a:	185b      	adds	r3, r3, r1
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	3201      	adds	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d3a1      	bcc.n	8002d7c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	466a      	mov	r2, sp
 8002e40:	0011      	movs	r1, r2
 8002e42:	001a      	movs	r2, r3
 8002e44:	3210      	adds	r2, #16
 8002e46:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002e48:	c170      	stmia	r1!, {r4, r5, r6}
 8002e4a:	ca30      	ldmia	r2!, {r4, r5}
 8002e4c:	c130      	stmia	r1!, {r4, r5}
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f002 fb8a 	bl	800556c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <HAL_PCD_Init+0x21c>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d103      	bne.n	8002e78 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f001 fd34 	bl	80048e0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b005      	add	sp, #20
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	000002a9 	.word	0x000002a9

08002e88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	23aa      	movs	r3, #170	; 0xaa
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_Start+0x18>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e014      	b.n	8002eca <HAL_PCD_Start+0x42>
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	23aa      	movs	r3, #170	; 0xaa
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f002 fb2c 	bl	800550c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f004 fa87 	bl	80073cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	23aa      	movs	r3, #170	; 0xaa
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f004 fa89 	bl	80073f8 <USB_ReadInterrupts>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	401a      	ands	r2, r3
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d103      	bne.n	8002efe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 fbbb 	bl	8003674 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f004 fa78 	bl	80073f8 <USB_ReadInterrupts>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d114      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2244      	movs	r2, #68	; 0x44
 8002f1e:	5a9b      	ldrh	r3, [r3, r2]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	49a2      	ldr	r1, [pc, #648]	; (80031b0 <HAL_PCD_IRQHandler+0x2dc>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	b291      	uxth	r1, r2
 8002f2c:	2244      	movs	r2, #68	; 0x44
 8002f2e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f006 fac5 	bl	80094c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f945 	bl	80031cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f004 fa56 	bl	80073f8 <USB_ReadInterrupts>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	01db      	lsls	r3, r3, #7
 8002f52:	401a      	ands	r2, r3
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d10b      	bne.n	8002f74 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2244      	movs	r2, #68	; 0x44
 8002f62:	5a9b      	ldrh	r3, [r3, r2]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4992      	ldr	r1, [pc, #584]	; (80031b4 <HAL_PCD_IRQHandler+0x2e0>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	b291      	uxth	r1, r2
 8002f70:	2244      	movs	r2, #68	; 0x44
 8002f72:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f004 fa3d 	bl	80073f8 <USB_ReadInterrupts>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	019b      	lsls	r3, r3, #6
 8002f84:	401a      	ands	r2, r3
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2244      	movs	r2, #68	; 0x44
 8002f94:	5a9b      	ldrh	r3, [r3, r2]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4986      	ldr	r1, [pc, #536]	; (80031b8 <HAL_PCD_IRQHandler+0x2e4>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	b291      	uxth	r1, r2
 8002fa2:	2244      	movs	r2, #68	; 0x44
 8002fa4:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f004 fa24 	bl	80073f8 <USB_ReadInterrupts>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	015b      	lsls	r3, r3, #5
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d137      	bne.n	8003030 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2240      	movs	r2, #64	; 0x40
 8002fc6:	5a9b      	ldrh	r3, [r3, r2]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2104      	movs	r1, #4
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	b291      	uxth	r1, r2
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	438a      	bics	r2, r1
 8002fea:	b291      	uxth	r1, r2
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	23b8      	movs	r3, #184	; 0xb8
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d109      	bne.n	8003010 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	23b8      	movs	r3, #184	; 0xb8
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	2100      	movs	r1, #0
 8003004:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2100      	movs	r1, #0
 800300a:	0018      	movs	r0, r3
 800300c:	f001 fc92 	bl	8004934 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f006 fa96 	bl	8009544 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2244      	movs	r2, #68	; 0x44
 800301e:	5a9b      	ldrh	r3, [r3, r2]
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4965      	ldr	r1, [pc, #404]	; (80031bc <HAL_PCD_IRQHandler+0x2e8>)
 8003028:	400a      	ands	r2, r1
 800302a:	b291      	uxth	r1, r2
 800302c:	2244      	movs	r2, #68	; 0x44
 800302e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0018      	movs	r0, r3
 8003036:	f004 f9df 	bl	80073f8 <USB_ReadInterrupts>
 800303a:	0002      	movs	r2, r0
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	401a      	ands	r2, r3
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	429a      	cmp	r2, r3
 8003048:	d127      	bne.n	800309a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	5a9b      	ldrh	r3, [r3, r2]
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2108      	movs	r1, #8
 800305a:	430a      	orrs	r2, r1
 800305c:	b291      	uxth	r1, r2
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2244      	movs	r2, #68	; 0x44
 8003068:	5a9b      	ldrh	r3, [r3, r2]
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4953      	ldr	r1, [pc, #332]	; (80031c0 <HAL_PCD_IRQHandler+0x2ec>)
 8003072:	400a      	ands	r2, r1
 8003074:	b291      	uxth	r1, r2
 8003076:	2244      	movs	r2, #68	; 0x44
 8003078:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	5a9b      	ldrh	r3, [r3, r2]
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2104      	movs	r1, #4
 800308a:	430a      	orrs	r2, r1
 800308c:	b291      	uxth	r1, r2
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f006 fa39 	bl	800950c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	f004 f9aa 	bl	80073f8 <USB_ReadInterrupts>
 80030a4:	0003      	movs	r3, r0
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d145      	bne.n	800313a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2244      	movs	r2, #68	; 0x44
 80030b4:	5a9b      	ldrh	r3, [r3, r2]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	438a      	bics	r2, r1
 80030c0:	b291      	uxth	r1, r2
 80030c2:	2244      	movs	r2, #68	; 0x44
 80030c4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	23b8      	movs	r3, #184	; 0xb8
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d12f      	bne.n	8003132 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2240      	movs	r2, #64	; 0x40
 80030d8:	5a9b      	ldrh	r3, [r3, r2]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2104      	movs	r1, #4
 80030e2:	430a      	orrs	r2, r1
 80030e4:	b291      	uxth	r1, r2
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2108      	movs	r1, #8
 80030fa:	430a      	orrs	r2, r1
 80030fc:	b291      	uxth	r1, r2
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	23b8      	movs	r3, #184	; 0xb8
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	2101      	movs	r1, #1
 800310a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2254      	movs	r2, #84	; 0x54
 8003112:	5a9b      	ldrh	r3, [r3, r2]
 8003114:	b29b      	uxth	r3, r3
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	223c      	movs	r2, #60	; 0x3c
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	23b9      	movs	r3, #185	; 0xb9
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2101      	movs	r1, #1
 800312a:	0018      	movs	r0, r3
 800312c:	f001 fc02 	bl	8004934 <HAL_PCDEx_LPM_Callback>
 8003130:	e003      	b.n	800313a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f006 f9e9 	bl	800950c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0018      	movs	r0, r3
 8003140:	f004 f95a 	bl	80073f8 <USB_ReadInterrupts>
 8003144:	0002      	movs	r2, r0
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	401a      	ands	r2, r3
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d10f      	bne.n	8003174 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2244      	movs	r2, #68	; 0x44
 800315a:	5a9b      	ldrh	r3, [r3, r2]
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4918      	ldr	r1, [pc, #96]	; (80031c4 <HAL_PCD_IRQHandler+0x2f0>)
 8003164:	400a      	ands	r2, r1
 8003166:	b291      	uxth	r1, r2
 8003168:	2244      	movs	r2, #68	; 0x44
 800316a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f006 f998 	bl	80094a4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0018      	movs	r0, r3
 800317a:	f004 f93d 	bl	80073f8 <USB_ReadInterrupts>
 800317e:	0002      	movs	r2, r0
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	401a      	ands	r2, r3
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	429a      	cmp	r2, r3
 800318c:	d10b      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2244      	movs	r2, #68	; 0x44
 8003194:	5a9b      	ldrh	r3, [r3, r2]
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	490a      	ldr	r1, [pc, #40]	; (80031c8 <HAL_PCD_IRQHandler+0x2f4>)
 800319e:	400a      	ands	r2, r1
 80031a0:	b291      	uxth	r1, r2
 80031a2:	2244      	movs	r2, #68	; 0x44
 80031a4:	5299      	strh	r1, [r3, r2]
  }
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	fffffbff 	.word	0xfffffbff
 80031b4:	ffffbfff 	.word	0xffffbfff
 80031b8:	ffffdfff 	.word	0xffffdfff
 80031bc:	ffffefff 	.word	0xffffefff
 80031c0:	fffff7ff 	.word	0xfffff7ff
 80031c4:	fffffdff 	.word	0xfffffdff
 80031c8:	fffffeff 	.word	0xfffffeff

080031cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	000a      	movs	r2, r1
 80031d6:	1cfb      	adds	r3, r7, #3
 80031d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	23aa      	movs	r3, #170	; 0xaa
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_SetAddress+0x1e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e017      	b.n	800321a <HAL_PCD_SetAddress+0x4e>
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	23aa      	movs	r3, #170	; 0xaa
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	2101      	movs	r1, #1
 80031f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1cfa      	adds	r2, r7, #3
 80031f8:	2124      	movs	r1, #36	; 0x24
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	1cfb      	adds	r3, r7, #3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	0019      	movs	r1, r3
 8003208:	0010      	movs	r0, r2
 800320a:	f004 f8cb 	bl	80073a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	23aa      	movs	r3, #170	; 0xaa
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	2100      	movs	r1, #0
 8003216:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003222:	b590      	push	{r4, r7, lr}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	000c      	movs	r4, r1
 800322c:	0010      	movs	r0, r2
 800322e:	0019      	movs	r1, r3
 8003230:	1cfb      	adds	r3, r7, #3
 8003232:	1c22      	adds	r2, r4, #0
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	003b      	movs	r3, r7
 8003238:	1c02      	adds	r2, r0, #0
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	1cbb      	adds	r3, r7, #2
 800323e:	1c0a      	adds	r2, r1, #0
 8003240:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003242:	230b      	movs	r3, #11
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324a:	1cfb      	adds	r3, r7, #3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b25b      	sxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	da0f      	bge.n	8003274 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003254:	1cfb      	adds	r3, r7, #3
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2207      	movs	r2, #7
 800325a:	4013      	ands	r3, r2
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	0013      	movs	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	189b      	adds	r3, r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	705a      	strb	r2, [r3, #1]
 8003272:	e00f      	b.n	8003294 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003274:	1cfb      	adds	r3, r7, #3
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2207      	movs	r2, #7
 800327a:	401a      	ands	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	189b      	adds	r3, r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3369      	adds	r3, #105	; 0x69
 8003286:	33ff      	adds	r3, #255	; 0xff
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	18d3      	adds	r3, r2, r3
 800328c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003294:	1cfb      	adds	r3, r7, #3
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2207      	movs	r2, #7
 800329a:	4013      	ands	r3, r2
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032a2:	003b      	movs	r3, r7
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1cba      	adds	r2, r7, #2
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032c4:	1cbb      	adds	r3, r7, #2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d102      	bne.n	80032d2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	23aa      	movs	r3, #170	; 0xaa
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	5cd3      	ldrb	r3, [r2, r3]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_Open+0xc0>
 80032de:	2302      	movs	r3, #2
 80032e0:	e013      	b.n	800330a <HAL_PCD_EP_Open+0xe8>
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	23aa      	movs	r3, #170	; 0xaa
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	2101      	movs	r1, #1
 80032ea:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f002 f965 	bl	80055c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	23aa      	movs	r3, #170	; 0xaa
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	2100      	movs	r1, #0
 8003302:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003304:	230b      	movs	r3, #11
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781b      	ldrb	r3, [r3, #0]
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b005      	add	sp, #20
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	000a      	movs	r2, r1
 800331c:	1cfb      	adds	r3, r7, #3
 800331e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003320:	1cfb      	adds	r3, r7, #3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b25b      	sxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	da0f      	bge.n	800334a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332a:	1cfb      	adds	r3, r7, #3
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2207      	movs	r2, #7
 8003330:	4013      	ands	r3, r2
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	0013      	movs	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	189b      	adds	r3, r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	18d3      	adds	r3, r2, r3
 8003340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	705a      	strb	r2, [r3, #1]
 8003348:	e00f      	b.n	800336a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334a:	1cfb      	adds	r3, r7, #3
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2207      	movs	r2, #7
 8003350:	401a      	ands	r2, r3
 8003352:	0013      	movs	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	189b      	adds	r3, r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	3369      	adds	r3, #105	; 0x69
 800335c:	33ff      	adds	r3, #255	; 0xff
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800336a:	1cfb      	adds	r3, r7, #3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2207      	movs	r2, #7
 8003370:	4013      	ands	r3, r2
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	23aa      	movs	r3, #170	; 0xaa
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_EP_Close+0x76>
 8003384:	2302      	movs	r3, #2
 8003386:	e011      	b.n	80033ac <HAL_PCD_EP_Close+0x9a>
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	23aa      	movs	r3, #170	; 0xaa
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	2101      	movs	r1, #1
 8003390:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	0011      	movs	r1, r2
 800339a:	0018      	movs	r0, r3
 800339c:	f002 fc86 	bl	8005cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	23aa      	movs	r3, #170	; 0xaa
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	2100      	movs	r1, #0
 80033a8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	200b      	movs	r0, #11
 80033c2:	183b      	adds	r3, r7, r0
 80033c4:	1c0a      	adds	r2, r1, #0
 80033c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c8:	0001      	movs	r1, r0
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2207      	movs	r2, #7
 80033d0:	401a      	ands	r2, r3
 80033d2:	0013      	movs	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	3369      	adds	r3, #105	; 0x69
 80033dc:	33ff      	adds	r3, #255	; 0xff
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2200      	movs	r2, #0
 80033fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2207      	movs	r2, #7
 8003402:	4013      	ands	r3, r2
 8003404:	b2da      	uxtb	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800340a:	187b      	adds	r3, r7, r1
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2207      	movs	r2, #7
 8003410:	4013      	ands	r3, r2
 8003412:	d107      	bne.n	8003424 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f002 fe05 	bl	800602c <USB_EPStartXfer>
 8003422:	e006      	b.n	8003432 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	0011      	movs	r1, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f002 fdfd 	bl	800602c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	000a      	movs	r2, r1
 8003446:	1cfb      	adds	r3, r7, #3
 8003448:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800344a:	1cfb      	adds	r3, r7, #3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2207      	movs	r2, #7
 8003450:	401a      	ands	r2, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	23c2      	movs	r3, #194	; 0xc2
 8003456:	0059      	lsls	r1, r3, #1
 8003458:	0013      	movs	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	189b      	adds	r3, r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	18c3      	adds	r3, r0, r3
 8003462:	185b      	adds	r3, r3, r1
 8003464:	681b      	ldr	r3, [r3, #0]
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	200b      	movs	r0, #11
 800347c:	183b      	adds	r3, r7, r0
 800347e:	1c0a      	adds	r2, r1, #0
 8003480:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003482:	183b      	adds	r3, r7, r0
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2207      	movs	r2, #7
 8003488:	4013      	ands	r3, r2
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	0013      	movs	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	189b      	adds	r3, r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2201      	movs	r2, #1
 80034be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ce:	183b      	adds	r3, r7, r0
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2207      	movs	r2, #7
 80034d4:	4013      	ands	r3, r2
 80034d6:	d107      	bne.n	80034e8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f002 fda3 	bl	800602c <USB_EPStartXfer>
 80034e6:	e006      	b.n	80034f6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f002 fd9b 	bl	800602c <USB_EPStartXfer>
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	000a      	movs	r2, r1
 800350a:	1cfb      	adds	r3, r7, #3
 800350c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800350e:	1cfb      	adds	r3, r7, #3
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2207      	movs	r2, #7
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d901      	bls.n	8003522 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e046      	b.n	80035b0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003522:	1cfb      	adds	r3, r7, #3
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b25b      	sxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	da0f      	bge.n	800354c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352c:	1cfb      	adds	r3, r7, #3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2207      	movs	r2, #7
 8003532:	4013      	ands	r3, r2
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	0013      	movs	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	189b      	adds	r3, r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	18d3      	adds	r3, r2, r3
 8003542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	705a      	strb	r2, [r3, #1]
 800354a:	e00d      	b.n	8003568 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800354c:	1cfb      	adds	r3, r7, #3
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	0013      	movs	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	189b      	adds	r3, r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	3369      	adds	r3, #105	; 0x69
 800355a:	33ff      	adds	r3, #255	; 0xff
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	18d3      	adds	r3, r2, r3
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356e:	1cfb      	adds	r3, r7, #3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	23aa      	movs	r3, #170	; 0xaa
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_SetStall+0x8c>
 8003588:	2302      	movs	r3, #2
 800358a:	e011      	b.n	80035b0 <HAL_PCD_EP_SetStall+0xb0>
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	23aa      	movs	r3, #170	; 0xaa
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	2101      	movs	r1, #1
 8003594:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	0011      	movs	r1, r2
 800359e:	0018      	movs	r0, r3
 80035a0:	f003 fdfe 	bl	80071a0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	23aa      	movs	r3, #170	; 0xaa
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	2100      	movs	r1, #0
 80035ac:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b004      	add	sp, #16
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	000a      	movs	r2, r1
 80035c2:	1cfb      	adds	r3, r7, #3
 80035c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035c6:	1cfb      	adds	r3, r7, #3
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	220f      	movs	r2, #15
 80035cc:	401a      	ands	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d901      	bls.n	80035da <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e048      	b.n	800366c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035da:	1cfb      	adds	r3, r7, #3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da0f      	bge.n	8003604 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e4:	1cfb      	adds	r3, r7, #3
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2207      	movs	r2, #7
 80035ea:	4013      	ands	r3, r2
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	0013      	movs	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	705a      	strb	r2, [r3, #1]
 8003602:	e00f      	b.n	8003624 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003604:	1cfb      	adds	r3, r7, #3
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2207      	movs	r2, #7
 800360a:	401a      	ands	r2, r3
 800360c:	0013      	movs	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	189b      	adds	r3, r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3369      	adds	r3, #105	; 0x69
 8003616:	33ff      	adds	r3, #255	; 0xff
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800362a:	1cfb      	adds	r3, r7, #3
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2207      	movs	r2, #7
 8003630:	4013      	ands	r3, r2
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	23aa      	movs	r3, #170	; 0xaa
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_PCD_EP_ClrStall+0x90>
 8003644:	2302      	movs	r3, #2
 8003646:	e011      	b.n	800366c <HAL_PCD_EP_ClrStall+0xb4>
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	23aa      	movs	r3, #170	; 0xaa
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	2101      	movs	r1, #1
 8003650:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	0011      	movs	r1, r2
 800365a:	0018      	movs	r0, r3
 800365c:	f003 fdf0 	bl	8007240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	23aa      	movs	r3, #170	; 0xaa
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	2100      	movs	r1, #0
 8003668:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}

08003674 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b096      	sub	sp, #88	; 0x58
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800367c:	f000 fbd8 	bl	8003e30 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2056      	movs	r0, #86	; 0x56
 8003686:	183b      	adds	r3, r7, r0
 8003688:	2144      	movs	r1, #68	; 0x44
 800368a:	5a52      	ldrh	r2, [r2, r1]
 800368c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800368e:	183b      	adds	r3, r7, r0
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	2455      	movs	r4, #85	; 0x55
 8003696:	193b      	adds	r3, r7, r4
 8003698:	210f      	movs	r1, #15
 800369a:	400a      	ands	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d000      	beq.n	80036a8 <PCD_EP_ISR_Handler+0x34>
 80036a6:	e179      	b.n	800399c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036a8:	183b      	adds	r3, r7, r0
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	4013      	ands	r3, r2
 80036b0:	d154      	bne.n	800375c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	200e      	movs	r0, #14
 80036bc:	183b      	adds	r3, r7, r0
 80036be:	49af      	ldr	r1, [pc, #700]	; (800397c <PCD_EP_ISR_Handler+0x308>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	183a      	adds	r2, r7, r0
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	49ac      	ldr	r1, [pc, #688]	; (8003980 <PCD_EP_ISR_Handler+0x30c>)
 80036ce:	430a      	orrs	r2, r1
 80036d0:	b292      	uxth	r2, r2
 80036d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2250      	movs	r2, #80	; 0x50
 80036e0:	5a9b      	ldrh	r3, [r3, r2]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	001a      	movs	r2, r3
 80036e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	18d2      	adds	r2, r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	18d3      	adds	r3, r2, r3
 80036f4:	4aa3      	ldr	r2, [pc, #652]	; (8003984 <PCD_EP_ISR_Handler+0x310>)
 80036f6:	4694      	mov	ip, r2
 80036f8:	4463      	add	r3, ip
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	0d9a      	lsrs	r2, r3, #22
 8003700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003702:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	18d2      	adds	r2, r2, r3
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2100      	movs	r1, #0
 8003716:	0018      	movs	r0, r3
 8003718:	f005 fea6 	bl	8009468 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	5c9b      	ldrb	r3, [r3, r2]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <PCD_EP_ISR_Handler+0xb8>
 8003728:	f000 fb82 	bl	8003e30 <PCD_EP_ISR_Handler+0x7bc>
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <PCD_EP_ISR_Handler+0xc4>
 8003734:	f000 fb7c 	bl	8003e30 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	4252      	negs	r2, r2
 8003744:	4313      	orrs	r3, r2
 8003746:	b2da      	uxtb	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b291      	uxth	r1, r2
 800374e:	224c      	movs	r2, #76	; 0x4c
 8003750:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	; 0x24
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	e369      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3369      	adds	r3, #105	; 0x69
 8003760:	33ff      	adds	r3, #255	; 0xff
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2152      	movs	r1, #82	; 0x52
 800376a:	187b      	adds	r3, r7, r1
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003770:	187b      	adds	r3, r7, r1
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	4013      	ands	r3, r2
 800377a:	d037      	beq.n	80037ec <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2250      	movs	r2, #80	; 0x50
 8003782:	5a9b      	ldrh	r3, [r3, r2]
 8003784:	b29b      	uxth	r3, r3
 8003786:	001a      	movs	r2, r3
 8003788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	18d2      	adds	r2, r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <PCD_EP_ISR_Handler+0x314>)
 8003798:	4694      	mov	ip, r2
 800379a:	4463      	add	r3, ip
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	059b      	lsls	r3, r3, #22
 80037a0:	0d9a      	lsrs	r2, r3, #22
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	22ac      	movs	r2, #172	; 0xac
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	1899      	adds	r1, r3, r2
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f003 fe6e 	bl	800749c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	2010      	movs	r0, #16
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	496f      	ldr	r1, [pc, #444]	; (800398c <PCD_EP_ISR_Handler+0x318>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	801a      	strh	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	183a      	adds	r2, r7, r0
 80037d8:	8812      	ldrh	r2, [r2, #0]
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	430a      	orrs	r2, r1
 80037de:	b292      	uxth	r2, r2
 80037e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f005 fe09 	bl	80093fc <HAL_PCD_SetupStageCallback>
 80037ea:	e321      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037ec:	2352      	movs	r3, #82	; 0x52
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	5e9b      	ldrsh	r3, [r3, r2]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db00      	blt.n	80037fa <PCD_EP_ISR_Handler+0x186>
 80037f8:	e31a      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	201e      	movs	r0, #30
 8003804:	183b      	adds	r3, r7, r0
 8003806:	4961      	ldr	r1, [pc, #388]	; (800398c <PCD_EP_ISR_Handler+0x318>)
 8003808:	400a      	ands	r2, r1
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	183a      	adds	r2, r7, r0
 8003812:	8812      	ldrh	r2, [r2, #0]
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	430a      	orrs	r2, r1
 8003818:	b292      	uxth	r2, r2
 800381a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2250      	movs	r2, #80	; 0x50
 8003822:	5a9b      	ldrh	r3, [r3, r2]
 8003824:	b29b      	uxth	r3, r3
 8003826:	001a      	movs	r2, r3
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	18d2      	adds	r2, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	4a54      	ldr	r2, [pc, #336]	; (8003988 <PCD_EP_ISR_Handler+0x314>)
 8003838:	4694      	mov	ip, r2
 800383a:	4463      	add	r3, ip
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	059b      	lsls	r3, r3, #22
 8003840:	0d9a      	lsrs	r2, r3, #22
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <PCD_EP_ISR_Handler+0x210>
 800384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	6959      	ldr	r1, [r3, #20]
 800385e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003860:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 fe18 	bl	800749c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003878:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2100      	movs	r1, #0
 800387e:	0018      	movs	r0, r3
 8003880:	f005 fdd1 	bl	8009426 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	001a      	movs	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	4013      	ands	r3, r2
 8003894:	d000      	beq.n	8003898 <PCD_EP_ISR_Handler+0x224>
 8003896:	e2cb      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2250      	movs	r2, #80	; 0x50
 80038a4:	5a9b      	ldrh	r3, [r3, r2]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	001a      	movs	r2, r3
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4a35      	ldr	r2, [pc, #212]	; (8003988 <PCD_EP_ISR_Handler+0x314>)
 80038b4:	4694      	mov	ip, r2
 80038b6:	4463      	add	r3, ip
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d110      	bne.n	80038e4 <PCD_EP_ISR_Handler+0x270>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4a31      	ldr	r2, [pc, #196]	; (8003990 <PCD_EP_ISR_Handler+0x31c>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <PCD_EP_ISR_Handler+0x30c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e02b      	b.n	800393c <PCD_EP_ISR_Handler+0x2c8>
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b3e      	cmp	r3, #62	; 0x3e
 80038ea:	d812      	bhi.n	8003912 <PCD_EP_ISR_Handler+0x29e>
 80038ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	647b      	str	r3, [r7, #68]	; 0x44
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d002      	beq.n	8003904 <PCD_EP_ISR_Handler+0x290>
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	3301      	adds	r3, #1
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	b29b      	uxth	r3, r3
 8003908:	029b      	lsls	r3, r3, #10
 800390a:	b29a      	uxth	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	e014      	b.n	800393c <PCD_EP_ISR_Handler+0x2c8>
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	221f      	movs	r2, #31
 8003920:	4013      	ands	r3, r2
 8003922:	d102      	bne.n	800392a <PCD_EP_ISR_Handler+0x2b6>
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	3b01      	subs	r3, #1
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
 800392a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392c:	b29b      	uxth	r3, r3
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	b29b      	uxth	r3, r3
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <PCD_EP_ISR_Handler+0x30c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	b29a      	uxth	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	2012      	movs	r0, #18
 8003946:	183b      	adds	r3, r7, r0
 8003948:	4912      	ldr	r1, [pc, #72]	; (8003994 <PCD_EP_ISR_Handler+0x320>)
 800394a:	400a      	ands	r2, r1
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	183b      	adds	r3, r7, r0
 8003950:	183a      	adds	r2, r7, r0
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	0149      	lsls	r1, r1, #5
 8003958:	404a      	eors	r2, r1
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	183b      	adds	r3, r7, r0
 800395e:	183a      	adds	r2, r7, r0
 8003960:	8812      	ldrh	r2, [r2, #0]
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	0189      	lsls	r1, r1, #6
 8003966:	404a      	eors	r2, r1
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	183a      	adds	r2, r7, r0
 8003970:	8812      	ldrh	r2, [r2, #0]
 8003972:	4909      	ldr	r1, [pc, #36]	; (8003998 <PCD_EP_ISR_Handler+0x324>)
 8003974:	430a      	orrs	r2, r1
 8003976:	b292      	uxth	r2, r2
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	e259      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
 800397c:	ffff8f0f 	.word	0xffff8f0f
 8003980:	ffff8000 	.word	0xffff8000
 8003984:	00000402 	.word	0x00000402
 8003988:	00000406 	.word	0x00000406
 800398c:	00000f8f 	.word	0x00000f8f
 8003990:	ffff83ff 	.word	0xffff83ff
 8003994:	ffffbf8f 	.word	0xffffbf8f
 8003998:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	001a      	movs	r2, r3
 80039a2:	2055      	movs	r0, #85	; 0x55
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	2152      	movs	r1, #82	; 0x52
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	2200      	movs	r2, #0
 80039b8:	5e9b      	ldrsh	r3, [r3, r2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db00      	blt.n	80039c0 <PCD_EP_ISR_Handler+0x34c>
 80039be:	e0fa      	b.n	8003bb6 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	001a      	movs	r2, r3
 80039c6:	183b      	adds	r3, r7, r0
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	18d3      	adds	r3, r2, r3
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	2450      	movs	r4, #80	; 0x50
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	49cf      	ldr	r1, [pc, #828]	; (8003d14 <PCD_EP_ISR_Handler+0x6a0>)
 80039d8:	400a      	ands	r2, r1
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	183b      	adds	r3, r7, r0
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	18d3      	adds	r3, r2, r3
 80039ea:	193a      	adds	r2, r7, r4
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	430a      	orrs	r2, r1
 80039f2:	b292      	uxth	r2, r2
 80039f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039f6:	183b      	adds	r3, r7, r0
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	0013      	movs	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	3369      	adds	r3, #105	; 0x69
 8003a04:	33ff      	adds	r3, #255	; 0xff
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	7b1b      	ldrb	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d125      	bne.n	8003a60 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2250      	movs	r2, #80	; 0x50
 8003a1a:	5a9b      	ldrh	r3, [r3, r2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	001a      	movs	r2, r3
 8003a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	18d2      	adds	r2, r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	4aba      	ldr	r2, [pc, #744]	; (8003d18 <PCD_EP_ISR_Handler+0x6a4>)
 8003a30:	4694      	mov	ip, r2
 8003a32:	4463      	add	r3, ip
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	2448      	movs	r4, #72	; 0x48
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	0592      	lsls	r2, r2, #22
 8003a3c:	0d92      	lsrs	r2, r2, #22
 8003a3e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003a40:	193b      	adds	r3, r7, r4
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d100      	bne.n	8003a4a <PCD_EP_ISR_Handler+0x3d6>
 8003a48:	e08d      	b.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	6959      	ldr	r1, [r3, #20]
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	88da      	ldrh	r2, [r3, #6]
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	f003 fd1f 	bl	800749c <USB_ReadPMA>
 8003a5e:	e082      	b.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d10c      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a68:	2348      	movs	r3, #72	; 0x48
 8003a6a:	18fc      	adds	r4, r7, r3
 8003a6c:	2352      	movs	r3, #82	; 0x52
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f9ee 	bl	8003e58 <HAL_PCD_EP_DB_Receive>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	8023      	strh	r3, [r4, #0]
 8003a80:	e071      	b.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	001a      	movs	r2, r3
 8003a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	18d3      	adds	r3, r2, r3
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	204a      	movs	r0, #74	; 0x4a
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	49a0      	ldr	r1, [pc, #640]	; (8003d1c <PCD_EP_ISR_Handler+0x6a8>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	18d3      	adds	r3, r2, r3
 8003aac:	183a      	adds	r2, r7, r0
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	499b      	ldr	r1, [pc, #620]	; (8003d20 <PCD_EP_ISR_Handler+0x6ac>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	001a      	movs	r2, r3
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d024      	beq.n	8003b1e <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2250      	movs	r2, #80	; 0x50
 8003ada:	5a9b      	ldrh	r3, [r3, r2]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	001a      	movs	r2, r3
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	18d2      	adds	r2, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	4a8d      	ldr	r2, [pc, #564]	; (8003d24 <PCD_EP_ISR_Handler+0x6b0>)
 8003af0:	4694      	mov	ip, r2
 8003af2:	4463      	add	r3, ip
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	2448      	movs	r4, #72	; 0x48
 8003af8:	193b      	adds	r3, r7, r4
 8003afa:	0592      	lsls	r2, r2, #22
 8003afc:	0d92      	lsrs	r2, r2, #22
 8003afe:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02e      	beq.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	6959      	ldr	r1, [r3, #20]
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b12:	891a      	ldrh	r2, [r3, #8]
 8003b14:	193b      	adds	r3, r7, r4
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f003 fcc0 	bl	800749c <USB_ReadPMA>
 8003b1c:	e023      	b.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2250      	movs	r2, #80	; 0x50
 8003b24:	5a9b      	ldrh	r3, [r3, r2]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	001a      	movs	r2, r3
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	18d2      	adds	r2, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	18d3      	adds	r3, r2, r3
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <PCD_EP_ISR_Handler+0x6a4>)
 8003b3a:	4694      	mov	ip, r2
 8003b3c:	4463      	add	r3, ip
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	2448      	movs	r4, #72	; 0x48
 8003b42:	193b      	adds	r3, r7, r4
 8003b44:	0592      	lsls	r2, r2, #22
 8003b46:	0d92      	lsrs	r2, r2, #22
 8003b48:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	6959      	ldr	r1, [r3, #20]
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	895a      	ldrh	r2, [r3, #10]
 8003b5e:	193b      	adds	r3, r7, r4
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	f003 fc9b 	bl	800749c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	2148      	movs	r1, #72	; 0x48
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	18d2      	adds	r2, r2, r3
 8003b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	18d2      	adds	r2, r2, r3
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b82:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <PCD_EP_ISR_Handler+0x524>
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d207      	bcs.n	8003ba8 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f005 fc40 	bl	8009426 <HAL_PCD_DataOutStageCallback>
 8003ba6:	e006      	b.n	8003bb6 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bae:	0011      	movs	r1, r2
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f002 fa3b 	bl	800602c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003bb6:	2452      	movs	r4, #82	; 0x52
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d100      	bne.n	8003bc4 <PCD_EP_ISR_Handler+0x550>
 8003bc2:	e135      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bc4:	2055      	movs	r0, #85	; 0x55
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	0013      	movs	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	189b      	adds	r3, r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	001a      	movs	r2, r3
 8003be0:	183b      	adds	r3, r7, r0
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	2542      	movs	r5, #66	; 0x42
 8003bee:	197b      	adds	r3, r7, r5
 8003bf0:	494d      	ldr	r1, [pc, #308]	; (8003d28 <PCD_EP_ISR_Handler+0x6b4>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	18d3      	adds	r3, r2, r3
 8003c04:	197a      	adds	r2, r7, r5
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	4948      	ldr	r1, [pc, #288]	; (8003d2c <PCD_EP_ISR_Handler+0x6b8>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d100      	bne.n	8003c1a <PCD_EP_ISR_Handler+0x5a6>
 8003c18:	e0ad      	b.n	8003d76 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	4013      	ands	r3, r2
 8003c28:	d046      	beq.n	8003cb8 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d125      	bne.n	8003c7e <PCD_EP_ISR_Handler+0x60a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2250      	movs	r2, #80	; 0x50
 8003c3e:	5a9b      	ldrh	r3, [r3, r2]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	001a      	movs	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	00da      	lsls	r2, r3, #3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	18d3      	adds	r3, r2, r3
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <PCD_EP_ISR_Handler+0x6b0>)
 8003c56:	4694      	mov	ip, r2
 8003c58:	4463      	add	r3, ip
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4a33      	ldr	r2, [pc, #204]	; (8003d30 <PCD_EP_ISR_Handler+0x6bc>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <PCD_EP_ISR_Handler+0x6b8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	e073      	b.n	8003d66 <PCD_EP_ISR_Handler+0x6f2>
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d16f      	bne.n	8003d66 <PCD_EP_ISR_Handler+0x6f2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2250      	movs	r2, #80	; 0x50
 8003c92:	5a9b      	ldrh	r3, [r3, r2]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	001a      	movs	r2, r3
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	00da      	lsls	r2, r3, #3
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <PCD_EP_ISR_Handler+0x6b0>)
 8003caa:	4694      	mov	ip, r2
 8003cac:	4463      	add	r3, ip
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e056      	b.n	8003d66 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d136      	bne.n	8003d34 <PCD_EP_ISR_Handler+0x6c0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2250      	movs	r2, #80	; 0x50
 8003cd2:	5a9b      	ldrh	r3, [r3, r2]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	00da      	lsls	r2, r3, #3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	18d3      	adds	r3, r2, r3
 8003ce8:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <PCD_EP_ISR_Handler+0x6a4>)
 8003cea:	4694      	mov	ip, r2
 8003cec:	4463      	add	r3, ip
 8003cee:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <PCD_EP_ISR_Handler+0x6bc>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <PCD_EP_ISR_Handler+0x6b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	801a      	strh	r2, [r3, #0]
 8003d10:	e029      	b.n	8003d66 <PCD_EP_ISR_Handler+0x6f2>
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	00000f8f 	.word	0x00000f8f
 8003d18:	00000406 	.word	0x00000406
 8003d1c:	ffff8f8f 	.word	0xffff8f8f
 8003d20:	ffff80c0 	.word	0xffff80c0
 8003d24:	00000402 	.word	0x00000402
 8003d28:	ffff8f0f 	.word	0xffff8f0f
 8003d2c:	ffff8000 	.word	0xffff8000
 8003d30:	ffff83ff 	.word	0xffff83ff
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d114      	bne.n	8003d66 <PCD_EP_ISR_Handler+0x6f2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2250      	movs	r2, #80	; 0x50
 8003d42:	5a9b      	ldrh	r3, [r3, r2]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	001a      	movs	r2, r3
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	00da      	lsls	r2, r3, #3
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	4a3d      	ldr	r2, [pc, #244]	; (8003e50 <PCD_EP_ISR_Handler+0x7dc>)
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	4463      	add	r3, ip
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	2200      	movs	r2, #0
 8003d64:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f005 fb7a 	bl	8009468 <HAL_PCD_DataInStageCallback>
 8003d74:	e05c      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d150      	bne.n	8003e20 <PCD_EP_ISR_Handler+0x7ac>
 8003d7e:	2352      	movs	r3, #82	; 0x52
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d149      	bne.n	8003e20 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2250      	movs	r2, #80	; 0x50
 8003d92:	5a9b      	ldrh	r3, [r3, r2]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	001a      	movs	r2, r3
 8003d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	18d2      	adds	r2, r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <PCD_EP_ISR_Handler+0x7e0>)
 8003da8:	4694      	mov	ip, r2
 8003daa:	4463      	add	r3, ip
 8003dac:	881a      	ldrh	r2, [r3, #0]
 8003dae:	2140      	movs	r1, #64	; 0x40
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	0592      	lsls	r2, r2, #22
 8003db4:	0d92      	lsrs	r2, r2, #22
 8003db6:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d907      	bls.n	8003dd4 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd0:	619a      	str	r2, [r3, #24]
 8003dd2:	e002      	b.n	8003dda <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f005 fb3c 	bl	8009468 <HAL_PCD_DataInStageCallback>
 8003df0:	e01e      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	18d2      	adds	r2, r2, r3
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	18d2      	adds	r2, r2, r3
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f002 f907 	bl	800602c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e1e:	e007      	b.n	8003e30 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e20:	2352      	movs	r3, #82	; 0x52
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f930 	bl	8004090 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2244      	movs	r2, #68	; 0x44
 8003e36:	5a9b      	ldrh	r3, [r3, r2]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da01      	bge.n	8003e44 <PCD_EP_ISR_Handler+0x7d0>
 8003e40:	f7ff fc1e 	bl	8003680 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b016      	add	sp, #88	; 0x58
 8003e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	00000406 	.word	0x00000406
 8003e54:	00000402 	.word	0x00000402

08003e58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	1dbb      	adds	r3, r7, #6
 8003e64:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d100      	bne.n	8003e74 <HAL_PCD_EP_DB_Receive+0x1c>
 8003e72:	e07d      	b.n	8003f70 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2250      	movs	r2, #80	; 0x50
 8003e7a:	5a9b      	ldrh	r3, [r3, r2]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	001a      	movs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	18d2      	adds	r2, r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	4a7a      	ldr	r2, [pc, #488]	; (8004078 <HAL_PCD_EP_DB_Receive+0x220>)
 8003e90:	4694      	mov	ip, r2
 8003e92:	4463      	add	r3, ip
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	211a      	movs	r1, #26
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	0592      	lsls	r2, r2, #22
 8003e9c:	0d92      	lsrs	r2, r2, #22
 8003e9e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d307      	bcc.n	8003ebc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	619a      	str	r2, [r3, #24]
 8003eba:	e002      	b.n	8003ec2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d121      	bne.n	8003f0e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	001a      	movs	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	18d3      	adds	r3, r2, r3
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	2018      	movs	r0, #24
 8003ede:	183b      	adds	r3, r7, r0
 8003ee0:	4966      	ldr	r1, [pc, #408]	; (800407c <HAL_PCD_EP_DB_Receive+0x224>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	183a      	adds	r2, r7, r0
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	0189      	lsls	r1, r1, #6
 8003ef0:	404a      	eors	r2, r1
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	001a      	movs	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	183a      	adds	r2, r7, r0
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	495e      	ldr	r1, [pc, #376]	; (8004080 <HAL_PCD_EP_DB_Receive+0x228>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f0e:	1dbb      	adds	r3, r7, #6
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	4013      	ands	r3, r2
 8003f16:	d01a      	beq.n	8003f4e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	18d3      	adds	r3, r2, r3
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	2016      	movs	r0, #22
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	4955      	ldr	r1, [pc, #340]	; (8004084 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	801a      	strh	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	001a      	movs	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	183a      	adds	r2, r7, r0
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	4950      	ldr	r1, [pc, #320]	; (8004088 <HAL_PCD_EP_DB_Receive+0x230>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003f4e:	241a      	movs	r4, #26
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d100      	bne.n	8003f5a <HAL_PCD_EP_DB_Receive+0x102>
 8003f58:	e086      	b.n	8004068 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6959      	ldr	r1, [r3, #20]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	891a      	ldrh	r2, [r3, #8]
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f003 fa97 	bl	800749c <USB_ReadPMA>
 8003f6e:	e07b      	b.n	8004068 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2250      	movs	r2, #80	; 0x50
 8003f76:	5a9b      	ldrh	r3, [r3, r2]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	18d2      	adds	r2, r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	4a40      	ldr	r2, [pc, #256]	; (800408c <HAL_PCD_EP_DB_Receive+0x234>)
 8003f8c:	4694      	mov	ip, r2
 8003f8e:	4463      	add	r3, ip
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	211a      	movs	r1, #26
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	0592      	lsls	r2, r2, #22
 8003f98:	0d92      	lsrs	r2, r2, #22
 8003f9a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d307      	bcc.n	8003fb8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	1ad2      	subs	r2, r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	e002      	b.n	8003fbe <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d121      	bne.n	800400a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	001a      	movs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	201e      	movs	r0, #30
 8003fda:	183b      	adds	r3, r7, r0
 8003fdc:	4927      	ldr	r1, [pc, #156]	; (800407c <HAL_PCD_EP_DB_Receive+0x224>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	183b      	adds	r3, r7, r0
 8003fe4:	183a      	adds	r2, r7, r0
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	0189      	lsls	r1, r1, #6
 8003fec:	404a      	eors	r2, r1
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	001a      	movs	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	183a      	adds	r2, r7, r0
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	491f      	ldr	r1, [pc, #124]	; (8004080 <HAL_PCD_EP_DB_Receive+0x228>)
 8004004:	430a      	orrs	r2, r1
 8004006:	b292      	uxth	r2, r2
 8004008:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800400a:	1dbb      	adds	r3, r7, #6
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	2240      	movs	r2, #64	; 0x40
 8004010:	4013      	ands	r3, r2
 8004012:	d11a      	bne.n	800404a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	001a      	movs	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	201c      	movs	r0, #28
 8004028:	183b      	adds	r3, r7, r0
 800402a:	4916      	ldr	r1, [pc, #88]	; (8004084 <HAL_PCD_EP_DB_Receive+0x22c>)
 800402c:	400a      	ands	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	001a      	movs	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	18d3      	adds	r3, r2, r3
 800403e:	183a      	adds	r2, r7, r0
 8004040:	8812      	ldrh	r2, [r2, #0]
 8004042:	4911      	ldr	r1, [pc, #68]	; (8004088 <HAL_PCD_EP_DB_Receive+0x230>)
 8004044:	430a      	orrs	r2, r1
 8004046:	b292      	uxth	r2, r2
 8004048:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800404a:	241a      	movs	r4, #26
 800404c:	193b      	adds	r3, r7, r4
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6959      	ldr	r1, [r3, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	895a      	ldrh	r2, [r3, #10]
 8004060:	193b      	adds	r3, r7, r4
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f003 fa1a 	bl	800749c <USB_ReadPMA>
    }
  }

  return count;
 8004068:	231a      	movs	r3, #26
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	881b      	ldrh	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b009      	add	sp, #36	; 0x24
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	00000402 	.word	0x00000402
 800407c:	ffffbf8f 	.word	0xffffbf8f
 8004080:	ffff8080 	.word	0xffff8080
 8004084:	ffff8f8f 	.word	0xffff8f8f
 8004088:	ffff80c0 	.word	0xffff80c0
 800408c:	00000406 	.word	0x00000406

08004090 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b0a2      	sub	sp, #136	; 0x88
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	4013      	ands	r3, r2
 80040a6:	d100      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x1a>
 80040a8:	e1c8      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2250      	movs	r2, #80	; 0x50
 80040b0:	5a9b      	ldrh	r3, [r3, r2]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	001a      	movs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	18d2      	adds	r2, r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	4ad7      	ldr	r2, [pc, #860]	; (8004424 <HAL_PCD_EP_DB_Transmit+0x394>)
 80040c6:	4694      	mov	ip, r2
 80040c8:	4463      	add	r3, ip
 80040ca:	881a      	ldrh	r2, [r3, #0]
 80040cc:	214e      	movs	r1, #78	; 0x4e
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	0592      	lsls	r2, r2, #22
 80040d2:	0d92      	lsrs	r2, r2, #22
 80040d4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d907      	bls.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	619a      	str	r2, [r3, #24]
 80040f0:	e002      	b.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2200      	movs	r2, #0
 80040f6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d000      	beq.n	8004102 <HAL_PCD_EP_DB_Transmit+0x72>
 8004100:	e0b5      	b.n	800426e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d125      	bne.n	8004156 <HAL_PCD_EP_DB_Transmit+0xc6>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2250      	movs	r2, #80	; 0x50
 8004116:	5a9b      	ldrh	r3, [r3, r2]
 8004118:	b29b      	uxth	r3, r3
 800411a:	001a      	movs	r2, r3
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	189b      	adds	r3, r3, r2
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	00da      	lsls	r2, r3, #3
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	18d3      	adds	r3, r2, r3
 800412c:	4abd      	ldr	r2, [pc, #756]	; (8004424 <HAL_PCD_EP_DB_Transmit+0x394>)
 800412e:	4694      	mov	ip, r2
 8004130:	4463      	add	r3, ip
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	4abb      	ldr	r2, [pc, #748]	; (8004428 <HAL_PCD_EP_DB_Transmit+0x398>)
 800413c:	4013      	ands	r3, r2
 800413e:	b29a      	uxth	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	4ab8      	ldr	r2, [pc, #736]	; (800442c <HAL_PCD_EP_DB_Transmit+0x39c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	b29a      	uxth	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e01b      	b.n	800418e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d117      	bne.n	800418e <HAL_PCD_EP_DB_Transmit+0xfe>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2250      	movs	r2, #80	; 0x50
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	001a      	movs	r2, r3
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	189b      	adds	r3, r3, r2
 8004174:	633b      	str	r3, [r7, #48]	; 0x30
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00da      	lsls	r2, r3, #3
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	4aa8      	ldr	r2, [pc, #672]	; (8004424 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004182:	4694      	mov	ip, r2
 8004184:	4463      	add	r3, ip
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2200      	movs	r2, #0
 800418c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d125      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x158>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2250      	movs	r2, #80	; 0x50
 80041a8:	5a9b      	ldrh	r3, [r3, r2]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	001a      	movs	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	00da      	lsls	r2, r3, #3
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	18d3      	adds	r3, r2, r3
 80041be:	4a9c      	ldr	r2, [pc, #624]	; (8004430 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80041c0:	4694      	mov	ip, r2
 80041c2:	4463      	add	r3, ip
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4a96      	ldr	r2, [pc, #600]	; (8004428 <HAL_PCD_EP_DB_Transmit+0x398>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4a93      	ldr	r2, [pc, #588]	; (800442c <HAL_PCD_EP_DB_Transmit+0x39c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e018      	b.n	800421a <HAL_PCD_EP_DB_Transmit+0x18a>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <HAL_PCD_EP_DB_Transmit+0x18a>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2250      	movs	r2, #80	; 0x50
 80041f6:	5a9b      	ldrh	r3, [r3, r2]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	001a      	movs	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	00da      	lsls	r2, r3, #3
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	18d3      	adds	r3, r2, r3
 800420c:	4a88      	ldr	r2, [pc, #544]	; (8004430 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800420e:	4694      	mov	ip, r2
 8004210:	4463      	add	r3, ip
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2200      	movs	r2, #0
 8004218:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f005 f920 	bl	8009468 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	01db      	lsls	r3, r3, #7
 8004230:	4013      	ands	r3, r2
 8004232:	d100      	bne.n	8004236 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004234:	e2d4      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	001a      	movs	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29a      	uxth	r2, r3
 8004248:	2012      	movs	r0, #18
 800424a:	183b      	adds	r3, r7, r0
 800424c:	4979      	ldr	r1, [pc, #484]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800424e:	400a      	ands	r2, r1
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	001a      	movs	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	18d3      	adds	r3, r2, r3
 8004260:	183a      	adds	r2, r7, r0
 8004262:	8812      	ldrh	r2, [r2, #0]
 8004264:	4974      	ldr	r1, [pc, #464]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004266:	430a      	orrs	r2, r1
 8004268:	b292      	uxth	r2, r2
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e2b8      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800426e:	1dbb      	adds	r3, r7, #6
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	01db      	lsls	r3, r3, #7
 8004276:	4013      	ands	r3, r2
 8004278:	d01a      	beq.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	001a      	movs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29a      	uxth	r2, r3
 800428c:	2044      	movs	r0, #68	; 0x44
 800428e:	183b      	adds	r3, r7, r0
 8004290:	4968      	ldr	r1, [pc, #416]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004292:	400a      	ands	r2, r1
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	001a      	movs	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	183a      	adds	r2, r7, r0
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	4963      	ldr	r1, [pc, #396]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	b292      	uxth	r2, r2
 80042ae:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	5c9b      	ldrb	r3, [r3, r2]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d000      	beq.n	80042bc <HAL_PCD_EP_DB_Transmit+0x22c>
 80042ba:	e291      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	214e      	movs	r1, #78	; 0x4e
 80042c2:	187b      	adds	r3, r7, r1
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	18d2      	adds	r2, r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	187b      	adds	r3, r7, r1
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	18d2      	adds	r2, r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d309      	bcc.n	80042fa <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	621a      	str	r2, [r3, #32]
 80042f8:	e016      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004302:	234e      	movs	r3, #78	; 0x4e
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2224      	movs	r2, #36	; 0x24
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	e009      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d150      	bne.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x342>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2250      	movs	r2, #80	; 0x50
 800433c:	5a9b      	ldrh	r3, [r3, r2]
 800433e:	b29b      	uxth	r3, r3
 8004340:	001a      	movs	r2, r3
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	189b      	adds	r3, r3, r2
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	18d3      	adds	r3, r2, r3
 8004352:	4a34      	ldr	r2, [pc, #208]	; (8004424 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004354:	4694      	mov	ip, r2
 8004356:	4463      	add	r3, ip
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d110      	bne.n	8004382 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004368:	4013      	ands	r3, r2
 800436a:	b29a      	uxth	r2, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	4a2d      	ldr	r2, [pc, #180]	; (800442c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e044      	b.n	800440c <HAL_PCD_EP_DB_Transmit+0x37c>
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	2b3e      	cmp	r3, #62	; 0x3e
 8004386:	d810      	bhi.n	80043aa <HAL_PCD_EP_DB_Transmit+0x31a>
 8004388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
 800438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d002      	beq.n	800439c <HAL_PCD_EP_DB_Transmit+0x30c>
 8004396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004398:	3301      	adds	r3, #1
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48
 800439c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439e:	b29b      	uxth	r3, r3
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e030      	b.n	800440c <HAL_PCD_EP_DB_Transmit+0x37c>
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b2:	221f      	movs	r2, #31
 80043b4:	4013      	ands	r3, r2
 80043b6:	d102      	bne.n	80043be <HAL_PCD_EP_DB_Transmit+0x32e>
 80043b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ba:	3b01      	subs	r3, #1
 80043bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4a19      	ldr	r2, [pc, #100]	; (800442c <HAL_PCD_EP_DB_Transmit+0x39c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	e01c      	b.n	800440c <HAL_PCD_EP_DB_Transmit+0x37c>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d118      	bne.n	800440c <HAL_PCD_EP_DB_Transmit+0x37c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2250      	movs	r2, #80	; 0x50
 80043e6:	5a9b      	ldrh	r3, [r3, r2]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	001a      	movs	r2, r3
 80043ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	643b      	str	r3, [r7, #64]	; 0x40
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00da      	lsls	r2, r3, #3
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	18d3      	adds	r3, r2, r3
 80043fc:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_PCD_EP_DB_Transmit+0x394>)
 80043fe:	4694      	mov	ip, r2
 8004400:	4463      	add	r3, ip
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004406:	b29a      	uxth	r2, r3
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	6959      	ldr	r1, [r3, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	891a      	ldrh	r2, [r3, #8]
 8004418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	f002 fffa 	bl	8007414 <USB_WritePMA>
 8004420:	e1de      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	00000402 	.word	0x00000402
 8004428:	ffff83ff 	.word	0xffff83ff
 800442c:	ffff8000 	.word	0xffff8000
 8004430:	00000406 	.word	0x00000406
 8004434:	ffff8f8f 	.word	0xffff8f8f
 8004438:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2250      	movs	r2, #80	; 0x50
 8004442:	5a9b      	ldrh	r3, [r3, r2]
 8004444:	b29b      	uxth	r3, r3
 8004446:	001a      	movs	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	18d2      	adds	r2, r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	4aca      	ldr	r2, [pc, #808]	; (8004780 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004458:	4694      	mov	ip, r2
 800445a:	4463      	add	r3, ip
 800445c:	881a      	ldrh	r2, [r3, #0]
 800445e:	214e      	movs	r1, #78	; 0x4e
 8004460:	187b      	adds	r3, r7, r1
 8004462:	0592      	lsls	r2, r2, #22
 8004464:	0d92      	lsrs	r2, r2, #22
 8004466:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	187b      	adds	r3, r7, r1
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d307      	bcc.n	8004484 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	187b      	adds	r3, r7, r1
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	619a      	str	r2, [r3, #24]
 8004482:	e002      	b.n	800448a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <HAL_PCD_EP_DB_Transmit+0x404>
 8004492:	e0c0      	b.n	8004616 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d125      	bne.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x458>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2250      	movs	r2, #80	; 0x50
 80044a8:	5a9b      	ldrh	r3, [r3, r2]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	001a      	movs	r2, r3
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00da      	lsls	r2, r3, #3
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	18d3      	adds	r3, r2, r3
 80044be:	4ab1      	ldr	r2, [pc, #708]	; (8004784 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80044c0:	4694      	mov	ip, r2
 80044c2:	4463      	add	r3, ip
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4aae      	ldr	r2, [pc, #696]	; (8004788 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4aab      	ldr	r2, [pc, #684]	; (800478c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	e01b      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x490>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d117      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x490>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	677b      	str	r3, [r7, #116]	; 0x74
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2250      	movs	r2, #80	; 0x50
 80044fc:	5a9b      	ldrh	r3, [r3, r2]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	001a      	movs	r2, r3
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	189b      	adds	r3, r3, r2
 8004506:	677b      	str	r3, [r7, #116]	; 0x74
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004510:	18d3      	adds	r3, r2, r3
 8004512:	4a9c      	ldr	r2, [pc, #624]	; (8004784 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004514:	4694      	mov	ip, r2
 8004516:	4463      	add	r3, ip
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
 800451a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451c:	2200      	movs	r2, #0
 800451e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	67bb      	str	r3, [r7, #120]	; 0x78
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d130      	bne.n	8004590 <HAL_PCD_EP_DB_Transmit+0x500>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	187a      	adds	r2, r7, r1
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2250      	movs	r2, #80	; 0x50
 800453e:	5a9b      	ldrh	r3, [r3, r2]
 8004540:	b29b      	uxth	r3, r3
 8004542:	001a      	movs	r2, r3
 8004544:	187b      	adds	r3, r7, r1
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	189b      	adds	r3, r3, r2
 800454a:	187a      	adds	r2, r7, r1
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	00da      	lsls	r2, r3, #3
 8004554:	187b      	adds	r3, r7, r1
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	18d3      	adds	r3, r2, r3
 800455a:	4a89      	ldr	r2, [pc, #548]	; (8004780 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800455c:	4694      	mov	ip, r2
 800455e:	4463      	add	r3, ip
 8004560:	2184      	movs	r1, #132	; 0x84
 8004562:	187a      	adds	r2, r7, r1
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	187b      	adds	r3, r7, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	4a86      	ldr	r2, [pc, #536]	; (8004788 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004570:	4013      	ands	r3, r2
 8004572:	b29a      	uxth	r2, r3
 8004574:	187b      	adds	r3, r7, r1
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	187b      	adds	r3, r7, r1
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4a82      	ldr	r2, [pc, #520]	; (800478c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004584:	4313      	orrs	r3, r2
 8004586:	b29a      	uxth	r2, r3
 8004588:	187b      	adds	r3, r7, r1
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e018      	b.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x532>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d114      	bne.n	80045c2 <HAL_PCD_EP_DB_Transmit+0x532>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2250      	movs	r2, #80	; 0x50
 800459e:	5a9b      	ldrh	r3, [r3, r2]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	001a      	movs	r2, r3
 80045a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	00da      	lsls	r2, r3, #3
 80045b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b2:	18d3      	adds	r3, r2, r3
 80045b4:	4a72      	ldr	r2, [pc, #456]	; (8004780 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80045b6:	4694      	mov	ip, r2
 80045b8:	4463      	add	r3, ip
 80045ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045be:	2200      	movs	r2, #0
 80045c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f004 ff4c 	bl	8009468 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	01db      	lsls	r3, r3, #7
 80045d8:	4013      	ands	r3, r2
 80045da:	d000      	beq.n	80045de <HAL_PCD_EP_DB_Transmit+0x54e>
 80045dc:	e100      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	001a      	movs	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18d3      	adds	r3, r2, r3
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	2046      	movs	r0, #70	; 0x46
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	4966      	ldr	r1, [pc, #408]	; (8004790 <HAL_PCD_EP_DB_Transmit+0x700>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	001a      	movs	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	18d3      	adds	r3, r2, r3
 8004608:	183a      	adds	r2, r7, r0
 800460a:	8812      	ldrh	r2, [r2, #0]
 800460c:	4961      	ldr	r1, [pc, #388]	; (8004794 <HAL_PCD_EP_DB_Transmit+0x704>)
 800460e:	430a      	orrs	r2, r1
 8004610:	b292      	uxth	r2, r2
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e0e4      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004616:	1dbb      	adds	r3, r7, #6
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	01db      	lsls	r3, r3, #7
 800461e:	4013      	ands	r3, r2
 8004620:	d11a      	bne.n	8004658 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	001a      	movs	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	204c      	movs	r0, #76	; 0x4c
 8004636:	183b      	adds	r3, r7, r0
 8004638:	4955      	ldr	r1, [pc, #340]	; (8004790 <HAL_PCD_EP_DB_Transmit+0x700>)
 800463a:	400a      	ands	r2, r1
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	001a      	movs	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	18d3      	adds	r3, r2, r3
 800464c:	183a      	adds	r2, r7, r0
 800464e:	8812      	ldrh	r2, [r2, #0]
 8004650:	4950      	ldr	r1, [pc, #320]	; (8004794 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004652:	430a      	orrs	r2, r1
 8004654:	b292      	uxth	r2, r2
 8004656:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	5c9b      	ldrb	r3, [r3, r2]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d000      	beq.n	8004664 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004662:	e0bd      	b.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	214e      	movs	r1, #78	; 0x4e
 800466a:	187b      	adds	r3, r7, r1
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	18d2      	adds	r2, r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	187b      	adds	r3, r7, r1
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	18d2      	adds	r2, r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d309      	bcc.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	621a      	str	r2, [r3, #32]
 80046a0:	e016      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d108      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80046aa:	234e      	movs	r3, #78	; 0x4e
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	2100      	movs	r1, #0
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	e009      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15c      	bne.n	8004798 <HAL_PCD_EP_DB_Transmit+0x708>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2250      	movs	r2, #80	; 0x50
 80046ea:	5a9b      	ldrh	r3, [r3, r2]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	001a      	movs	r2, r3
 80046f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	00da      	lsls	r2, r3, #3
 80046fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fe:	18d3      	adds	r3, r2, r3
 8004700:	4a1f      	ldr	r2, [pc, #124]	; (8004780 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004702:	4694      	mov	ip, r2
 8004704:	4463      	add	r3, ip
 8004706:	65bb      	str	r3, [r7, #88]	; 0x58
 8004708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470a:	2b00      	cmp	r3, #0
 800470c:	d110      	bne.n	8004730 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800470e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004716:	4013      	ands	r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	b29a      	uxth	r2, r3
 800472a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	e04d      	b.n	80047cc <HAL_PCD_EP_DB_Transmit+0x73c>
 8004730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004732:	2b3e      	cmp	r3, #62	; 0x3e
 8004734:	d810      	bhi.n	8004758 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	657b      	str	r3, [r7, #84]	; 0x54
 800473c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473e:	2201      	movs	r2, #1
 8004740:	4013      	ands	r3, r2
 8004742:	d002      	beq.n	800474a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004746:	3301      	adds	r3, #1
 8004748:	657b      	str	r3, [r7, #84]	; 0x54
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29a      	uxth	r2, r3
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	e039      	b.n	80047cc <HAL_PCD_EP_DB_Transmit+0x73c>
 8004758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	657b      	str	r3, [r7, #84]	; 0x54
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	221f      	movs	r2, #31
 8004762:	4013      	ands	r3, r2
 8004764:	d102      	bne.n	800476c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004768:	3b01      	subs	r3, #1
 800476a:	657b      	str	r3, [r7, #84]	; 0x54
 800476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476e:	b29b      	uxth	r3, r3
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b29b      	uxth	r3, r3
 8004774:	4a05      	ldr	r2, [pc, #20]	; (800478c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	b29a      	uxth	r2, r3
 800477a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	e025      	b.n	80047cc <HAL_PCD_EP_DB_Transmit+0x73c>
 8004780:	00000406 	.word	0x00000406
 8004784:	00000402 	.word	0x00000402
 8004788:	ffff83ff 	.word	0xffff83ff
 800478c:	ffff8000 	.word	0xffff8000
 8004790:	ffff8f8f 	.word	0xffff8f8f
 8004794:	ffffc080 	.word	0xffffc080
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d115      	bne.n	80047cc <HAL_PCD_EP_DB_Transmit+0x73c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2250      	movs	r2, #80	; 0x50
 80047a6:	5a9b      	ldrh	r3, [r3, r2]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	001a      	movs	r2, r3
 80047ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	667b      	str	r3, [r7, #100]	; 0x64
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	00da      	lsls	r2, r3, #3
 80047b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80047be:	4694      	mov	ip, r2
 80047c0:	4463      	add	r3, ip
 80047c2:	663b      	str	r3, [r7, #96]	; 0x60
 80047c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6959      	ldr	r1, [r3, #20]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	895a      	ldrh	r2, [r3, #10]
 80047d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f002 fe1a 	bl	8007414 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	001a      	movs	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	2010      	movs	r0, #16
 80047f4:	183b      	adds	r3, r7, r0
 80047f6:	4911      	ldr	r1, [pc, #68]	; (800483c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	183a      	adds	r2, r7, r0
 8004800:	8812      	ldrh	r2, [r2, #0]
 8004802:	2110      	movs	r1, #16
 8004804:	404a      	eors	r2, r1
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	183b      	adds	r3, r7, r0
 800480a:	183a      	adds	r2, r7, r0
 800480c:	8812      	ldrh	r2, [r2, #0]
 800480e:	2120      	movs	r1, #32
 8004810:	404a      	eors	r2, r1
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	001a      	movs	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	183a      	adds	r2, r7, r0
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	4906      	ldr	r1, [pc, #24]	; (8004840 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8004828:	430a      	orrs	r2, r1
 800482a:	b292      	uxth	r2, r2
 800482c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b022      	add	sp, #136	; 0x88
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00000406 	.word	0x00000406
 800483c:	ffff8fbf 	.word	0xffff8fbf
 8004840:	ffff8080 	.word	0xffff8080

08004844 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	0008      	movs	r0, r1
 800484e:	0011      	movs	r1, r2
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	240a      	movs	r4, #10
 8004854:	193b      	adds	r3, r7, r4
 8004856:	1c02      	adds	r2, r0, #0
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	2308      	movs	r3, #8
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	1c0a      	adds	r2, r1, #0
 8004860:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004862:	0021      	movs	r1, r4
 8004864:	187b      	adds	r3, r7, r1
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004872:	187b      	adds	r3, r7, r1
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	2207      	movs	r2, #7
 8004878:	4013      	ands	r3, r2
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	0013      	movs	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	189b      	adds	r3, r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	18d3      	adds	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e00b      	b.n	80048a4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800488c:	230a      	movs	r3, #10
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	881a      	ldrh	r2, [r3, #0]
 8004892:	0013      	movs	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	189b      	adds	r3, r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	3369      	adds	r3, #105	; 0x69
 800489c:	33ff      	adds	r3, #255	; 0xff
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	18d3      	adds	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048a4:	2308      	movs	r3, #8
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	80da      	strh	r2, [r3, #6]
 80048bc:	e00b      	b.n	80048d6 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2201      	movs	r2, #1
 80048c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b007      	add	sp, #28
 80048de:	bd90      	pop	{r4, r7, pc}

080048e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	23ba      	movs	r3, #186	; 0xba
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	2101      	movs	r1, #1
 80048f6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	23b8      	movs	r3, #184	; 0xb8
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	2100      	movs	r1, #0
 8004900:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2254      	movs	r2, #84	; 0x54
 8004906:	5a9b      	ldrh	r3, [r3, r2]
 8004908:	b29b      	uxth	r3, r3
 800490a:	2201      	movs	r2, #1
 800490c:	4313      	orrs	r3, r2
 800490e:	b299      	uxth	r1, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2254      	movs	r2, #84	; 0x54
 8004914:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2254      	movs	r2, #84	; 0x54
 800491a:	5a9b      	ldrh	r3, [r3, r2]
 800491c:	b29b      	uxth	r3, r3
 800491e:	2202      	movs	r2, #2
 8004920:	4313      	orrs	r3, r2
 8004922:	b299      	uxth	r1, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2254      	movs	r2, #84	; 0x54
 8004928:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b004      	add	sp, #16
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	000a      	movs	r2, r1
 800493e:	1cfb      	adds	r3, r7, #3
 8004940:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 fb76 	bl	800504c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	4013      	ands	r3, r2
 8004968:	d100      	bne.n	800496c <HAL_RCC_OscConfig+0x20>
 800496a:	e08e      	b.n	8004a8a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800496c:	4bc5      	ldr	r3, [pc, #788]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	220c      	movs	r2, #12
 8004972:	4013      	ands	r3, r2
 8004974:	2b04      	cmp	r3, #4
 8004976:	d00e      	beq.n	8004996 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004978:	4bc2      	ldr	r3, [pc, #776]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	220c      	movs	r2, #12
 800497e:	4013      	ands	r3, r2
 8004980:	2b08      	cmp	r3, #8
 8004982:	d117      	bne.n	80049b4 <HAL_RCC_OscConfig+0x68>
 8004984:	4bbf      	ldr	r3, [pc, #764]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	23c0      	movs	r3, #192	; 0xc0
 800498a:	025b      	lsls	r3, r3, #9
 800498c:	401a      	ands	r2, r3
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	025b      	lsls	r3, r3, #9
 8004992:	429a      	cmp	r2, r3
 8004994:	d10e      	bne.n	80049b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004996:	4bbb      	ldr	r3, [pc, #748]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	4013      	ands	r3, r2
 80049a0:	d100      	bne.n	80049a4 <HAL_RCC_OscConfig+0x58>
 80049a2:	e071      	b.n	8004a88 <HAL_RCC_OscConfig+0x13c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d000      	beq.n	80049ae <HAL_RCC_OscConfig+0x62>
 80049ac:	e06c      	b.n	8004a88 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f000 fb4c 	bl	800504c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x80>
 80049bc:	4bb1      	ldr	r3, [pc, #708]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4bb0      	ldr	r3, [pc, #704]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	0249      	lsls	r1, r1, #9
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e02f      	b.n	8004a2c <HAL_RCC_OscConfig+0xe0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0xa2>
 80049d4:	4bab      	ldr	r3, [pc, #684]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4baa      	ldr	r3, [pc, #680]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049da:	49ab      	ldr	r1, [pc, #684]	; (8004c88 <HAL_RCC_OscConfig+0x33c>)
 80049dc:	400a      	ands	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	4ba8      	ldr	r3, [pc, #672]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4ba7      	ldr	r3, [pc, #668]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049e6:	49a9      	ldr	r1, [pc, #676]	; (8004c8c <HAL_RCC_OscConfig+0x340>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e01e      	b.n	8004a2c <HAL_RCC_OscConfig+0xe0>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10e      	bne.n	8004a14 <HAL_RCC_OscConfig+0xc8>
 80049f6:	4ba3      	ldr	r3, [pc, #652]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4ba2      	ldr	r3, [pc, #648]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	02c9      	lsls	r1, r1, #11
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	4b9f      	ldr	r3, [pc, #636]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b9e      	ldr	r3, [pc, #632]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0249      	lsls	r1, r1, #9
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0xe0>
 8004a14:	4b9b      	ldr	r3, [pc, #620]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b9a      	ldr	r3, [pc, #616]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a1a:	499b      	ldr	r1, [pc, #620]	; (8004c88 <HAL_RCC_OscConfig+0x33c>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	4b98      	ldr	r3, [pc, #608]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b97      	ldr	r3, [pc, #604]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a26:	4999      	ldr	r1, [pc, #612]	; (8004c8c <HAL_RCC_OscConfig+0x340>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d014      	beq.n	8004a5e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fc fe56 	bl	80016e4 <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a3e:	f7fc fe51 	bl	80016e4 <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	; 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e2fd      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a50:	4b8c      	ldr	r3, [pc, #560]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0xf2>
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7fc fe41 	bl	80016e4 <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fc fe3c 	bl	80016e4 <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e2e8      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x11c>
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	4013      	ands	r3, r2
 8004a92:	d100      	bne.n	8004a96 <HAL_RCC_OscConfig+0x14a>
 8004a94:	e06c      	b.n	8004b70 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004aa0:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	220c      	movs	r2, #12
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d11f      	bne.n	8004aec <HAL_RCC_OscConfig+0x1a0>
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	23c0      	movs	r3, #192	; 0xc0
 8004ab2:	025b      	lsls	r3, r3, #9
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b71      	ldr	r3, [pc, #452]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x188>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e2bb      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad4:	4b6b      	ldr	r3, [pc, #428]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	22f8      	movs	r2, #248	; 0xf8
 8004ada:	4393      	bics	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00da      	lsls	r2, r3, #3
 8004ae4:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e041      	b.n	8004b70 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d024      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b62      	ldr	r3, [pc, #392]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	430a      	orrs	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fc fdf0 	bl	80016e4 <HAL_GetTick>
 8004b04:	0003      	movs	r3, r0
 8004b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fc fdeb 	bl	80016e4 <HAL_GetTick>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e297      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1c:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2202      	movs	r2, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	d0f1      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b57      	ldr	r3, [pc, #348]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	22f8      	movs	r2, #248	; 0xf8
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	00da      	lsls	r2, r3, #3
 8004b36:	4b53      	ldr	r3, [pc, #332]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e018      	b.n	8004b70 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3e:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b50      	ldr	r3, [pc, #320]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	438a      	bics	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fc fdcb 	bl	80016e4 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b54:	f7fc fdc6 	bl	80016e4 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e272      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d1f1      	bne.n	8004b54 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2208      	movs	r2, #8
 8004b76:	4013      	ands	r3, r2
 8004b78:	d036      	beq.n	8004be8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d019      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b86:	4b3f      	ldr	r3, [pc, #252]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004b88:	2101      	movs	r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7fc fda9 	bl	80016e4 <HAL_GetTick>
 8004b92:	0003      	movs	r3, r0
 8004b94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b98:	f7fc fda4 	bl	80016e4 <HAL_GetTick>
 8004b9c:	0002      	movs	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e250      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d0f1      	beq.n	8004b98 <HAL_RCC_OscConfig+0x24c>
 8004bb4:	e018      	b.n	8004be8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb6:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bba:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fc fd8f 	bl	80016e4 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bcc:	f7fc fd8a 	bl	80016e4 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e236      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2202      	movs	r2, #2
 8004be4:	4013      	ands	r3, r2
 8004be6:	d1f1      	bne.n	8004bcc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2204      	movs	r2, #4
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d100      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x2a8>
 8004bf2:	e0b5      	b.n	8004d60 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf4:	201f      	movs	r0, #31
 8004bf6:	183b      	adds	r3, r7, r0
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	055b      	lsls	r3, r3, #21
 8004c04:	4013      	ands	r3, r2
 8004c06:	d110      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	0549      	lsls	r1, r1, #21
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
 8004c16:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	055b      	lsls	r3, r3, #21
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c24:	183b      	adds	r3, r7, r0
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_RCC_OscConfig+0x344>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4013      	ands	r3, r2
 8004c34:	d11a      	bne.n	8004c6c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c36:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <HAL_RCC_OscConfig+0x344>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_RCC_OscConfig+0x344>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0049      	lsls	r1, r1, #1
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c44:	f7fc fd4e 	bl	80016e4 <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4e:	f7fc fd49 	bl	80016e4 <HAL_GetTick>
 8004c52:	0002      	movs	r2, r0
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	; 0x64
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e1f5      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x344>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10f      	bne.n	8004c94 <HAL_RCC_OscConfig+0x348>
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	4b02      	ldr	r3, [pc, #8]	; (8004c84 <HAL_RCC_OscConfig+0x338>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	621a      	str	r2, [r3, #32]
 8004c80:	e036      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3a4>
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40021000 	.word	0x40021000
 8004c88:	fffeffff 	.word	0xfffeffff
 8004c8c:	fffbffff 	.word	0xfffbffff
 8004c90:	40007000 	.word	0x40007000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x36a>
 8004c9c:	4bca      	ldr	r3, [pc, #808]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	4bc9      	ldr	r3, [pc, #804]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	621a      	str	r2, [r3, #32]
 8004ca8:	4bc7      	ldr	r3, [pc, #796]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	4bc6      	ldr	r3, [pc, #792]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cae:	2104      	movs	r1, #4
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	621a      	str	r2, [r3, #32]
 8004cb4:	e01c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3a4>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x38c>
 8004cbe:	4bc2      	ldr	r3, [pc, #776]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	4bc1      	ldr	r3, [pc, #772]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	621a      	str	r2, [r3, #32]
 8004cca:	4bbf      	ldr	r3, [pc, #764]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	4bbe      	ldr	r3, [pc, #760]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	621a      	str	r2, [r3, #32]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3a4>
 8004cd8:	4bbb      	ldr	r3, [pc, #748]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	4bba      	ldr	r3, [pc, #744]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cde:	2101      	movs	r1, #1
 8004ce0:	438a      	bics	r2, r1
 8004ce2:	621a      	str	r2, [r3, #32]
 8004ce4:	4bb8      	ldr	r3, [pc, #736]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	4bb7      	ldr	r3, [pc, #732]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004cea:	2104      	movs	r1, #4
 8004cec:	438a      	bics	r2, r1
 8004cee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d014      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf8:	f7fc fcf4 	bl	80016e4 <HAL_GetTick>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	e009      	b.n	8004d16 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc fcef 	bl	80016e4 <HAL_GetTick>
 8004d06:	0002      	movs	r2, r0
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	4aaf      	ldr	r2, [pc, #700]	; (8004fcc <HAL_RCC_OscConfig+0x680>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e19a      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	4bac      	ldr	r3, [pc, #688]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x3b6>
 8004d20:	e013      	b.n	8004d4a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7fc fcdf 	bl	80016e4 <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2a:	e009      	b.n	8004d40 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2c:	f7fc fcda 	bl	80016e4 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	4aa5      	ldr	r2, [pc, #660]	; (8004fcc <HAL_RCC_OscConfig+0x680>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e185      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d40:	4ba1      	ldr	r3, [pc, #644]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d4a:	231f      	movs	r3, #31
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	4b9b      	ldr	r3, [pc, #620]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d5a:	499d      	ldr	r1, [pc, #628]	; (8004fd0 <HAL_RCC_OscConfig+0x684>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2210      	movs	r2, #16
 8004d66:	4013      	ands	r3, r2
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d12a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d72:	4b95      	ldr	r3, [pc, #596]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	4b94      	ldr	r3, [pc, #592]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d78:	2104      	movs	r1, #4
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d7e:	4b92      	ldr	r3, [pc, #584]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d82:	4b91      	ldr	r3, [pc, #580]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004d84:	2101      	movs	r1, #1
 8004d86:	430a      	orrs	r2, r1
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fc fcab 	bl	80016e4 <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d94:	f7fc fca6 	bl	80016e4 <HAL_GetTick>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e152      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004da6:	4b88      	ldr	r3, [pc, #544]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	2202      	movs	r2, #2
 8004dac:	4013      	ands	r3, r2
 8004dae:	d0f1      	beq.n	8004d94 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004db0:	4b85      	ldr	r3, [pc, #532]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	22f8      	movs	r2, #248	; 0xf8
 8004db6:	4393      	bics	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	00da      	lsls	r2, r3, #3
 8004dc0:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8004dc6:	e034      	b.n	8004e32 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	3305      	adds	r3, #5
 8004dce:	d111      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004dd0:	4b7d      	ldr	r3, [pc, #500]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd4:	4b7c      	ldr	r3, [pc, #496]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dd6:	2104      	movs	r1, #4
 8004dd8:	438a      	bics	r2, r1
 8004dda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ddc:	4b7a      	ldr	r3, [pc, #488]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	22f8      	movs	r2, #248	; 0xf8
 8004de2:	4393      	bics	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	00da      	lsls	r2, r3, #3
 8004dec:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34
 8004df2:	e01e      	b.n	8004e32 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004df4:	4b74      	ldr	r3, [pc, #464]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df8:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004dfa:	2104      	movs	r1, #4
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004e00:	4b71      	ldr	r3, [pc, #452]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	4b70      	ldr	r3, [pc, #448]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e06:	2101      	movs	r1, #1
 8004e08:	438a      	bics	r2, r1
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0c:	f7fc fc6a 	bl	80016e4 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e16:	f7fc fc65 	bl	80016e4 <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e111      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e28:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d1f1      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d05c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004e3c:	4b62      	ldr	r3, [pc, #392]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	220c      	movs	r2, #12
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d00e      	beq.n	8004e66 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004e48:	4b5f      	ldr	r3, [pc, #380]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	220c      	movs	r2, #12
 8004e4e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d114      	bne.n	8004e7e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004e54:	4b5c      	ldr	r3, [pc, #368]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	23c0      	movs	r3, #192	; 0xc0
 8004e5a:	025b      	lsls	r3, r3, #9
 8004e5c:	401a      	ands	r2, r3
 8004e5e:	23c0      	movs	r3, #192	; 0xc0
 8004e60:	025b      	lsls	r3, r3, #9
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d10b      	bne.n	8004e7e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004e66:	4b58      	ldr	r3, [pc, #352]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	025b      	lsls	r3, r3, #9
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d040      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x5a8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d03c      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0e6      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01b      	beq.n	8004ebe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e86:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8a:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004e8c:	2180      	movs	r1, #128	; 0x80
 8004e8e:	0249      	lsls	r1, r1, #9
 8004e90:	430a      	orrs	r2, r1
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fc fc26 	bl	80016e4 <HAL_GetTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e9e:	f7fc fc21 	bl	80016e4 <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0cd      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	025b      	lsls	r3, r3, #9
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x552>
 8004ebc:	e01b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec2:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ec4:	4943      	ldr	r1, [pc, #268]	; (8004fd4 <HAL_RCC_OscConfig+0x688>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fc fc0b 	bl	80016e4 <HAL_GetTick>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed4:	f7fc fc06 	bl	80016e4 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0b2      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	025b      	lsls	r3, r3, #9
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x588>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004ef4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d100      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5b4>
 8004efe:	e0a4      	b.n	800504a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f00:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	220c      	movs	r2, #12
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d100      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5c2>
 8004f0c:	e078      	b.n	8005000 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d14c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f1c:	492e      	ldr	r1, [pc, #184]	; (8004fd8 <HAL_RCC_OscConfig+0x68c>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fc fbdf 	bl	80016e4 <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fc fbda 	bl	80016e4 <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e086      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	049b      	lsls	r3, r3, #18
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	220f      	movs	r2, #15
 8004f50:	4393      	bics	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_RCC_OscConfig+0x690>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	431a      	orrs	r2, r3
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	0449      	lsls	r1, r1, #17
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fc fbad 	bl	80016e4 <HAL_GetTick>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fc fba8 	bl	80016e4 <HAL_GetTick>
 8004f94:	0002      	movs	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e054      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	049b      	lsls	r3, r3, #18
 8004faa:	4013      	ands	r3, r2
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x644>
 8004fae:	e04c      	b.n	800504a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <HAL_RCC_OscConfig+0x67c>)
 8004fb6:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <HAL_RCC_OscConfig+0x68c>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fc fb92 	bl	80016e4 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x6a6>
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	00001388 	.word	0x00001388
 8004fd0:	efffffff 	.word	0xefffffff
 8004fd4:	fffeffff 	.word	0xfffeffff
 8004fd8:	feffffff 	.word	0xfeffffff
 8004fdc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fc fb80 	bl	80016e4 <HAL_GetTick>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e02c      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff2:	4b18      	ldr	r3, [pc, #96]	; (8005054 <HAL_RCC_OscConfig+0x708>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	049b      	lsls	r3, r3, #18
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x694>
 8004ffe:	e024      	b.n	800504a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e01f      	b.n	800504c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_RCC_OscConfig+0x708>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_OscConfig+0x708>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	23c0      	movs	r3, #192	; 0xc0
 800501c:	025b      	lsls	r3, r3, #9
 800501e:	401a      	ands	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	429a      	cmp	r2, r3
 8005026:	d10e      	bne.n	8005046 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	220f      	movs	r2, #15
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d107      	bne.n	8005046 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	23f0      	movs	r3, #240	; 0xf0
 800503a:	039b      	lsls	r3, r3, #14
 800503c:	401a      	ands	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b008      	add	sp, #32
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0bf      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d911      	bls.n	800509e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b5e      	ldr	r3, [pc, #376]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508c:	4b59      	ldr	r3, [pc, #356]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d001      	beq.n	800509e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0a6      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d015      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2204      	movs	r2, #4
 80050ae:	4013      	ands	r3, r2
 80050b0:	d006      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050b2:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80050b8:	21e0      	movs	r1, #224	; 0xe0
 80050ba:	00c9      	lsls	r1, r1, #3
 80050bc:	430a      	orrs	r2, r1
 80050be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b4d      	ldr	r3, [pc, #308]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	22f0      	movs	r2, #240	; 0xf0
 80050c6:	4393      	bics	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	d04c      	beq.n	8005178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b44      	ldr	r3, [pc, #272]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	029b      	lsls	r3, r3, #10
 80050ee:	4013      	ands	r3, r2
 80050f0:	d120      	bne.n	8005134 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07a      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	049b      	lsls	r3, r3, #18
 8005106:	4013      	ands	r3, r2
 8005108:	d114      	bne.n	8005134 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06e      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b03      	cmp	r3, #3
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	4013      	ands	r3, r2
 8005120:	d108      	bne.n	8005134 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e062      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b34      	ldr	r3, [pc, #208]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2202      	movs	r2, #2
 800512c:	4013      	ands	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e05b      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005134:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2203      	movs	r2, #3
 800513a:	4393      	bics	r3, r2
 800513c:	0019      	movs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005148:	f7fc facc 	bl	80016e4 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005150:	e009      	b.n	8005166 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005152:	f7fc fac7 	bl	80016e4 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	4a27      	ldr	r2, [pc, #156]	; (80051fc <HAL_RCC_ClockConfig+0x1a4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e042      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	220c      	movs	r2, #12
 800516c:	401a      	ands	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1ec      	bne.n	8005152 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	4013      	ands	r3, r2
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d211      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	4393      	bics	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_RCC_ClockConfig+0x19c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	4013      	ands	r3, r2
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e020      	b.n	80051ec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2204      	movs	r2, #4
 80051b0:	4013      	ands	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <HAL_RCC_ClockConfig+0x1a8>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	0019      	movs	r1, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80051c8:	f000 f820 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051cc:	0001      	movs	r1, r0
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_RCC_ClockConfig+0x1a0>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	220f      	movs	r2, #15
 80051d6:	4013      	ands	r3, r2
 80051d8:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_RCC_ClockConfig+0x1ac>)
 80051da:	5cd3      	ldrb	r3, [r2, r3]
 80051dc:	000a      	movs	r2, r1
 80051de:	40da      	lsrs	r2, r3
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1b0>)
 80051e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80051e4:	2003      	movs	r0, #3
 80051e6:	f7fc fa37 	bl	8001658 <HAL_InitTick>
  
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b004      	add	sp, #16
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00001388 	.word	0x00001388
 8005200:	fffff8ff 	.word	0xfffff8ff
 8005204:	0800a9a8 	.word	0x0800a9a8
 8005208:	20000004 	.word	0x20000004

0800520c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b08f      	sub	sp, #60	; 0x3c
 8005210:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005212:	2314      	movs	r3, #20
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	4a38      	ldr	r2, [pc, #224]	; (80052f8 <HAL_RCC_GetSysClockFreq+0xec>)
 8005218:	ca13      	ldmia	r2!, {r0, r1, r4}
 800521a:	c313      	stmia	r3!, {r0, r1, r4}
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005220:	1d3b      	adds	r3, r7, #4
 8005222:	4a36      	ldr	r2, [pc, #216]	; (80052fc <HAL_RCC_GetSysClockFreq+0xf0>)
 8005224:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005226:	c313      	stmia	r3!, {r0, r1, r4}
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005230:	2300      	movs	r3, #0
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
 8005234:	2300      	movs	r3, #0
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005240:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	220c      	movs	r2, #12
 800524a:	4013      	ands	r3, r2
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d047      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0xd4>
 8005250:	d849      	bhi.n	80052e6 <HAL_RCC_GetSysClockFreq+0xda>
 8005252:	2b04      	cmp	r3, #4
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x50>
 8005256:	2b08      	cmp	r3, #8
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x56>
 800525a:	e044      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_RCC_GetSysClockFreq+0xf8>)
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005260:	e044      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	220f      	movs	r2, #15
 8005268:	4013      	ands	r3, r2
 800526a:	2214      	movs	r2, #20
 800526c:	18ba      	adds	r2, r7, r2
 800526e:	5cd3      	ldrb	r3, [r2, r3]
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005272:	4b23      	ldr	r3, [pc, #140]	; (8005300 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	220f      	movs	r2, #15
 8005278:	4013      	ands	r3, r2
 800527a:	1d3a      	adds	r2, r7, #4
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005282:	23c0      	movs	r3, #192	; 0xc0
 8005284:	025b      	lsls	r3, r3, #9
 8005286:	401a      	ands	r2, r3
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	025b      	lsls	r3, r3, #9
 800528c:	429a      	cmp	r2, r3
 800528e:	d109      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	481c      	ldr	r0, [pc, #112]	; (8005304 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005294:	f7fa ff4a 	bl	800012c <__udivsi3>
 8005298:	0003      	movs	r3, r0
 800529a:	001a      	movs	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	4353      	muls	r3, r2
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
 80052a2:	e01a      	b.n	80052da <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80052a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a6:	23c0      	movs	r3, #192	; 0xc0
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	401a      	ands	r2, r3
 80052ac:	23c0      	movs	r3, #192	; 0xc0
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d109      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b6:	4814      	ldr	r0, [pc, #80]	; (8005308 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052b8:	f7fa ff38 	bl	800012c <__udivsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	001a      	movs	r2, r3
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	4353      	muls	r3, r2
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	e008      	b.n	80052da <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ca:	4810      	ldr	r0, [pc, #64]	; (800530c <HAL_RCC_GetSysClockFreq+0x100>)
 80052cc:	f7fa ff2e 	bl	800012c <__udivsi3>
 80052d0:	0003      	movs	r3, r0
 80052d2:	001a      	movs	r2, r3
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	4353      	muls	r3, r2
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052de:	e005      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052e4:	e002      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_GetSysClockFreq+0x100>)
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b00f      	add	sp, #60	; 0x3c
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	0800a754 	.word	0x0800a754
 80052fc:	0800a764 	.word	0x0800a764
 8005300:	40021000 	.word	0x40021000
 8005304:	00f42400 	.word	0x00f42400
 8005308:	02dc6c00 	.word	0x02dc6c00
 800530c:	007a1200 	.word	0x007a1200

08005310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	025b      	lsls	r3, r3, #9
 8005328:	4013      	ands	r3, r2
 800532a:	d100      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800532c:	e08e      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800532e:	2017      	movs	r0, #23
 8005330:	183b      	adds	r3, r7, r0
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b6e      	ldr	r3, [pc, #440]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	055b      	lsls	r3, r3, #21
 800533e:	4013      	ands	r3, r2
 8005340:	d110      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b6b      	ldr	r3, [pc, #428]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	0549      	lsls	r1, r1, #21
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
 8005350:	4b67      	ldr	r3, [pc, #412]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	055b      	lsls	r3, r3, #21
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535e:	183b      	adds	r3, r7, r0
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	4b63      	ldr	r3, [pc, #396]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d11a      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005370:	4b60      	ldr	r3, [pc, #384]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	0049      	lsls	r1, r1, #1
 800537a:	430a      	orrs	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537e:	f7fc f9b1 	bl	80016e4 <HAL_GetTick>
 8005382:	0003      	movs	r3, r0
 8005384:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005386:	e008      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005388:	f7fc f9ac 	bl	80016e4 <HAL_GetTick>
 800538c:	0002      	movs	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e0a6      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539a:	4b56      	ldr	r3, [pc, #344]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053a6:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	23c0      	movs	r3, #192	; 0xc0
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d034      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	23c0      	movs	r3, #192	; 0xc0
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4013      	ands	r3, r2
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d02c      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053c8:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	4a4a      	ldr	r2, [pc, #296]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	4b46      	ldr	r3, [pc, #280]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	0249      	lsls	r1, r1, #9
 80053dc:	430a      	orrs	r2, r1
 80053de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053e0:	4b43      	ldr	r3, [pc, #268]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053e6:	4945      	ldr	r1, [pc, #276]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053ec:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	4013      	ands	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fc f973 	bl	80016e4 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	e009      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fc f96e 	bl	80016e4 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4a3c      	ldr	r2, [pc, #240]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e067      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	2202      	movs	r2, #2
 800541e:	4013      	ands	r3, r2
 8005420:	d0f0      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005422:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a34      	ldr	r2, [pc, #208]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005428:	4013      	ands	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005432:	430a      	orrs	r2, r1
 8005434:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005446:	492f      	ldr	r1, [pc, #188]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005448:	400a      	ands	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	2203      	movs	r2, #3
 800545c:	4393      	bics	r3, r2
 800545e:	0019      	movs	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005466:	430a      	orrs	r2, r1
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2202      	movs	r2, #2
 8005470:	4013      	ands	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005474:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4a23      	ldr	r2, [pc, #140]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800547a:	4013      	ands	r3, r2
 800547c:	0019      	movs	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005484:	430a      	orrs	r2, r1
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2220      	movs	r2, #32
 800548e:	4013      	ands	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	2210      	movs	r2, #16
 8005498:	4393      	bics	r3, r2
 800549a:	0019      	movs	r1, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054a2:	430a      	orrs	r2, r1
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	4013      	ands	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	4393      	bics	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054c2:	430a      	orrs	r2, r1
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4013      	ands	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	4393      	bics	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054e2:	430a      	orrs	r2, r1
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b006      	add	sp, #24
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40007000 	.word	0x40007000
 80054f8:	fffffcff 	.word	0xfffffcff
 80054fc:	fffeffff 	.word	0xfffeffff
 8005500:	00001388 	.word	0x00001388
 8005504:	efffffff 	.word	0xefffffff
 8005508:	fffcffff 	.word	0xfffcffff

0800550c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2244      	movs	r2, #68	; 0x44
 8005518:	2100      	movs	r1, #0
 800551a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <USB_EnableGlobalInt+0x28>)
 800551e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	b299      	uxth	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0000bf80 	.word	0x0000bf80

08005538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <USB_DisableGlobalInt+0x30>)
 8005542:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	5a9b      	ldrh	r3, [r3, r2]
 800554a:	b29b      	uxth	r3, r3
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	b292      	uxth	r2, r2
 8005550:	43d2      	mvns	r2, r2
 8005552:	b292      	uxth	r2, r2
 8005554:	4013      	ands	r3, r2
 8005556:	b299      	uxth	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2240      	movs	r2, #64	; 0x40
 800555c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b004      	add	sp, #16
 8005566:	bd80      	pop	{r7, pc}
 8005568:	0000bf80 	.word	0x0000bf80

0800556c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800556c:	b084      	sub	sp, #16
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	46c6      	mov	lr, r8
 8005572:	b500      	push	{lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	2004      	movs	r0, #4
 800557c:	2410      	movs	r4, #16
 800557e:	46a4      	mov	ip, r4
 8005580:	2408      	movs	r4, #8
 8005582:	46a0      	mov	r8, r4
 8005584:	44b8      	add	r8, r7
 8005586:	44c4      	add	ip, r8
 8005588:	4460      	add	r0, ip
 800558a:	6001      	str	r1, [r0, #0]
 800558c:	6042      	str	r2, [r0, #4]
 800558e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2240      	movs	r2, #64	; 0x40
 8005594:	2101      	movs	r1, #1
 8005596:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2240      	movs	r2, #64	; 0x40
 800559c:	2100      	movs	r1, #0
 800559e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2244      	movs	r2, #68	; 0x44
 80055a4:	2100      	movs	r1, #0
 80055a6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2250      	movs	r2, #80	; 0x50
 80055ac:	2100      	movs	r1, #0
 80055ae:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b002      	add	sp, #8
 80055b8:	bc80      	pop	{r7}
 80055ba:	46b8      	mov	r8, r7
 80055bc:	bc90      	pop	{r4, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	b004      	add	sp, #16
 80055c2:	4718      	bx	r3

080055c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b09c      	sub	sp, #112	; 0x70
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ce:	236f      	movs	r3, #111	; 0x6f
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	18d3      	adds	r3, r2, r3
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	236c      	movs	r3, #108	; 0x6c
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	49cf      	ldr	r1, [pc, #828]	; (8005928 <USB_ActivateEndpoint+0x364>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	78db      	ldrb	r3, [r3, #3]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d017      	beq.n	8005626 <USB_ActivateEndpoint+0x62>
 80055f6:	dc28      	bgt.n	800564a <USB_ActivateEndpoint+0x86>
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d00e      	beq.n	800561a <USB_ActivateEndpoint+0x56>
 80055fc:	dc25      	bgt.n	800564a <USB_ActivateEndpoint+0x86>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <USB_ActivateEndpoint+0x44>
 8005602:	2b01      	cmp	r3, #1
 8005604:	d018      	beq.n	8005638 <USB_ActivateEndpoint+0x74>
 8005606:	e020      	b.n	800564a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005608:	226c      	movs	r2, #108	; 0x6c
 800560a:	18bb      	adds	r3, r7, r2
 800560c:	18ba      	adds	r2, r7, r2
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	0089      	lsls	r1, r1, #2
 8005614:	430a      	orrs	r2, r1
 8005616:	801a      	strh	r2, [r3, #0]
      break;
 8005618:	e01c      	b.n	8005654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800561a:	226c      	movs	r2, #108	; 0x6c
 800561c:	18bb      	adds	r3, r7, r2
 800561e:	18ba      	adds	r2, r7, r2
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	801a      	strh	r2, [r3, #0]
      break;
 8005624:	e016      	b.n	8005654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005626:	226c      	movs	r2, #108	; 0x6c
 8005628:	18bb      	adds	r3, r7, r2
 800562a:	18ba      	adds	r2, r7, r2
 800562c:	8812      	ldrh	r2, [r2, #0]
 800562e:	21c0      	movs	r1, #192	; 0xc0
 8005630:	00c9      	lsls	r1, r1, #3
 8005632:	430a      	orrs	r2, r1
 8005634:	801a      	strh	r2, [r3, #0]
      break;
 8005636:	e00d      	b.n	8005654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005638:	226c      	movs	r2, #108	; 0x6c
 800563a:	18bb      	adds	r3, r7, r2
 800563c:	18ba      	adds	r2, r7, r2
 800563e:	8812      	ldrh	r2, [r2, #0]
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	00c9      	lsls	r1, r1, #3
 8005644:	430a      	orrs	r2, r1
 8005646:	801a      	strh	r2, [r3, #0]
      break;
 8005648:	e004      	b.n	8005654 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800564a:	236f      	movs	r3, #111	; 0x6f
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
      break;
 8005652:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	226c      	movs	r2, #108	; 0x6c
 8005660:	18ba      	adds	r2, r7, r2
 8005662:	8812      	ldrh	r2, [r2, #0]
 8005664:	49b1      	ldr	r1, [pc, #708]	; (800592c <USB_ActivateEndpoint+0x368>)
 8005666:	430a      	orrs	r2, r1
 8005668:	b292      	uxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	b21b      	sxth	r3, r3
 800567c:	4aac      	ldr	r2, [pc, #688]	; (8005930 <USB_ActivateEndpoint+0x36c>)
 800567e:	4013      	ands	r3, r2
 8005680:	b21a      	sxth	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b21b      	sxth	r3, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	b21a      	sxth	r2, r3
 800568c:	2166      	movs	r1, #102	; 0x66
 800568e:	187b      	adds	r3, r7, r1
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	18d3      	adds	r3, r2, r3
 800569c:	187a      	adds	r2, r7, r1
 800569e:	8812      	ldrh	r2, [r2, #0]
 80056a0:	49a2      	ldr	r1, [pc, #648]	; (800592c <USB_ActivateEndpoint+0x368>)
 80056a2:	430a      	orrs	r2, r1
 80056a4:	b292      	uxth	r2, r2
 80056a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	7b1b      	ldrb	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d000      	beq.n	80056b2 <USB_ActivateEndpoint+0xee>
 80056b0:	e150      	b.n	8005954 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d100      	bne.n	80056bc <USB_ActivateEndpoint+0xf8>
 80056ba:	e07a      	b.n	80057b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2250      	movs	r2, #80	; 0x50
 80056c4:	5a9b      	ldrh	r3, [r3, r2]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	001a      	movs	r2, r3
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	00da      	lsls	r2, r3, #3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	18d3      	adds	r3, r2, r3
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	00d2      	lsls	r2, r2, #3
 80056de:	4694      	mov	ip, r2
 80056e0:	4463      	add	r3, ip
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	18db      	adds	r3, r3, r3
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	18d2      	adds	r2, r2, r3
 80056fe:	2112      	movs	r1, #18
 8005700:	187b      	adds	r3, r7, r1
 8005702:	8812      	ldrh	r2, [r2, #0]
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	187b      	adds	r3, r7, r1
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	4013      	ands	r3, r2
 800570e:	d016      	beq.n	800573e <USB_ActivateEndpoint+0x17a>
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	18d3      	adds	r3, r2, r3
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29a      	uxth	r2, r3
 800571e:	2010      	movs	r0, #16
 8005720:	183b      	adds	r3, r7, r0
 8005722:	4983      	ldr	r1, [pc, #524]	; (8005930 <USB_ActivateEndpoint+0x36c>)
 8005724:	400a      	ands	r2, r1
 8005726:	801a      	strh	r2, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	18d3      	adds	r3, r2, r3
 8005732:	183a      	adds	r2, r7, r0
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	497f      	ldr	r1, [pc, #508]	; (8005934 <USB_ActivateEndpoint+0x370>)
 8005738:	430a      	orrs	r2, r1
 800573a:	b292      	uxth	r2, r2
 800573c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	78db      	ldrb	r3, [r3, #3]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d01d      	beq.n	8005782 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	18d3      	adds	r3, r2, r3
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29a      	uxth	r2, r3
 8005754:	200c      	movs	r0, #12
 8005756:	183b      	adds	r3, r7, r0
 8005758:	4977      	ldr	r1, [pc, #476]	; (8005938 <USB_ActivateEndpoint+0x374>)
 800575a:	400a      	ands	r2, r1
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	183b      	adds	r3, r7, r0
 8005760:	183a      	adds	r2, r7, r0
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	2120      	movs	r1, #32
 8005766:	404a      	eors	r2, r1
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	183a      	adds	r2, r7, r0
 8005776:	8812      	ldrh	r2, [r2, #0]
 8005778:	496c      	ldr	r1, [pc, #432]	; (800592c <USB_ActivateEndpoint+0x368>)
 800577a:	430a      	orrs	r2, r1
 800577c:	b292      	uxth	r2, r2
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e27a      	b.n	8005c78 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	18d3      	adds	r3, r2, r3
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29a      	uxth	r2, r3
 8005790:	200e      	movs	r0, #14
 8005792:	183b      	adds	r3, r7, r0
 8005794:	4968      	ldr	r1, [pc, #416]	; (8005938 <USB_ActivateEndpoint+0x374>)
 8005796:	400a      	ands	r2, r1
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	183a      	adds	r2, r7, r0
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	4960      	ldr	r1, [pc, #384]	; (800592c <USB_ActivateEndpoint+0x368>)
 80057aa:	430a      	orrs	r2, r1
 80057ac:	b292      	uxth	r2, r2
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e262      	b.n	8005c78 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2250      	movs	r2, #80	; 0x50
 80057ba:	5a9b      	ldrh	r3, [r3, r2]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	001a      	movs	r2, r3
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	633b      	str	r3, [r7, #48]	; 0x30
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00da      	lsls	r2, r3, #3
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	18d3      	adds	r3, r2, r3
 80057d0:	4a5a      	ldr	r2, [pc, #360]	; (800593c <USB_ActivateEndpoint+0x378>)
 80057d2:	4694      	mov	ip, r2
 80057d4:	4463      	add	r3, ip
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	88db      	ldrh	r3, [r3, #6]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	18db      	adds	r3, r3, r3
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2250      	movs	r2, #80	; 0x50
 80057f0:	5a9b      	ldrh	r3, [r3, r2]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	001a      	movs	r2, r3
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	00da      	lsls	r2, r3, #3
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	18d3      	adds	r3, r2, r3
 8005806:	4a4e      	ldr	r2, [pc, #312]	; (8005940 <USB_ActivateEndpoint+0x37c>)
 8005808:	4694      	mov	ip, r2
 800580a:	4463      	add	r3, ip
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d110      	bne.n	8005838 <USB_ActivateEndpoint+0x274>
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4a49      	ldr	r2, [pc, #292]	; (8005944 <USB_ActivateEndpoint+0x380>)
 800581e:	4013      	ands	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	4a46      	ldr	r2, [pc, #280]	; (8005948 <USB_ActivateEndpoint+0x384>)
 800582e:	4313      	orrs	r3, r2
 8005830:	b29a      	uxth	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e02b      	b.n	8005890 <USB_ActivateEndpoint+0x2cc>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b3e      	cmp	r3, #62	; 0x3e
 800583e:	d812      	bhi.n	8005866 <USB_ActivateEndpoint+0x2a2>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	66bb      	str	r3, [r7, #104]	; 0x68
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2201      	movs	r2, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d002      	beq.n	8005858 <USB_ActivateEndpoint+0x294>
 8005852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005854:	3301      	adds	r3, #1
 8005856:	66bb      	str	r3, [r7, #104]	; 0x68
 8005858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29a      	uxth	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e014      	b.n	8005890 <USB_ActivateEndpoint+0x2cc>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	66bb      	str	r3, [r7, #104]	; 0x68
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	221f      	movs	r2, #31
 8005874:	4013      	ands	r3, r2
 8005876:	d102      	bne.n	800587e <USB_ActivateEndpoint+0x2ba>
 8005878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587a:	3b01      	subs	r3, #1
 800587c:	66bb      	str	r3, [r7, #104]	; 0x68
 800587e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <USB_ActivateEndpoint+0x384>)
 8005888:	4313      	orrs	r3, r2
 800588a:	b29a      	uxth	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	18d2      	adds	r2, r2, r3
 800589a:	2122      	movs	r1, #34	; 0x22
 800589c:	187b      	adds	r3, r7, r1
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	187b      	adds	r3, r7, r1
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	01db      	lsls	r3, r3, #7
 80058aa:	4013      	ands	r3, r2
 80058ac:	d016      	beq.n	80058dc <USB_ActivateEndpoint+0x318>
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18d3      	adds	r3, r2, r3
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	2020      	movs	r0, #32
 80058be:	183b      	adds	r3, r7, r0
 80058c0:	491b      	ldr	r1, [pc, #108]	; (8005930 <USB_ActivateEndpoint+0x36c>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	18d3      	adds	r3, r2, r3
 80058d0:	183a      	adds	r2, r7, r0
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	491d      	ldr	r1, [pc, #116]	; (800594c <USB_ActivateEndpoint+0x388>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	b292      	uxth	r2, r2
 80058da:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	18d3      	adds	r3, r2, r3
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	201e      	movs	r0, #30
 80058ec:	183b      	adds	r3, r7, r0
 80058ee:	4918      	ldr	r1, [pc, #96]	; (8005950 <USB_ActivateEndpoint+0x38c>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	183a      	adds	r2, r7, r0
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	0149      	lsls	r1, r1, #5
 80058fe:	404a      	eors	r2, r1
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	183b      	adds	r3, r7, r0
 8005904:	183a      	adds	r2, r7, r0
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	0189      	lsls	r1, r1, #6
 800590c:	404a      	eors	r2, r1
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	183a      	adds	r2, r7, r0
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	4903      	ldr	r1, [pc, #12]	; (800592c <USB_ActivateEndpoint+0x368>)
 8005920:	430a      	orrs	r2, r1
 8005922:	b292      	uxth	r2, r2
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e1a7      	b.n	8005c78 <USB_ActivateEndpoint+0x6b4>
 8005928:	ffff898f 	.word	0xffff898f
 800592c:	ffff8080 	.word	0xffff8080
 8005930:	ffff8f8f 	.word	0xffff8f8f
 8005934:	ffff80c0 	.word	0xffff80c0
 8005938:	ffff8fbf 	.word	0xffff8fbf
 800593c:	00000404 	.word	0x00000404
 8005940:	00000406 	.word	0x00000406
 8005944:	ffff83ff 	.word	0xffff83ff
 8005948:	ffff8000 	.word	0xffff8000
 800594c:	ffffc080 	.word	0xffffc080
 8005950:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d117      	bne.n	800598c <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29a      	uxth	r2, r3
 800596a:	2062      	movs	r0, #98	; 0x62
 800596c:	183b      	adds	r3, r7, r0
 800596e:	49c6      	ldr	r1, [pc, #792]	; (8005c88 <USB_ActivateEndpoint+0x6c4>)
 8005970:	400a      	ands	r2, r1
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	18d3      	adds	r3, r2, r3
 800597e:	183a      	adds	r2, r7, r0
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	49c2      	ldr	r1, [pc, #776]	; (8005c8c <USB_ActivateEndpoint+0x6c8>)
 8005984:	430a      	orrs	r2, r1
 8005986:	b292      	uxth	r2, r2
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e016      	b.n	80059ba <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	18d3      	adds	r3, r2, r3
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29a      	uxth	r2, r3
 800599a:	2064      	movs	r0, #100	; 0x64
 800599c:	183b      	adds	r3, r7, r0
 800599e:	49bc      	ldr	r1, [pc, #752]	; (8005c90 <USB_ActivateEndpoint+0x6cc>)
 80059a0:	400a      	ands	r2, r1
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	183a      	adds	r2, r7, r0
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	49b8      	ldr	r1, [pc, #736]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	b292      	uxth	r2, r2
 80059b8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2250      	movs	r2, #80	; 0x50
 80059c2:	5a9b      	ldrh	r3, [r3, r2]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	001a      	movs	r2, r3
 80059c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ca:	189b      	adds	r3, r3, r2
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00da      	lsls	r2, r3, #3
 80059d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d6:	18d3      	adds	r3, r2, r3
 80059d8:	2280      	movs	r2, #128	; 0x80
 80059da:	00d2      	lsls	r2, r2, #3
 80059dc:	4694      	mov	ip, r2
 80059de:	4463      	add	r3, ip
 80059e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	891b      	ldrh	r3, [r3, #8]
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	18db      	adds	r3, r3, r3
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	657b      	str	r3, [r7, #84]	; 0x54
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2250      	movs	r2, #80	; 0x50
 80059fa:	5a9b      	ldrh	r3, [r3, r2]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	001a      	movs	r2, r3
 8005a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	657b      	str	r3, [r7, #84]	; 0x54
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00da      	lsls	r2, r3, #3
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	4aa1      	ldr	r2, [pc, #644]	; (8005c98 <USB_ActivateEndpoint+0x6d4>)
 8005a12:	4694      	mov	ip, r2
 8005a14:	4463      	add	r3, ip
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	895b      	ldrh	r3, [r3, #10]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	18db      	adds	r3, r3, r3
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d000      	beq.n	8005a32 <USB_ActivateEndpoint+0x46e>
 8005a30:	e087      	b.n	8005b42 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	18d2      	adds	r2, r2, r3
 8005a3c:	2140      	movs	r1, #64	; 0x40
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	881a      	ldrh	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	01db      	lsls	r3, r3, #7
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d016      	beq.n	8005a7e <USB_ActivateEndpoint+0x4ba>
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	18d3      	adds	r3, r2, r3
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	203e      	movs	r0, #62	; 0x3e
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	4989      	ldr	r1, [pc, #548]	; (8005c88 <USB_ActivateEndpoint+0x6c4>)
 8005a64:	400a      	ands	r2, r1
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	18d3      	adds	r3, r2, r3
 8005a72:	183a      	adds	r2, r7, r0
 8005a74:	8812      	ldrh	r2, [r2, #0]
 8005a76:	4989      	ldr	r1, [pc, #548]	; (8005c9c <USB_ActivateEndpoint+0x6d8>)
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	18d2      	adds	r2, r2, r3
 8005a88:	213c      	movs	r1, #60	; 0x3c
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	2240      	movs	r2, #64	; 0x40
 8005a96:	4013      	ands	r3, r2
 8005a98:	d016      	beq.n	8005ac8 <USB_ActivateEndpoint+0x504>
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	18d3      	adds	r3, r2, r3
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	203a      	movs	r0, #58	; 0x3a
 8005aaa:	183b      	adds	r3, r7, r0
 8005aac:	4976      	ldr	r1, [pc, #472]	; (8005c88 <USB_ActivateEndpoint+0x6c4>)
 8005aae:	400a      	ands	r2, r1
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	18d3      	adds	r3, r2, r3
 8005abc:	183a      	adds	r2, r7, r0
 8005abe:	8812      	ldrh	r2, [r2, #0]
 8005ac0:	4977      	ldr	r1, [pc, #476]	; (8005ca0 <USB_ActivateEndpoint+0x6dc>)
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	b292      	uxth	r2, r2
 8005ac6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	18d3      	adds	r3, r2, r3
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	2038      	movs	r0, #56	; 0x38
 8005ad8:	183b      	adds	r3, r7, r0
 8005ada:	4972      	ldr	r1, [pc, #456]	; (8005ca4 <USB_ActivateEndpoint+0x6e0>)
 8005adc:	400a      	ands	r2, r1
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	183b      	adds	r3, r7, r0
 8005ae2:	183a      	adds	r2, r7, r0
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	0149      	lsls	r1, r1, #5
 8005aea:	404a      	eors	r2, r1
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	183b      	adds	r3, r7, r0
 8005af0:	183a      	adds	r2, r7, r0
 8005af2:	8812      	ldrh	r2, [r2, #0]
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	0189      	lsls	r1, r1, #6
 8005af8:	404a      	eors	r2, r1
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	18d3      	adds	r3, r2, r3
 8005b06:	183a      	adds	r2, r7, r0
 8005b08:	8812      	ldrh	r2, [r2, #0]
 8005b0a:	4962      	ldr	r1, [pc, #392]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	b292      	uxth	r2, r2
 8005b10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	2036      	movs	r0, #54	; 0x36
 8005b22:	183b      	adds	r3, r7, r0
 8005b24:	4960      	ldr	r1, [pc, #384]	; (8005ca8 <USB_ActivateEndpoint+0x6e4>)
 8005b26:	400a      	ands	r2, r1
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	18d3      	adds	r3, r2, r3
 8005b34:	183a      	adds	r2, r7, r0
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	4956      	ldr	r1, [pc, #344]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e09a      	b.n	8005c78 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	18d2      	adds	r2, r2, r3
 8005b4c:	214e      	movs	r1, #78	; 0x4e
 8005b4e:	187b      	adds	r3, r7, r1
 8005b50:	8812      	ldrh	r2, [r2, #0]
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	881a      	ldrh	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d016      	beq.n	8005b8e <USB_ActivateEndpoint+0x5ca>
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	204c      	movs	r0, #76	; 0x4c
 8005b70:	183b      	adds	r3, r7, r0
 8005b72:	4945      	ldr	r1, [pc, #276]	; (8005c88 <USB_ActivateEndpoint+0x6c4>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	183a      	adds	r2, r7, r0
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	4945      	ldr	r1, [pc, #276]	; (8005c9c <USB_ActivateEndpoint+0x6d8>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	18d2      	adds	r2, r2, r3
 8005b98:	214a      	movs	r1, #74	; 0x4a
 8005b9a:	187b      	adds	r3, r7, r1
 8005b9c:	8812      	ldrh	r2, [r2, #0]
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	2240      	movs	r2, #64	; 0x40
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d016      	beq.n	8005bd8 <USB_ActivateEndpoint+0x614>
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	18d3      	adds	r3, r2, r3
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	2048      	movs	r0, #72	; 0x48
 8005bba:	183b      	adds	r3, r7, r0
 8005bbc:	4932      	ldr	r1, [pc, #200]	; (8005c88 <USB_ActivateEndpoint+0x6c4>)
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	18d3      	adds	r3, r2, r3
 8005bcc:	183a      	adds	r2, r7, r0
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	4933      	ldr	r1, [pc, #204]	; (8005ca0 <USB_ActivateEndpoint+0x6dc>)
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d01d      	beq.n	8005c1c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	2044      	movs	r0, #68	; 0x44
 8005bf0:	183b      	adds	r3, r7, r0
 8005bf2:	492d      	ldr	r1, [pc, #180]	; (8005ca8 <USB_ActivateEndpoint+0x6e4>)
 8005bf4:	400a      	ands	r2, r1
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	183b      	adds	r3, r7, r0
 8005bfa:	183a      	adds	r2, r7, r0
 8005bfc:	8812      	ldrh	r2, [r2, #0]
 8005bfe:	2120      	movs	r1, #32
 8005c00:	404a      	eors	r2, r1
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	183a      	adds	r2, r7, r0
 8005c10:	8812      	ldrh	r2, [r2, #0]
 8005c12:	4920      	ldr	r1, [pc, #128]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	b292      	uxth	r2, r2
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	e016      	b.n	8005c4a <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	18d3      	adds	r3, r2, r3
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	2046      	movs	r0, #70	; 0x46
 8005c2c:	183b      	adds	r3, r7, r0
 8005c2e:	491e      	ldr	r1, [pc, #120]	; (8005ca8 <USB_ActivateEndpoint+0x6e4>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	18d3      	adds	r3, r2, r3
 8005c3e:	183a      	adds	r2, r7, r0
 8005c40:	8812      	ldrh	r2, [r2, #0]
 8005c42:	4914      	ldr	r1, [pc, #80]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 8005c44:	430a      	orrs	r2, r1
 8005c46:	b292      	uxth	r2, r2
 8005c48:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	18d3      	adds	r3, r2, r3
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	2042      	movs	r0, #66	; 0x42
 8005c5a:	183b      	adds	r3, r7, r0
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <USB_ActivateEndpoint+0x6e0>)
 8005c5e:	400a      	ands	r2, r1
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	18d3      	adds	r3, r2, r3
 8005c6c:	183a      	adds	r2, r7, r0
 8005c6e:	8812      	ldrh	r2, [r2, #0]
 8005c70:	4908      	ldr	r1, [pc, #32]	; (8005c94 <USB_ActivateEndpoint+0x6d0>)
 8005c72:	430a      	orrs	r2, r1
 8005c74:	b292      	uxth	r2, r2
 8005c76:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005c78:	236f      	movs	r3, #111	; 0x6f
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	781b      	ldrb	r3, [r3, #0]
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b01c      	add	sp, #112	; 0x70
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	ffff8f8f 	.word	0xffff8f8f
 8005c8c:	ffff8180 	.word	0xffff8180
 8005c90:	ffff8e8f 	.word	0xffff8e8f
 8005c94:	ffff8080 	.word	0xffff8080
 8005c98:	00000404 	.word	0x00000404
 8005c9c:	ffffc080 	.word	0xffffc080
 8005ca0:	ffff80c0 	.word	0xffff80c0
 8005ca4:	ffffbf8f 	.word	0xffffbf8f
 8005ca8:	ffff8fbf 	.word	0xffff8fbf

08005cac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	7b1b      	ldrb	r3, [r3, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d000      	beq.n	8005cc0 <USB_DeactivateEndpoint+0x14>
 8005cbe:	e07e      	b.n	8005dbe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d03c      	beq.n	8005d42 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	18d2      	adds	r2, r2, r3
 8005cd2:	210c      	movs	r1, #12
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	8812      	ldrh	r2, [r2, #0]
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d016      	beq.n	8005d12 <USB_DeactivateEndpoint+0x66>
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	18d3      	adds	r3, r2, r3
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	200a      	movs	r0, #10
 8005cf4:	183b      	adds	r3, r7, r0
 8005cf6:	49c7      	ldr	r1, [pc, #796]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	183a      	adds	r2, r7, r0
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	49c3      	ldr	r1, [pc, #780]	; (8006018 <USB_DeactivateEndpoint+0x36c>)
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	18d3      	adds	r3, r2, r3
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	2008      	movs	r0, #8
 8005d22:	183b      	adds	r3, r7, r0
 8005d24:	49bd      	ldr	r1, [pc, #756]	; (800601c <USB_DeactivateEndpoint+0x370>)
 8005d26:	400a      	ands	r2, r1
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	18d3      	adds	r3, r2, r3
 8005d34:	183a      	adds	r2, r7, r0
 8005d36:	8812      	ldrh	r2, [r2, #0]
 8005d38:	49b9      	ldr	r1, [pc, #740]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	b292      	uxth	r2, r2
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e163      	b.n	800600a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	18d2      	adds	r2, r2, r3
 8005d4c:	2112      	movs	r1, #18
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	8812      	ldrh	r2, [r2, #0]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	01db      	lsls	r3, r3, #7
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d016      	beq.n	8005d8e <USB_DeactivateEndpoint+0xe2>
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	2010      	movs	r0, #16
 8005d70:	183b      	adds	r3, r7, r0
 8005d72:	49a8      	ldr	r1, [pc, #672]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	18d3      	adds	r3, r2, r3
 8005d82:	183a      	adds	r2, r7, r0
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	49a7      	ldr	r1, [pc, #668]	; (8006024 <USB_DeactivateEndpoint+0x378>)
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	18d3      	adds	r3, r2, r3
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	200e      	movs	r0, #14
 8005d9e:	183b      	adds	r3, r7, r0
 8005da0:	49a1      	ldr	r1, [pc, #644]	; (8006028 <USB_DeactivateEndpoint+0x37c>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	18d3      	adds	r3, r2, r3
 8005db0:	183a      	adds	r2, r7, r0
 8005db2:	8812      	ldrh	r2, [r2, #0]
 8005db4:	499a      	ldr	r1, [pc, #616]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	b292      	uxth	r2, r2
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e125      	b.n	800600a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d000      	beq.n	8005dc8 <USB_DeactivateEndpoint+0x11c>
 8005dc6:	e090      	b.n	8005eea <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	18d2      	adds	r2, r2, r3
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	8812      	ldrh	r2, [r2, #0]
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	881a      	ldrh	r2, [r3, #0]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	01db      	lsls	r3, r3, #7
 8005de2:	4013      	ands	r3, r2
 8005de4:	d016      	beq.n	8005e14 <USB_DeactivateEndpoint+0x168>
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	201e      	movs	r0, #30
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	4986      	ldr	r1, [pc, #536]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	18d3      	adds	r3, r2, r3
 8005e08:	183a      	adds	r2, r7, r0
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	4985      	ldr	r1, [pc, #532]	; (8006024 <USB_DeactivateEndpoint+0x378>)
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	b292      	uxth	r2, r2
 8005e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	18d2      	adds	r2, r2, r3
 8005e1e:	211c      	movs	r1, #28
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	2240      	movs	r2, #64	; 0x40
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d016      	beq.n	8005e5e <USB_DeactivateEndpoint+0x1b2>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	18d3      	adds	r3, r2, r3
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	201a      	movs	r0, #26
 8005e40:	183b      	adds	r3, r7, r0
 8005e42:	4974      	ldr	r1, [pc, #464]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	18d3      	adds	r3, r2, r3
 8005e52:	183a      	adds	r2, r7, r0
 8005e54:	8812      	ldrh	r2, [r2, #0]
 8005e56:	4970      	ldr	r1, [pc, #448]	; (8006018 <USB_DeactivateEndpoint+0x36c>)
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	18d3      	adds	r3, r2, r3
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	2018      	movs	r0, #24
 8005e6e:	183b      	adds	r3, r7, r0
 8005e70:	4968      	ldr	r1, [pc, #416]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	18d3      	adds	r3, r2, r3
 8005e80:	183a      	adds	r2, r7, r0
 8005e82:	8812      	ldrh	r2, [r2, #0]
 8005e84:	4964      	ldr	r1, [pc, #400]	; (8006018 <USB_DeactivateEndpoint+0x36c>)
 8005e86:	430a      	orrs	r2, r1
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	2016      	movs	r0, #22
 8005e9c:	183b      	adds	r3, r7, r0
 8005e9e:	4962      	ldr	r1, [pc, #392]	; (8006028 <USB_DeactivateEndpoint+0x37c>)
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	183a      	adds	r2, r7, r0
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	495b      	ldr	r1, [pc, #364]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	2014      	movs	r0, #20
 8005eca:	183b      	adds	r3, r7, r0
 8005ecc:	4953      	ldr	r1, [pc, #332]	; (800601c <USB_DeactivateEndpoint+0x370>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	18d3      	adds	r3, r2, r3
 8005edc:	183a      	adds	r2, r7, r0
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	494f      	ldr	r1, [pc, #316]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e08f      	b.n	800600a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	18d2      	adds	r2, r2, r3
 8005ef4:	212e      	movs	r1, #46	; 0x2e
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	8812      	ldrh	r2, [r2, #0]
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	4013      	ands	r3, r2
 8005f06:	d016      	beq.n	8005f36 <USB_DeactivateEndpoint+0x28a>
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	18d3      	adds	r3, r2, r3
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	202c      	movs	r0, #44	; 0x2c
 8005f18:	183b      	adds	r3, r7, r0
 8005f1a:	493e      	ldr	r1, [pc, #248]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	18d3      	adds	r3, r2, r3
 8005f2a:	183a      	adds	r2, r7, r0
 8005f2c:	8812      	ldrh	r2, [r2, #0]
 8005f2e:	493d      	ldr	r1, [pc, #244]	; (8006024 <USB_DeactivateEndpoint+0x378>)
 8005f30:	430a      	orrs	r2, r1
 8005f32:	b292      	uxth	r2, r2
 8005f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	18d2      	adds	r2, r2, r3
 8005f40:	212a      	movs	r1, #42	; 0x2a
 8005f42:	187b      	adds	r3, r7, r1
 8005f44:	8812      	ldrh	r2, [r2, #0]
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	2240      	movs	r2, #64	; 0x40
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d016      	beq.n	8005f80 <USB_DeactivateEndpoint+0x2d4>
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	18d3      	adds	r3, r2, r3
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	2028      	movs	r0, #40	; 0x28
 8005f62:	183b      	adds	r3, r7, r0
 8005f64:	492b      	ldr	r1, [pc, #172]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005f66:	400a      	ands	r2, r1
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	18d3      	adds	r3, r2, r3
 8005f74:	183a      	adds	r2, r7, r0
 8005f76:	8812      	ldrh	r2, [r2, #0]
 8005f78:	4927      	ldr	r1, [pc, #156]	; (8006018 <USB_DeactivateEndpoint+0x36c>)
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	18d3      	adds	r3, r2, r3
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	2026      	movs	r0, #38	; 0x26
 8005f90:	183b      	adds	r3, r7, r0
 8005f92:	4920      	ldr	r1, [pc, #128]	; (8006014 <USB_DeactivateEndpoint+0x368>)
 8005f94:	400a      	ands	r2, r1
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	18d3      	adds	r3, r2, r3
 8005fa2:	183a      	adds	r2, r7, r0
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	491f      	ldr	r1, [pc, #124]	; (8006024 <USB_DeactivateEndpoint+0x378>)
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	b292      	uxth	r2, r2
 8005fac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	18d3      	adds	r3, r2, r3
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	2024      	movs	r0, #36	; 0x24
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	4916      	ldr	r1, [pc, #88]	; (800601c <USB_DeactivateEndpoint+0x370>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	18d3      	adds	r3, r2, r3
 8005fd0:	183a      	adds	r2, r7, r0
 8005fd2:	8812      	ldrh	r2, [r2, #0]
 8005fd4:	4912      	ldr	r1, [pc, #72]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	18d3      	adds	r3, r2, r3
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	2022      	movs	r0, #34	; 0x22
 8005fec:	183b      	adds	r3, r7, r0
 8005fee:	490e      	ldr	r1, [pc, #56]	; (8006028 <USB_DeactivateEndpoint+0x37c>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	183a      	adds	r2, r7, r0
 8006000:	8812      	ldrh	r2, [r2, #0]
 8006002:	4907      	ldr	r1, [pc, #28]	; (8006020 <USB_DeactivateEndpoint+0x374>)
 8006004:	430a      	orrs	r2, r1
 8006006:	b292      	uxth	r2, r2
 8006008:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b00c      	add	sp, #48	; 0x30
 8006012:	bd80      	pop	{r7, pc}
 8006014:	ffff8f8f 	.word	0xffff8f8f
 8006018:	ffff80c0 	.word	0xffff80c0
 800601c:	ffff8fbf 	.word	0xffff8fbf
 8006020:	ffff8080 	.word	0xffff8080
 8006024:	ffffc080 	.word	0xffffc080
 8006028:	ffffbf8f 	.word	0xffffbf8f

0800602c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b0c3      	sub	sp, #268	; 0x10c
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d001      	beq.n	8006042 <USB_EPStartXfer+0x16>
 800603e:	f000 fcef 	bl	8006a20 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d905      	bls.n	800605a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	1d7a      	adds	r2, r7, #5
 8006054:	32ff      	adds	r2, #255	; 0xff
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	e004      	b.n	8006064 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	1d7a      	adds	r2, r7, #5
 8006060:	32ff      	adds	r2, #255	; 0xff
 8006062:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	7b1b      	ldrb	r3, [r3, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d125      	bne.n	80060b8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6959      	ldr	r1, [r3, #20]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	88da      	ldrh	r2, [r3, #6]
 8006074:	1d7b      	adds	r3, r7, #5
 8006076:	33ff      	adds	r3, #255	; 0xff
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f9c9 	bl	8007414 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2250      	movs	r2, #80	; 0x50
 800608a:	5a9b      	ldrh	r3, [r3, r2]
 800608c:	b29b      	uxth	r3, r3
 800608e:	001a      	movs	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	189b      	adds	r3, r3, r2
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	00da      	lsls	r2, r3, #3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	4acc      	ldr	r2, [pc, #816]	; (80063d4 <USB_EPStartXfer+0x3a8>)
 80060a2:	4694      	mov	ip, r2
 80060a4:	4463      	add	r3, ip
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	1d7b      	adds	r3, r7, #5
 80060aa:	33ff      	adds	r3, #255	; 0xff
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	f000 fc8f 	bl	80069d6 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d000      	beq.n	80060c2 <USB_EPStartXfer+0x96>
 80060c0:	e33a      	b.n	8006738 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d800      	bhi.n	80060d0 <USB_EPStartXfer+0xa4>
 80060ce:	e2df      	b.n	8006690 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	18d3      	adds	r3, r2, r3
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	2056      	movs	r0, #86	; 0x56
 80060e0:	183b      	adds	r3, r7, r0
 80060e2:	49bd      	ldr	r1, [pc, #756]	; (80063d8 <USB_EPStartXfer+0x3ac>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	183a      	adds	r2, r7, r0
 80060f4:	8812      	ldrh	r2, [r2, #0]
 80060f6:	49b9      	ldr	r1, [pc, #740]	; (80063dc <USB_EPStartXfer+0x3b0>)
 80060f8:	430a      	orrs	r2, r1
 80060fa:	b292      	uxth	r2, r2
 80060fc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	1d7b      	adds	r3, r7, #5
 8006104:	33ff      	adds	r3, #255	; 0xff
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	18d3      	adds	r3, r2, r3
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	001a      	movs	r2, r3
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	4013      	ands	r3, r2
 8006122:	d100      	bne.n	8006126 <USB_EPStartXfer+0xfa>
 8006124:	e162      	b.n	80063ec <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d16a      	bne.n	8006208 <USB_EPStartXfer+0x1dc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2250      	movs	r2, #80	; 0x50
 800613a:	5a9b      	ldrh	r3, [r3, r2]
 800613c:	b29b      	uxth	r3, r3
 800613e:	001a      	movs	r2, r3
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	189b      	adds	r3, r3, r2
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	00da      	lsls	r2, r3, #3
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	18d3      	adds	r3, r2, r3
 8006150:	4aa3      	ldr	r2, [pc, #652]	; (80063e0 <USB_EPStartXfer+0x3b4>)
 8006152:	4694      	mov	ip, r2
 8006154:	4463      	add	r3, ip
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
 8006158:	1d7b      	adds	r3, r7, #5
 800615a:	33ff      	adds	r3, #255	; 0xff
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d110      	bne.n	8006184 <USB_EPStartXfer+0x158>
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	4a9e      	ldr	r2, [pc, #632]	; (80063e4 <USB_EPStartXfer+0x3b8>)
 800616a:	4013      	ands	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	4a9b      	ldr	r2, [pc, #620]	; (80063e8 <USB_EPStartXfer+0x3bc>)
 800617a:	4313      	orrs	r3, r2
 800617c:	b29a      	uxth	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	e05c      	b.n	800623e <USB_EPStartXfer+0x212>
 8006184:	1d7b      	adds	r3, r7, #5
 8006186:	33ff      	adds	r3, #255	; 0xff
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b3e      	cmp	r3, #62	; 0x3e
 800618c:	d81c      	bhi.n	80061c8 <USB_EPStartXfer+0x19c>
 800618e:	1d7b      	adds	r3, r7, #5
 8006190:	33ff      	adds	r3, #255	; 0xff
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	1c7a      	adds	r2, r7, #1
 8006198:	32ff      	adds	r2, #255	; 0xff
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	1d7b      	adds	r3, r7, #5
 800619e:	33ff      	adds	r3, #255	; 0xff
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	4013      	ands	r3, r2
 80061a6:	d006      	beq.n	80061b6 <USB_EPStartXfer+0x18a>
 80061a8:	1c7b      	adds	r3, r7, #1
 80061aa:	33ff      	adds	r3, #255	; 0xff
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	1c7a      	adds	r2, r7, #1
 80061b2:	32ff      	adds	r2, #255	; 0xff
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	1c7b      	adds	r3, r7, #1
 80061b8:	33ff      	adds	r3, #255	; 0xff
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e03a      	b.n	800623e <USB_EPStartXfer+0x212>
 80061c8:	1d7b      	adds	r3, r7, #5
 80061ca:	33ff      	adds	r3, #255	; 0xff
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	1c7a      	adds	r2, r7, #1
 80061d2:	32ff      	adds	r2, #255	; 0xff
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	1d7b      	adds	r3, r7, #5
 80061d8:	33ff      	adds	r3, #255	; 0xff
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	221f      	movs	r2, #31
 80061de:	4013      	ands	r3, r2
 80061e0:	d106      	bne.n	80061f0 <USB_EPStartXfer+0x1c4>
 80061e2:	1c7b      	adds	r3, r7, #1
 80061e4:	33ff      	adds	r3, #255	; 0xff
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	1c7a      	adds	r2, r7, #1
 80061ec:	32ff      	adds	r2, #255	; 0xff
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	1c7b      	adds	r3, r7, #1
 80061f2:	33ff      	adds	r3, #255	; 0xff
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	4a7a      	ldr	r2, [pc, #488]	; (80063e8 <USB_EPStartXfer+0x3bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	e01a      	b.n	800623e <USB_EPStartXfer+0x212>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d116      	bne.n	800623e <USB_EPStartXfer+0x212>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2250      	movs	r2, #80	; 0x50
 8006214:	5a9b      	ldrh	r3, [r3, r2]
 8006216:	b29b      	uxth	r3, r3
 8006218:	001a      	movs	r2, r3
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	189b      	adds	r3, r3, r2
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	00da      	lsls	r2, r3, #3
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	4a6d      	ldr	r2, [pc, #436]	; (80063e0 <USB_EPStartXfer+0x3b4>)
 800622c:	4694      	mov	ip, r2
 800622e:	4463      	add	r3, ip
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006232:	1d7b      	adds	r3, r7, #5
 8006234:	33ff      	adds	r3, #255	; 0xff
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	b29a      	uxth	r2, r3
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800623e:	2076      	movs	r0, #118	; 0x76
 8006240:	183b      	adds	r3, r7, r0
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	8952      	ldrh	r2, [r2, #10]
 8006246:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6959      	ldr	r1, [r3, #20]
 800624c:	1d7b      	adds	r3, r7, #5
 800624e:	33ff      	adds	r3, #255	; 0xff
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	b29c      	uxth	r4, r3
 8006254:	183b      	adds	r3, r7, r0
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	0023      	movs	r3, r4
 800625c:	f001 f8da 	bl	8007414 <USB_WritePMA>
            ep->xfer_buff += len;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	1d7b      	adds	r3, r7, #5
 8006266:	33ff      	adds	r3, #255	; 0xff
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	18d2      	adds	r2, r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d908      	bls.n	800628e <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	1d7b      	adds	r3, r7, #5
 8006282:	33ff      	adds	r3, #255	; 0xff
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	621a      	str	r2, [r3, #32]
 800628c:	e007      	b.n	800629e <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	1d7a      	adds	r2, r7, #5
 8006294:	32ff      	adds	r2, #255	; 0xff
 8006296:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d166      	bne.n	8006374 <USB_EPStartXfer+0x348>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2250      	movs	r2, #80	; 0x50
 80062ae:	5a9b      	ldrh	r3, [r3, r2]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	001a      	movs	r2, r3
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00da      	lsls	r2, r3, #3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	18d3      	adds	r3, r2, r3
 80062c4:	4a43      	ldr	r2, [pc, #268]	; (80063d4 <USB_EPStartXfer+0x3a8>)
 80062c6:	4694      	mov	ip, r2
 80062c8:	4463      	add	r3, ip
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	1d7b      	adds	r3, r7, #5
 80062ce:	33ff      	adds	r3, #255	; 0xff
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d110      	bne.n	80062f8 <USB_EPStartXfer+0x2cc>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4a41      	ldr	r2, [pc, #260]	; (80063e4 <USB_EPStartXfer+0x3b8>)
 80062de:	4013      	ands	r3, r2
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4a3e      	ldr	r2, [pc, #248]	; (80063e8 <USB_EPStartXfer+0x3bc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e05a      	b.n	80063ae <USB_EPStartXfer+0x382>
 80062f8:	1d7b      	adds	r3, r7, #5
 80062fa:	33ff      	adds	r3, #255	; 0xff
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006300:	d81a      	bhi.n	8006338 <USB_EPStartXfer+0x30c>
 8006302:	1d7b      	adds	r3, r7, #5
 8006304:	33ff      	adds	r3, #255	; 0xff
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	21fc      	movs	r1, #252	; 0xfc
 800630c:	187a      	adds	r2, r7, r1
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	1d7b      	adds	r3, r7, #5
 8006312:	33ff      	adds	r3, #255	; 0xff
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2201      	movs	r2, #1
 8006318:	4013      	ands	r3, r2
 800631a:	d004      	beq.n	8006326 <USB_EPStartXfer+0x2fa>
 800631c:	187b      	adds	r3, r7, r1
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	187a      	adds	r2, r7, r1
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	23fc      	movs	r3, #252	; 0xfc
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29a      	uxth	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e03a      	b.n	80063ae <USB_EPStartXfer+0x382>
 8006338:	1d7b      	adds	r3, r7, #5
 800633a:	33ff      	adds	r3, #255	; 0xff
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	21fc      	movs	r1, #252	; 0xfc
 8006342:	187a      	adds	r2, r7, r1
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	1d7b      	adds	r3, r7, #5
 8006348:	33ff      	adds	r3, #255	; 0xff
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	221f      	movs	r2, #31
 800634e:	4013      	ands	r3, r2
 8006350:	d104      	bne.n	800635c <USB_EPStartXfer+0x330>
 8006352:	187b      	adds	r3, r7, r1
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3b01      	subs	r3, #1
 8006358:	187a      	adds	r2, r7, r1
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	23fc      	movs	r3, #252	; 0xfc
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	b29b      	uxth	r3, r3
 8006368:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <USB_EPStartXfer+0x3bc>)
 800636a:	4313      	orrs	r3, r2
 800636c:	b29a      	uxth	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e01c      	b.n	80063ae <USB_EPStartXfer+0x382>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d118      	bne.n	80063ae <USB_EPStartXfer+0x382>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2250      	movs	r2, #80	; 0x50
 8006384:	5a9b      	ldrh	r3, [r3, r2]
 8006386:	b29b      	uxth	r3, r3
 8006388:	001a      	movs	r2, r3
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	189b      	adds	r3, r3, r2
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00da      	lsls	r2, r3, #3
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	4a0e      	ldr	r2, [pc, #56]	; (80063d4 <USB_EPStartXfer+0x3a8>)
 800639c:	4694      	mov	ip, r2
 800639e:	4463      	add	r3, ip
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	1d7b      	adds	r3, r7, #5
 80063a4:	33ff      	adds	r3, #255	; 0xff
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063ae:	2076      	movs	r0, #118	; 0x76
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	8912      	ldrh	r2, [r2, #8]
 80063b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	6959      	ldr	r1, [r3, #20]
 80063bc:	1d7b      	adds	r3, r7, #5
 80063be:	33ff      	adds	r3, #255	; 0xff
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	b29c      	uxth	r4, r3
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	881a      	ldrh	r2, [r3, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	0023      	movs	r3, r4
 80063cc:	f001 f822 	bl	8007414 <USB_WritePMA>
 80063d0:	e301      	b.n	80069d6 <USB_EPStartXfer+0x9aa>
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	00000402 	.word	0x00000402
 80063d8:	ffff8f8f 	.word	0xffff8f8f
 80063dc:	ffff8180 	.word	0xffff8180
 80063e0:	00000406 	.word	0x00000406
 80063e4:	ffff83ff 	.word	0xffff83ff
 80063e8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d166      	bne.n	80064c2 <USB_EPStartXfer+0x496>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2250      	movs	r2, #80	; 0x50
 80063fc:	5a9b      	ldrh	r3, [r3, r2]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	001a      	movs	r2, r3
 8006402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006404:	189b      	adds	r3, r3, r2
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	00da      	lsls	r2, r3, #3
 800640e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006410:	18d3      	adds	r3, r2, r3
 8006412:	4ac3      	ldr	r2, [pc, #780]	; (8006720 <USB_EPStartXfer+0x6f4>)
 8006414:	4694      	mov	ip, r2
 8006416:	4463      	add	r3, ip
 8006418:	647b      	str	r3, [r7, #68]	; 0x44
 800641a:	1d7b      	adds	r3, r7, #5
 800641c:	33ff      	adds	r3, #255	; 0xff
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <USB_EPStartXfer+0x41a>
 8006424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	4abe      	ldr	r2, [pc, #760]	; (8006724 <USB_EPStartXfer+0x6f8>)
 800642c:	4013      	ands	r3, r2
 800642e:	b29a      	uxth	r2, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	4abb      	ldr	r2, [pc, #748]	; (8006728 <USB_EPStartXfer+0x6fc>)
 800643c:	4313      	orrs	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e05a      	b.n	80064fc <USB_EPStartXfer+0x4d0>
 8006446:	1d7b      	adds	r3, r7, #5
 8006448:	33ff      	adds	r3, #255	; 0xff
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b3e      	cmp	r3, #62	; 0x3e
 800644e:	d81a      	bhi.n	8006486 <USB_EPStartXfer+0x45a>
 8006450:	1d7b      	adds	r3, r7, #5
 8006452:	33ff      	adds	r3, #255	; 0xff
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	21f8      	movs	r1, #248	; 0xf8
 800645a:	187a      	adds	r2, r7, r1
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	1d7b      	adds	r3, r7, #5
 8006460:	33ff      	adds	r3, #255	; 0xff
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2201      	movs	r2, #1
 8006466:	4013      	ands	r3, r2
 8006468:	d004      	beq.n	8006474 <USB_EPStartXfer+0x448>
 800646a:	187b      	adds	r3, r7, r1
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	187a      	adds	r2, r7, r1
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	23f8      	movs	r3, #248	; 0xf8
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29a      	uxth	r2, r3
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e03a      	b.n	80064fc <USB_EPStartXfer+0x4d0>
 8006486:	1d7b      	adds	r3, r7, #5
 8006488:	33ff      	adds	r3, #255	; 0xff
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	21f8      	movs	r1, #248	; 0xf8
 8006490:	187a      	adds	r2, r7, r1
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	1d7b      	adds	r3, r7, #5
 8006496:	33ff      	adds	r3, #255	; 0xff
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	221f      	movs	r2, #31
 800649c:	4013      	ands	r3, r2
 800649e:	d104      	bne.n	80064aa <USB_EPStartXfer+0x47e>
 80064a0:	187b      	adds	r3, r7, r1
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	187a      	adds	r2, r7, r1
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	23f8      	movs	r3, #248	; 0xf8
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	4a9c      	ldr	r2, [pc, #624]	; (8006728 <USB_EPStartXfer+0x6fc>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e01c      	b.n	80064fc <USB_EPStartXfer+0x4d0>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d118      	bne.n	80064fc <USB_EPStartXfer+0x4d0>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2250      	movs	r2, #80	; 0x50
 80064d2:	5a9b      	ldrh	r3, [r3, r2]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	001a      	movs	r2, r3
 80064d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064da:	189b      	adds	r3, r3, r2
 80064dc:	653b      	str	r3, [r7, #80]	; 0x50
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00da      	lsls	r2, r3, #3
 80064e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e6:	18d3      	adds	r3, r2, r3
 80064e8:	4a8d      	ldr	r2, [pc, #564]	; (8006720 <USB_EPStartXfer+0x6f4>)
 80064ea:	4694      	mov	ip, r2
 80064ec:	4463      	add	r3, ip
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f0:	1d7b      	adds	r3, r7, #5
 80064f2:	33ff      	adds	r3, #255	; 0xff
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064fc:	2076      	movs	r0, #118	; 0x76
 80064fe:	183b      	adds	r3, r7, r0
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	8912      	ldrh	r2, [r2, #8]
 8006504:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6959      	ldr	r1, [r3, #20]
 800650a:	1d7b      	adds	r3, r7, #5
 800650c:	33ff      	adds	r3, #255	; 0xff
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b29c      	uxth	r4, r3
 8006512:	183b      	adds	r3, r7, r0
 8006514:	881a      	ldrh	r2, [r3, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	0023      	movs	r3, r4
 800651a:	f000 ff7b 	bl	8007414 <USB_WritePMA>
            ep->xfer_buff += len;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	1d7b      	adds	r3, r7, #5
 8006524:	33ff      	adds	r3, #255	; 0xff
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	18d2      	adds	r2, r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d908      	bls.n	800654c <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	1d7b      	adds	r3, r7, #5
 8006540:	33ff      	adds	r3, #255	; 0xff
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	1ad2      	subs	r2, r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	621a      	str	r2, [r3, #32]
 800654a:	e007      	b.n	800655c <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	1d7a      	adds	r2, r7, #5
 8006552:	32ff      	adds	r2, #255	; 0xff
 8006554:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2200      	movs	r2, #0
 800655a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	643b      	str	r3, [r7, #64]	; 0x40
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d166      	bne.n	8006636 <USB_EPStartXfer+0x60a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2250      	movs	r2, #80	; 0x50
 8006570:	5a9b      	ldrh	r3, [r3, r2]
 8006572:	b29b      	uxth	r3, r3
 8006574:	001a      	movs	r2, r3
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	189b      	adds	r3, r3, r2
 800657a:	63bb      	str	r3, [r7, #56]	; 0x38
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	00da      	lsls	r2, r3, #3
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	18d3      	adds	r3, r2, r3
 8006586:	4a69      	ldr	r2, [pc, #420]	; (800672c <USB_EPStartXfer+0x700>)
 8006588:	4694      	mov	ip, r2
 800658a:	4463      	add	r3, ip
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	1d7b      	adds	r3, r7, #5
 8006590:	33ff      	adds	r3, #255	; 0xff
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d110      	bne.n	80065ba <USB_EPStartXfer+0x58e>
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	4a61      	ldr	r2, [pc, #388]	; (8006724 <USB_EPStartXfer+0x6f8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4a5e      	ldr	r2, [pc, #376]	; (8006728 <USB_EPStartXfer+0x6fc>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e058      	b.n	800666c <USB_EPStartXfer+0x640>
 80065ba:	1d7b      	adds	r3, r7, #5
 80065bc:	33ff      	adds	r3, #255	; 0xff
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b3e      	cmp	r3, #62	; 0x3e
 80065c2:	d81a      	bhi.n	80065fa <USB_EPStartXfer+0x5ce>
 80065c4:	1d7b      	adds	r3, r7, #5
 80065c6:	33ff      	adds	r3, #255	; 0xff
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	21f4      	movs	r1, #244	; 0xf4
 80065ce:	187a      	adds	r2, r7, r1
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	1d7b      	adds	r3, r7, #5
 80065d4:	33ff      	adds	r3, #255	; 0xff
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2201      	movs	r2, #1
 80065da:	4013      	ands	r3, r2
 80065dc:	d004      	beq.n	80065e8 <USB_EPStartXfer+0x5bc>
 80065de:	187b      	adds	r3, r7, r1
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	187a      	adds	r2, r7, r1
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	23f4      	movs	r3, #244	; 0xf4
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e038      	b.n	800666c <USB_EPStartXfer+0x640>
 80065fa:	1d7b      	adds	r3, r7, #5
 80065fc:	33ff      	adds	r3, #255	; 0xff
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	21f4      	movs	r1, #244	; 0xf4
 8006604:	187a      	adds	r2, r7, r1
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	1d7b      	adds	r3, r7, #5
 800660a:	33ff      	adds	r3, #255	; 0xff
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	221f      	movs	r2, #31
 8006610:	4013      	ands	r3, r2
 8006612:	d104      	bne.n	800661e <USB_EPStartXfer+0x5f2>
 8006614:	187b      	adds	r3, r7, r1
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3b01      	subs	r3, #1
 800661a:	187a      	adds	r2, r7, r1
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	23f4      	movs	r3, #244	; 0xf4
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	b29b      	uxth	r3, r3
 800662a:	4a3f      	ldr	r2, [pc, #252]	; (8006728 <USB_EPStartXfer+0x6fc>)
 800662c:	4313      	orrs	r3, r2
 800662e:	b29a      	uxth	r2, r3
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e01a      	b.n	800666c <USB_EPStartXfer+0x640>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d116      	bne.n	800666c <USB_EPStartXfer+0x640>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2250      	movs	r2, #80	; 0x50
 8006642:	5a9b      	ldrh	r3, [r3, r2]
 8006644:	b29b      	uxth	r3, r3
 8006646:	001a      	movs	r2, r3
 8006648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664a:	189b      	adds	r3, r3, r2
 800664c:	643b      	str	r3, [r7, #64]	; 0x40
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	00da      	lsls	r2, r3, #3
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	18d3      	adds	r3, r2, r3
 8006658:	4a34      	ldr	r2, [pc, #208]	; (800672c <USB_EPStartXfer+0x700>)
 800665a:	4694      	mov	ip, r2
 800665c:	4463      	add	r3, ip
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006660:	1d7b      	adds	r3, r7, #5
 8006662:	33ff      	adds	r3, #255	; 0xff
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	b29a      	uxth	r2, r3
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800666c:	2076      	movs	r0, #118	; 0x76
 800666e:	183b      	adds	r3, r7, r0
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	8952      	ldrh	r2, [r2, #10]
 8006674:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6959      	ldr	r1, [r3, #20]
 800667a:	1d7b      	adds	r3, r7, #5
 800667c:	33ff      	adds	r3, #255	; 0xff
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	b29c      	uxth	r4, r3
 8006682:	183b      	adds	r3, r7, r0
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	0023      	movs	r3, r4
 800668a:	f000 fec3 	bl	8007414 <USB_WritePMA>
 800668e:	e1a2      	b.n	80069d6 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	1d7a      	adds	r2, r7, #5
 8006696:	32ff      	adds	r2, #255	; 0xff
 8006698:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	18d3      	adds	r3, r2, r3
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	2062      	movs	r0, #98	; 0x62
 80066aa:	183b      	adds	r3, r7, r0
 80066ac:	4920      	ldr	r1, [pc, #128]	; (8006730 <USB_EPStartXfer+0x704>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	18d3      	adds	r3, r2, r3
 80066bc:	183a      	adds	r2, r7, r0
 80066be:	8812      	ldrh	r2, [r2, #0]
 80066c0:	491c      	ldr	r1, [pc, #112]	; (8006734 <USB_EPStartXfer+0x708>)
 80066c2:	430a      	orrs	r2, r1
 80066c4:	b292      	uxth	r2, r2
 80066c6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2250      	movs	r2, #80	; 0x50
 80066d0:	5a9b      	ldrh	r3, [r3, r2]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	001a      	movs	r2, r3
 80066d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	00da      	lsls	r2, r3, #3
 80066e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e4:	18d3      	adds	r3, r2, r3
 80066e6:	4a0e      	ldr	r2, [pc, #56]	; (8006720 <USB_EPStartXfer+0x6f4>)
 80066e8:	4694      	mov	ip, r2
 80066ea:	4463      	add	r3, ip
 80066ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ee:	1d7b      	adds	r3, r7, #5
 80066f0:	33ff      	adds	r3, #255	; 0xff
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066fa:	2076      	movs	r0, #118	; 0x76
 80066fc:	183b      	adds	r3, r7, r0
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	8912      	ldrh	r2, [r2, #8]
 8006702:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6959      	ldr	r1, [r3, #20]
 8006708:	1d7b      	adds	r3, r7, #5
 800670a:	33ff      	adds	r3, #255	; 0xff
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	b29c      	uxth	r4, r3
 8006710:	183b      	adds	r3, r7, r0
 8006712:	881a      	ldrh	r2, [r3, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	0023      	movs	r3, r4
 8006718:	f000 fe7c 	bl	8007414 <USB_WritePMA>
 800671c:	e15b      	b.n	80069d6 <USB_EPStartXfer+0x9aa>
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	00000402 	.word	0x00000402
 8006724:	ffff83ff 	.word	0xffff83ff
 8006728:	ffff8000 	.word	0xffff8000
 800672c:	00000406 	.word	0x00000406
 8006730:	ffff8e8f 	.word	0xffff8e8f
 8006734:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	1d7b      	adds	r3, r7, #5
 800673e:	33ff      	adds	r3, #255	; 0xff
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	18d3      	adds	r3, r2, r3
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	001a      	movs	r2, r3
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	4013      	ands	r3, r2
 800675c:	d100      	bne.n	8006760 <USB_EPStartXfer+0x734>
 800675e:	e099      	b.n	8006894 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	673b      	str	r3, [r7, #112]	; 0x70
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d166      	bne.n	800683a <USB_EPStartXfer+0x80e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2250      	movs	r2, #80	; 0x50
 8006774:	5a9b      	ldrh	r3, [r3, r2]
 8006776:	b29b      	uxth	r3, r3
 8006778:	001a      	movs	r2, r3
 800677a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800677c:	189b      	adds	r3, r3, r2
 800677e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006788:	18d3      	adds	r3, r2, r3
 800678a:	4ad0      	ldr	r2, [pc, #832]	; (8006acc <USB_EPStartXfer+0xaa0>)
 800678c:	4694      	mov	ip, r2
 800678e:	4463      	add	r3, ip
 8006790:	667b      	str	r3, [r7, #100]	; 0x64
 8006792:	1d7b      	adds	r3, r7, #5
 8006794:	33ff      	adds	r3, #255	; 0xff
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d110      	bne.n	80067be <USB_EPStartXfer+0x792>
 800679c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4acb      	ldr	r2, [pc, #812]	; (8006ad0 <USB_EPStartXfer+0xaa4>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4ac8      	ldr	r2, [pc, #800]	; (8006ad4 <USB_EPStartXfer+0xaa8>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e058      	b.n	8006870 <USB_EPStartXfer+0x844>
 80067be:	1d7b      	adds	r3, r7, #5
 80067c0:	33ff      	adds	r3, #255	; 0xff
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b3e      	cmp	r3, #62	; 0x3e
 80067c6:	d81a      	bhi.n	80067fe <USB_EPStartXfer+0x7d2>
 80067c8:	1d7b      	adds	r3, r7, #5
 80067ca:	33ff      	adds	r3, #255	; 0xff
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	21f0      	movs	r1, #240	; 0xf0
 80067d2:	187a      	adds	r2, r7, r1
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	1d7b      	adds	r3, r7, #5
 80067d8:	33ff      	adds	r3, #255	; 0xff
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	4013      	ands	r3, r2
 80067e0:	d004      	beq.n	80067ec <USB_EPStartXfer+0x7c0>
 80067e2:	187b      	adds	r3, r7, r1
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	187a      	adds	r2, r7, r1
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	23f0      	movs	r3, #240	; 0xf0
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	e038      	b.n	8006870 <USB_EPStartXfer+0x844>
 80067fe:	1d7b      	adds	r3, r7, #5
 8006800:	33ff      	adds	r3, #255	; 0xff
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	21f0      	movs	r1, #240	; 0xf0
 8006808:	187a      	adds	r2, r7, r1
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	1d7b      	adds	r3, r7, #5
 800680e:	33ff      	adds	r3, #255	; 0xff
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	221f      	movs	r2, #31
 8006814:	4013      	ands	r3, r2
 8006816:	d104      	bne.n	8006822 <USB_EPStartXfer+0x7f6>
 8006818:	187b      	adds	r3, r7, r1
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	187a      	adds	r2, r7, r1
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	23f0      	movs	r3, #240	; 0xf0
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	029b      	lsls	r3, r3, #10
 800682c:	b29b      	uxth	r3, r3
 800682e:	4aa9      	ldr	r2, [pc, #676]	; (8006ad4 <USB_EPStartXfer+0xaa8>)
 8006830:	4313      	orrs	r3, r2
 8006832:	b29a      	uxth	r2, r3
 8006834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e01a      	b.n	8006870 <USB_EPStartXfer+0x844>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d116      	bne.n	8006870 <USB_EPStartXfer+0x844>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2250      	movs	r2, #80	; 0x50
 8006846:	5a9b      	ldrh	r3, [r3, r2]
 8006848:	b29b      	uxth	r3, r3
 800684a:	001a      	movs	r2, r3
 800684c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684e:	189b      	adds	r3, r3, r2
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	00da      	lsls	r2, r3, #3
 8006858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800685a:	18d3      	adds	r3, r2, r3
 800685c:	4a9b      	ldr	r2, [pc, #620]	; (8006acc <USB_EPStartXfer+0xaa0>)
 800685e:	4694      	mov	ip, r2
 8006860:	4463      	add	r3, ip
 8006862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006864:	1d7b      	adds	r3, r7, #5
 8006866:	33ff      	adds	r3, #255	; 0xff
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	b29a      	uxth	r2, r3
 800686c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006870:	2076      	movs	r0, #118	; 0x76
 8006872:	183b      	adds	r3, r7, r0
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	8952      	ldrh	r2, [r2, #10]
 8006878:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6959      	ldr	r1, [r3, #20]
 800687e:	1d7b      	adds	r3, r7, #5
 8006880:	33ff      	adds	r3, #255	; 0xff
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	b29c      	uxth	r4, r3
 8006886:	183b      	adds	r3, r7, r0
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	0023      	movs	r3, r4
 800688e:	f000 fdc1 	bl	8007414 <USB_WritePMA>
 8006892:	e0a0      	b.n	80069d6 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d166      	bne.n	800696a <USB_EPStartXfer+0x93e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2250      	movs	r2, #80	; 0x50
 80068a4:	5a9b      	ldrh	r3, [r3, r2]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	001a      	movs	r2, r3
 80068aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ac:	189b      	adds	r3, r3, r2
 80068ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	00da      	lsls	r2, r3, #3
 80068b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	4a87      	ldr	r2, [pc, #540]	; (8006ad8 <USB_EPStartXfer+0xaac>)
 80068bc:	4694      	mov	ip, r2
 80068be:	4463      	add	r3, ip
 80068c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80068c2:	1d7b      	adds	r3, r7, #5
 80068c4:	33ff      	adds	r3, #255	; 0xff
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d110      	bne.n	80068ee <USB_EPStartXfer+0x8c2>
 80068cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4a7f      	ldr	r2, [pc, #508]	; (8006ad0 <USB_EPStartXfer+0xaa4>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4a7c      	ldr	r2, [pc, #496]	; (8006ad4 <USB_EPStartXfer+0xaa8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e062      	b.n	80069b4 <USB_EPStartXfer+0x988>
 80068ee:	1d7b      	adds	r3, r7, #5
 80068f0:	33ff      	adds	r3, #255	; 0xff
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b3e      	cmp	r3, #62	; 0x3e
 80068f6:	d81a      	bhi.n	800692e <USB_EPStartXfer+0x902>
 80068f8:	1d7b      	adds	r3, r7, #5
 80068fa:	33ff      	adds	r3, #255	; 0xff
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	21ec      	movs	r1, #236	; 0xec
 8006902:	187a      	adds	r2, r7, r1
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	1d7b      	adds	r3, r7, #5
 8006908:	33ff      	adds	r3, #255	; 0xff
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2201      	movs	r2, #1
 800690e:	4013      	ands	r3, r2
 8006910:	d004      	beq.n	800691c <USB_EPStartXfer+0x8f0>
 8006912:	187b      	adds	r3, r7, r1
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	187a      	adds	r2, r7, r1
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	23ec      	movs	r3, #236	; 0xec
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29a      	uxth	r2, r3
 8006928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	e042      	b.n	80069b4 <USB_EPStartXfer+0x988>
 800692e:	1d7b      	adds	r3, r7, #5
 8006930:	33ff      	adds	r3, #255	; 0xff
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	21ec      	movs	r1, #236	; 0xec
 8006938:	187a      	adds	r2, r7, r1
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	1d7b      	adds	r3, r7, #5
 800693e:	33ff      	adds	r3, #255	; 0xff
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	221f      	movs	r2, #31
 8006944:	4013      	ands	r3, r2
 8006946:	d104      	bne.n	8006952 <USB_EPStartXfer+0x926>
 8006948:	187b      	adds	r3, r7, r1
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3b01      	subs	r3, #1
 800694e:	187a      	adds	r2, r7, r1
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	23ec      	movs	r3, #236	; 0xec
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29b      	uxth	r3, r3
 800695e:	4a5d      	ldr	r2, [pc, #372]	; (8006ad4 <USB_EPStartXfer+0xaa8>)
 8006960:	4313      	orrs	r3, r2
 8006962:	b29a      	uxth	r2, r3
 8006964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e024      	b.n	80069b4 <USB_EPStartXfer+0x988>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d120      	bne.n	80069b4 <USB_EPStartXfer+0x988>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2184      	movs	r1, #132	; 0x84
 8006976:	187a      	adds	r2, r7, r1
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2250      	movs	r2, #80	; 0x50
 800697e:	5a9b      	ldrh	r3, [r3, r2]
 8006980:	b29b      	uxth	r3, r3
 8006982:	001a      	movs	r2, r3
 8006984:	187b      	adds	r3, r7, r1
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	189b      	adds	r3, r3, r2
 800698a:	187a      	adds	r2, r7, r1
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00da      	lsls	r2, r3, #3
 8006994:	187b      	adds	r3, r7, r1
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	18d3      	adds	r3, r2, r3
 800699a:	4a4f      	ldr	r2, [pc, #316]	; (8006ad8 <USB_EPStartXfer+0xaac>)
 800699c:	4694      	mov	ip, r2
 800699e:	4463      	add	r3, ip
 80069a0:	2180      	movs	r1, #128	; 0x80
 80069a2:	187a      	adds	r2, r7, r1
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	1d7b      	adds	r3, r7, #5
 80069a8:	33ff      	adds	r3, #255	; 0xff
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069b4:	2076      	movs	r0, #118	; 0x76
 80069b6:	183b      	adds	r3, r7, r0
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	8912      	ldrh	r2, [r2, #8]
 80069bc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6959      	ldr	r1, [r3, #20]
 80069c2:	1d7b      	adds	r3, r7, #5
 80069c4:	33ff      	adds	r3, #255	; 0xff
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	b29c      	uxth	r4, r3
 80069ca:	183b      	adds	r3, r7, r0
 80069cc:	881a      	ldrh	r2, [r3, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	0023      	movs	r3, r4
 80069d2:	f000 fd1f 	bl	8007414 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	18d3      	adds	r3, r2, r3
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	200a      	movs	r0, #10
 80069e6:	183b      	adds	r3, r7, r0
 80069e8:	493c      	ldr	r1, [pc, #240]	; (8006adc <USB_EPStartXfer+0xab0>)
 80069ea:	400a      	ands	r2, r1
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	183b      	adds	r3, r7, r0
 80069f0:	183a      	adds	r2, r7, r0
 80069f2:	8812      	ldrh	r2, [r2, #0]
 80069f4:	2110      	movs	r1, #16
 80069f6:	404a      	eors	r2, r1
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	183b      	adds	r3, r7, r0
 80069fc:	183a      	adds	r2, r7, r0
 80069fe:	8812      	ldrh	r2, [r2, #0]
 8006a00:	2120      	movs	r1, #32
 8006a02:	404a      	eors	r2, r1
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	183a      	adds	r2, r7, r0
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	4932      	ldr	r1, [pc, #200]	; (8006ae0 <USB_EPStartXfer+0xab4>)
 8006a16:	430a      	orrs	r2, r1
 8006a18:	b292      	uxth	r2, r2
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	f000 fbaf 	bl	800717e <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	7b1b      	ldrb	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d000      	beq.n	8006a2a <USB_EPStartXfer+0x9fe>
 8006a28:	e09e      	b.n	8006b68 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d90d      	bls.n	8006a52 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	1d7a      	adds	r2, r7, #5
 8006a3c:	32ff      	adds	r2, #255	; 0xff
 8006a3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	1d7b      	adds	r3, r7, #5
 8006a46:	33ff      	adds	r3, #255	; 0xff
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1ad2      	subs	r2, r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	619a      	str	r2, [r3, #24]
 8006a50:	e007      	b.n	8006a62 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	1d7a      	adds	r2, r7, #5
 8006a58:	32ff      	adds	r2, #255	; 0xff
 8006a5a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2190      	movs	r1, #144	; 0x90
 8006a66:	187a      	adds	r2, r7, r1
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2250      	movs	r2, #80	; 0x50
 8006a6e:	5a9b      	ldrh	r3, [r3, r2]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	001a      	movs	r2, r3
 8006a74:	187b      	adds	r3, r7, r1
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	187a      	adds	r2, r7, r1
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	00da      	lsls	r2, r3, #3
 8006a84:	187b      	adds	r3, r7, r1
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	18d3      	adds	r3, r2, r3
 8006a8a:	4a10      	ldr	r2, [pc, #64]	; (8006acc <USB_EPStartXfer+0xaa0>)
 8006a8c:	4694      	mov	ip, r2
 8006a8e:	4463      	add	r3, ip
 8006a90:	218c      	movs	r1, #140	; 0x8c
 8006a92:	187a      	adds	r2, r7, r1
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	1d7b      	adds	r3, r7, #5
 8006a98:	33ff      	adds	r3, #255	; 0xff
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d121      	bne.n	8006ae4 <USB_EPStartXfer+0xab8>
 8006aa0:	187b      	adds	r3, r7, r1
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <USB_EPStartXfer+0xaa4>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	187b      	adds	r3, r7, r1
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	187b      	adds	r3, r7, r1
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4a05      	ldr	r2, [pc, #20]	; (8006ad4 <USB_EPStartXfer+0xaa8>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	187b      	adds	r3, r7, r1
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e334      	b.n	8007134 <USB_EPStartXfer+0x1108>
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	00000406 	.word	0x00000406
 8006ad0:	ffff83ff 	.word	0xffff83ff
 8006ad4:	ffff8000 	.word	0xffff8000
 8006ad8:	00000402 	.word	0x00000402
 8006adc:	ffff8fbf 	.word	0xffff8fbf
 8006ae0:	ffff8080 	.word	0xffff8080
 8006ae4:	1d7b      	adds	r3, r7, #5
 8006ae6:	33ff      	adds	r3, #255	; 0xff
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b3e      	cmp	r3, #62	; 0x3e
 8006aec:	d81c      	bhi.n	8006b28 <USB_EPStartXfer+0xafc>
 8006aee:	1d7b      	adds	r3, r7, #5
 8006af0:	33ff      	adds	r3, #255	; 0xff
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	21e8      	movs	r1, #232	; 0xe8
 8006af8:	187a      	adds	r2, r7, r1
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	1d7b      	adds	r3, r7, #5
 8006afe:	33ff      	adds	r3, #255	; 0xff
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2201      	movs	r2, #1
 8006b04:	4013      	ands	r3, r2
 8006b06:	d004      	beq.n	8006b12 <USB_EPStartXfer+0xae6>
 8006b08:	187b      	adds	r3, r7, r1
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	187a      	adds	r2, r7, r1
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	23e8      	movs	r3, #232	; 0xe8
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	029b      	lsls	r3, r3, #10
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	238c      	movs	r3, #140	; 0x8c
 8006b20:	18fb      	adds	r3, r7, r3
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e305      	b.n	8007134 <USB_EPStartXfer+0x1108>
 8006b28:	1d7b      	adds	r3, r7, #5
 8006b2a:	33ff      	adds	r3, #255	; 0xff
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	21e8      	movs	r1, #232	; 0xe8
 8006b32:	187a      	adds	r2, r7, r1
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	1d7b      	adds	r3, r7, #5
 8006b38:	33ff      	adds	r3, #255	; 0xff
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	221f      	movs	r2, #31
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d104      	bne.n	8006b4c <USB_EPStartXfer+0xb20>
 8006b42:	187b      	adds	r3, r7, r1
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	187a      	adds	r2, r7, r1
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	23e8      	movs	r3, #232	; 0xe8
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	029b      	lsls	r3, r3, #10
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	4aca      	ldr	r2, [pc, #808]	; (8006e84 <USB_EPStartXfer+0xe58>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	238c      	movs	r3, #140	; 0x8c
 8006b60:	18fb      	adds	r3, r7, r3
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e2e5      	b.n	8007134 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	78db      	ldrb	r3, [r3, #3]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d000      	beq.n	8006b72 <USB_EPStartXfer+0xb46>
 8006b70:	e16f      	b.n	8006e52 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d16f      	bne.n	8006c5a <USB_EPStartXfer+0xc2e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	21ac      	movs	r1, #172	; 0xac
 8006b7e:	187a      	adds	r2, r7, r1
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2250      	movs	r2, #80	; 0x50
 8006b86:	5a9b      	ldrh	r3, [r3, r2]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	187a      	adds	r2, r7, r1
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00da      	lsls	r2, r3, #3
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	4ab9      	ldr	r2, [pc, #740]	; (8006e88 <USB_EPStartXfer+0xe5c>)
 8006ba4:	4694      	mov	ip, r2
 8006ba6:	4463      	add	r3, ip
 8006ba8:	21a8      	movs	r1, #168	; 0xa8
 8006baa:	187a      	adds	r2, r7, r1
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d114      	bne.n	8006be0 <USB_EPStartXfer+0xbb4>
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	4ab3      	ldr	r2, [pc, #716]	; (8006e8c <USB_EPStartXfer+0xe60>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	187b      	adds	r3, r7, r1
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4aac      	ldr	r2, [pc, #688]	; (8006e84 <USB_EPStartXfer+0xe58>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	e060      	b.n	8006ca2 <USB_EPStartXfer+0xc76>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b3e      	cmp	r3, #62	; 0x3e
 8006be6:	d81a      	bhi.n	8006c1e <USB_EPStartXfer+0xbf2>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	21e4      	movs	r1, #228	; 0xe4
 8006bf0:	187a      	adds	r2, r7, r1
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <USB_EPStartXfer+0xbdc>
 8006bfe:	187b      	adds	r3, r7, r1
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	187a      	adds	r2, r7, r1
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	23e4      	movs	r3, #228	; 0xe4
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	029b      	lsls	r3, r3, #10
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	23a8      	movs	r3, #168	; 0xa8
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	e041      	b.n	8006ca2 <USB_EPStartXfer+0xc76>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	21e4      	movs	r1, #228	; 0xe4
 8006c26:	187a      	adds	r2, r7, r1
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	221f      	movs	r2, #31
 8006c30:	4013      	ands	r3, r2
 8006c32:	d104      	bne.n	8006c3e <USB_EPStartXfer+0xc12>
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	187a      	adds	r2, r7, r1
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	23e4      	movs	r3, #228	; 0xe4
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4a8e      	ldr	r2, [pc, #568]	; (8006e84 <USB_EPStartXfer+0xe58>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	23a8      	movs	r3, #168	; 0xa8
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e023      	b.n	8006ca2 <USB_EPStartXfer+0xc76>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d11f      	bne.n	8006ca2 <USB_EPStartXfer+0xc76>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	21b4      	movs	r1, #180	; 0xb4
 8006c66:	187a      	adds	r2, r7, r1
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2250      	movs	r2, #80	; 0x50
 8006c6e:	5a9b      	ldrh	r3, [r3, r2]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	001a      	movs	r2, r3
 8006c74:	187b      	adds	r3, r7, r1
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	189b      	adds	r3, r3, r2
 8006c7a:	187a      	adds	r2, r7, r1
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	00da      	lsls	r2, r3, #3
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	18d3      	adds	r3, r2, r3
 8006c8a:	4a7f      	ldr	r2, [pc, #508]	; (8006e88 <USB_EPStartXfer+0xe5c>)
 8006c8c:	4694      	mov	ip, r2
 8006c8e:	4463      	add	r3, ip
 8006c90:	21b0      	movs	r1, #176	; 0xb0
 8006c92:	187a      	adds	r2, r7, r1
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	187b      	adds	r3, r7, r1
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	22a4      	movs	r2, #164	; 0xa4
 8006ca6:	18ba      	adds	r2, r7, r2
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d16f      	bne.n	8006d92 <USB_EPStartXfer+0xd66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	219c      	movs	r1, #156	; 0x9c
 8006cb6:	187a      	adds	r2, r7, r1
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2250      	movs	r2, #80	; 0x50
 8006cbe:	5a9b      	ldrh	r3, [r3, r2]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	189b      	adds	r3, r3, r2
 8006cca:	187a      	adds	r2, r7, r1
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	00da      	lsls	r2, r3, #3
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	18d3      	adds	r3, r2, r3
 8006cda:	4a6d      	ldr	r2, [pc, #436]	; (8006e90 <USB_EPStartXfer+0xe64>)
 8006cdc:	4694      	mov	ip, r2
 8006cde:	4463      	add	r3, ip
 8006ce0:	2198      	movs	r1, #152	; 0x98
 8006ce2:	187a      	adds	r2, r7, r1
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d114      	bne.n	8006d18 <USB_EPStartXfer+0xcec>
 8006cee:	187b      	adds	r3, r7, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <USB_EPStartXfer+0xe60>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	187b      	adds	r3, r7, r1
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4a5e      	ldr	r2, [pc, #376]	; (8006e84 <USB_EPStartXfer+0xe58>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	187b      	adds	r3, r7, r1
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	e05d      	b.n	8006dd4 <USB_EPStartXfer+0xda8>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1e:	d81a      	bhi.n	8006d56 <USB_EPStartXfer+0xd2a>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	21e0      	movs	r1, #224	; 0xe0
 8006d28:	187a      	adds	r2, r7, r1
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2201      	movs	r2, #1
 8006d32:	4013      	ands	r3, r2
 8006d34:	d004      	beq.n	8006d40 <USB_EPStartXfer+0xd14>
 8006d36:	187b      	adds	r3, r7, r1
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	187a      	adds	r2, r7, r1
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	23e0      	movs	r3, #224	; 0xe0
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	2398      	movs	r3, #152	; 0x98
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e03e      	b.n	8006dd4 <USB_EPStartXfer+0xda8>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	21e0      	movs	r1, #224	; 0xe0
 8006d5e:	187a      	adds	r2, r7, r1
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	221f      	movs	r2, #31
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d104      	bne.n	8006d76 <USB_EPStartXfer+0xd4a>
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	187a      	adds	r2, r7, r1
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	23e0      	movs	r3, #224	; 0xe0
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4a40      	ldr	r2, [pc, #256]	; (8006e84 <USB_EPStartXfer+0xe58>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	2398      	movs	r3, #152	; 0x98
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e020      	b.n	8006dd4 <USB_EPStartXfer+0xda8>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d11c      	bne.n	8006dd4 <USB_EPStartXfer+0xda8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2250      	movs	r2, #80	; 0x50
 8006d9e:	5a9b      	ldrh	r3, [r3, r2]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	001a      	movs	r2, r3
 8006da4:	21a4      	movs	r1, #164	; 0xa4
 8006da6:	187b      	adds	r3, r7, r1
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	187a      	adds	r2, r7, r1
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	00da      	lsls	r2, r3, #3
 8006db6:	187b      	adds	r3, r7, r1
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	18d3      	adds	r3, r2, r3
 8006dbc:	4a34      	ldr	r2, [pc, #208]	; (8006e90 <USB_EPStartXfer+0xe64>)
 8006dbe:	4694      	mov	ip, r2
 8006dc0:	4463      	add	r3, ip
 8006dc2:	21a0      	movs	r1, #160	; 0xa0
 8006dc4:	187a      	adds	r2, r7, r1
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	187b      	adds	r3, r7, r1
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d100      	bne.n	8006dde <USB_EPStartXfer+0xdb2>
 8006ddc:	e1aa      	b.n	8007134 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	18d2      	adds	r2, r2, r3
 8006de8:	2196      	movs	r1, #150	; 0x96
 8006dea:	187b      	adds	r3, r7, r1
 8006dec:	8812      	ldrh	r2, [r2, #0]
 8006dee:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006df0:	187b      	adds	r3, r7, r1
 8006df2:	881a      	ldrh	r2, [r3, #0]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	01db      	lsls	r3, r3, #7
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <USB_EPStartXfer+0xdda>
 8006dfc:	187b      	adds	r3, r7, r1
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2240      	movs	r2, #64	; 0x40
 8006e02:	4013      	ands	r3, r2
 8006e04:	d10d      	bne.n	8006e22 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e06:	2196      	movs	r1, #150	; 0x96
 8006e08:	187b      	adds	r3, r7, r1
 8006e0a:	881a      	ldrh	r2, [r3, #0]
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	01db      	lsls	r3, r3, #7
 8006e10:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e12:	d000      	beq.n	8006e16 <USB_EPStartXfer+0xdea>
 8006e14:	e18e      	b.n	8007134 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e16:	187b      	adds	r3, r7, r1
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d000      	beq.n	8006e22 <USB_EPStartXfer+0xdf6>
 8006e20:	e188      	b.n	8007134 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	18d3      	adds	r3, r2, r3
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	2094      	movs	r0, #148	; 0x94
 8006e32:	183b      	adds	r3, r7, r0
 8006e34:	4917      	ldr	r1, [pc, #92]	; (8006e94 <USB_EPStartXfer+0xe68>)
 8006e36:	400a      	ands	r2, r1
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	183a      	adds	r2, r7, r0
 8006e46:	8812      	ldrh	r2, [r2, #0]
 8006e48:	4913      	ldr	r1, [pc, #76]	; (8006e98 <USB_EPStartXfer+0xe6c>)
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	b292      	uxth	r2, r2
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e170      	b.n	8007134 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	78db      	ldrb	r3, [r3, #3]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d000      	beq.n	8006e5c <USB_EPStartXfer+0xe30>
 8006e5a:	e169      	b.n	8007130 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d919      	bls.n	8006e9c <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	1d7a      	adds	r2, r7, #5
 8006e6e:	32ff      	adds	r2, #255	; 0xff
 8006e70:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	1d7b      	adds	r3, r7, #5
 8006e78:	33ff      	adds	r3, #255	; 0xff
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	619a      	str	r2, [r3, #24]
 8006e82:	e013      	b.n	8006eac <USB_EPStartXfer+0xe80>
 8006e84:	ffff8000 	.word	0xffff8000
 8006e88:	00000402 	.word	0x00000402
 8006e8c:	ffff83ff 	.word	0xffff83ff
 8006e90:	00000406 	.word	0x00000406
 8006e94:	ffff8f8f 	.word	0xffff8f8f
 8006e98:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	1d7a      	adds	r2, r7, #5
 8006ea2:	32ff      	adds	r2, #255	; 0xff
 8006ea4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d000      	beq.n	8006eb6 <USB_EPStartXfer+0xe8a>
 8006eb4:	e075      	b.n	8006fa2 <USB_EPStartXfer+0xf76>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	21cc      	movs	r1, #204	; 0xcc
 8006eba:	187a      	adds	r2, r7, r1
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2250      	movs	r2, #80	; 0x50
 8006ec2:	5a9b      	ldrh	r3, [r3, r2]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	187b      	adds	r3, r7, r1
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	189b      	adds	r3, r3, r2
 8006ece:	187a      	adds	r2, r7, r1
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00da      	lsls	r2, r3, #3
 8006ed8:	187b      	adds	r3, r7, r1
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	18d3      	adds	r3, r2, r3
 8006ede:	4aaa      	ldr	r2, [pc, #680]	; (8007188 <USB_EPStartXfer+0x115c>)
 8006ee0:	4694      	mov	ip, r2
 8006ee2:	4463      	add	r3, ip
 8006ee4:	21c8      	movs	r1, #200	; 0xc8
 8006ee6:	187a      	adds	r2, r7, r1
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	1d7b      	adds	r3, r7, #5
 8006eec:	33ff      	adds	r3, #255	; 0xff
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d114      	bne.n	8006f1e <USB_EPStartXfer+0xef2>
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4aa3      	ldr	r2, [pc, #652]	; (800718c <USB_EPStartXfer+0x1160>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	187b      	adds	r3, r7, r1
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	187b      	adds	r3, r7, r1
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	4a9f      	ldr	r2, [pc, #636]	; (8007190 <USB_EPStartXfer+0x1164>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	187b      	adds	r3, r7, r1
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e066      	b.n	8006fec <USB_EPStartXfer+0xfc0>
 8006f1e:	1d7b      	adds	r3, r7, #5
 8006f20:	33ff      	adds	r3, #255	; 0xff
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b3e      	cmp	r3, #62	; 0x3e
 8006f26:	d81c      	bhi.n	8006f62 <USB_EPStartXfer+0xf36>
 8006f28:	1d7b      	adds	r3, r7, #5
 8006f2a:	33ff      	adds	r3, #255	; 0xff
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	21dc      	movs	r1, #220	; 0xdc
 8006f32:	187a      	adds	r2, r7, r1
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	1d7b      	adds	r3, r7, #5
 8006f38:	33ff      	adds	r3, #255	; 0xff
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0xf20>
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	187a      	adds	r2, r7, r1
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	23dc      	movs	r3, #220	; 0xdc
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	029b      	lsls	r3, r3, #10
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	23c8      	movs	r3, #200	; 0xc8
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	e044      	b.n	8006fec <USB_EPStartXfer+0xfc0>
 8006f62:	1d7b      	adds	r3, r7, #5
 8006f64:	33ff      	adds	r3, #255	; 0xff
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	21dc      	movs	r1, #220	; 0xdc
 8006f6c:	187a      	adds	r2, r7, r1
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	1d7b      	adds	r3, r7, #5
 8006f72:	33ff      	adds	r3, #255	; 0xff
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	221f      	movs	r2, #31
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d104      	bne.n	8006f86 <USB_EPStartXfer+0xf5a>
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	187a      	adds	r2, r7, r1
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	23dc      	movs	r3, #220	; 0xdc
 8006f88:	18fb      	adds	r3, r7, r3
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4a7f      	ldr	r2, [pc, #508]	; (8007190 <USB_EPStartXfer+0x1164>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	23c8      	movs	r3, #200	; 0xc8
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e024      	b.n	8006fec <USB_EPStartXfer+0xfc0>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d120      	bne.n	8006fec <USB_EPStartXfer+0xfc0>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	21d4      	movs	r1, #212	; 0xd4
 8006fae:	187a      	adds	r2, r7, r1
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2250      	movs	r2, #80	; 0x50
 8006fb6:	5a9b      	ldrh	r3, [r3, r2]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	001a      	movs	r2, r3
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	187a      	adds	r2, r7, r1
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	00da      	lsls	r2, r3, #3
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	18d3      	adds	r3, r2, r3
 8006fd2:	4a6d      	ldr	r2, [pc, #436]	; (8007188 <USB_EPStartXfer+0x115c>)
 8006fd4:	4694      	mov	ip, r2
 8006fd6:	4463      	add	r3, ip
 8006fd8:	21d0      	movs	r1, #208	; 0xd0
 8006fda:	187a      	adds	r2, r7, r1
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	1d7b      	adds	r3, r7, #5
 8006fe0:	33ff      	adds	r3, #255	; 0xff
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	187b      	adds	r3, r7, r1
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	22c4      	movs	r2, #196	; 0xc4
 8006ff0:	18ba      	adds	r2, r7, r2
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d000      	beq.n	8006ffe <USB_EPStartXfer+0xfd2>
 8006ffc:	e075      	b.n	80070ea <USB_EPStartXfer+0x10be>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	21bc      	movs	r1, #188	; 0xbc
 8007002:	187a      	adds	r2, r7, r1
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2250      	movs	r2, #80	; 0x50
 800700a:	5a9b      	ldrh	r3, [r3, r2]
 800700c:	b29b      	uxth	r3, r3
 800700e:	001a      	movs	r2, r3
 8007010:	187b      	adds	r3, r7, r1
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	189b      	adds	r3, r3, r2
 8007016:	187a      	adds	r2, r7, r1
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	00da      	lsls	r2, r3, #3
 8007020:	187b      	adds	r3, r7, r1
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	18d3      	adds	r3, r2, r3
 8007026:	4a5b      	ldr	r2, [pc, #364]	; (8007194 <USB_EPStartXfer+0x1168>)
 8007028:	4694      	mov	ip, r2
 800702a:	4463      	add	r3, ip
 800702c:	21b8      	movs	r1, #184	; 0xb8
 800702e:	187a      	adds	r2, r7, r1
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	1d7b      	adds	r3, r7, #5
 8007034:	33ff      	adds	r3, #255	; 0xff
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d114      	bne.n	8007066 <USB_EPStartXfer+0x103a>
 800703c:	187b      	adds	r3, r7, r1
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	4a51      	ldr	r2, [pc, #324]	; (800718c <USB_EPStartXfer+0x1160>)
 8007046:	4013      	ands	r3, r2
 8007048:	b29a      	uxth	r2, r3
 800704a:	187b      	adds	r3, r7, r1
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	187b      	adds	r3, r7, r1
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	4a4d      	ldr	r2, [pc, #308]	; (8007190 <USB_EPStartXfer+0x1164>)
 800705a:	4313      	orrs	r3, r2
 800705c:	b29a      	uxth	r2, r3
 800705e:	187b      	adds	r3, r7, r1
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e066      	b.n	8007134 <USB_EPStartXfer+0x1108>
 8007066:	1d7b      	adds	r3, r7, #5
 8007068:	33ff      	adds	r3, #255	; 0xff
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b3e      	cmp	r3, #62	; 0x3e
 800706e:	d81c      	bhi.n	80070aa <USB_EPStartXfer+0x107e>
 8007070:	1d7b      	adds	r3, r7, #5
 8007072:	33ff      	adds	r3, #255	; 0xff
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	21d8      	movs	r1, #216	; 0xd8
 800707a:	187a      	adds	r2, r7, r1
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	1d7b      	adds	r3, r7, #5
 8007080:	33ff      	adds	r3, #255	; 0xff
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	4013      	ands	r3, r2
 8007088:	d004      	beq.n	8007094 <USB_EPStartXfer+0x1068>
 800708a:	187b      	adds	r3, r7, r1
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	187a      	adds	r2, r7, r1
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	23d8      	movs	r3, #216	; 0xd8
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29a      	uxth	r2, r3
 80070a0:	23b8      	movs	r3, #184	; 0xb8
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e044      	b.n	8007134 <USB_EPStartXfer+0x1108>
 80070aa:	1d7b      	adds	r3, r7, #5
 80070ac:	33ff      	adds	r3, #255	; 0xff
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	21d8      	movs	r1, #216	; 0xd8
 80070b4:	187a      	adds	r2, r7, r1
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	1d7b      	adds	r3, r7, #5
 80070ba:	33ff      	adds	r3, #255	; 0xff
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	221f      	movs	r2, #31
 80070c0:	4013      	ands	r3, r2
 80070c2:	d104      	bne.n	80070ce <USB_EPStartXfer+0x10a2>
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	187a      	adds	r2, r7, r1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	23d8      	movs	r3, #216	; 0xd8
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	029b      	lsls	r3, r3, #10
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <USB_EPStartXfer+0x1164>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	23b8      	movs	r3, #184	; 0xb8
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	e024      	b.n	8007134 <USB_EPStartXfer+0x1108>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d120      	bne.n	8007134 <USB_EPStartXfer+0x1108>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2250      	movs	r2, #80	; 0x50
 80070f6:	5a9b      	ldrh	r3, [r3, r2]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	001a      	movs	r2, r3
 80070fc:	21c4      	movs	r1, #196	; 0xc4
 80070fe:	187b      	adds	r3, r7, r1
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	189b      	adds	r3, r3, r2
 8007104:	187a      	adds	r2, r7, r1
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	00da      	lsls	r2, r3, #3
 800710e:	187b      	adds	r3, r7, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	18d3      	adds	r3, r2, r3
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <USB_EPStartXfer+0x1168>)
 8007116:	4694      	mov	ip, r2
 8007118:	4463      	add	r3, ip
 800711a:	21c0      	movs	r1, #192	; 0xc0
 800711c:	187a      	adds	r2, r7, r1
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	1d7b      	adds	r3, r7, #5
 8007122:	33ff      	adds	r3, #255	; 0xff
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b29a      	uxth	r2, r3
 8007128:	187b      	adds	r3, r7, r1
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e001      	b.n	8007134 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e025      	b.n	8007180 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	18d3      	adds	r3, r2, r3
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29a      	uxth	r2, r3
 8007142:	208a      	movs	r0, #138	; 0x8a
 8007144:	183b      	adds	r3, r7, r0
 8007146:	4914      	ldr	r1, [pc, #80]	; (8007198 <USB_EPStartXfer+0x116c>)
 8007148:	400a      	ands	r2, r1
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	183b      	adds	r3, r7, r0
 800714e:	183a      	adds	r2, r7, r0
 8007150:	8812      	ldrh	r2, [r2, #0]
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	0149      	lsls	r1, r1, #5
 8007156:	404a      	eors	r2, r1
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	183b      	adds	r3, r7, r0
 800715c:	183a      	adds	r2, r7, r0
 800715e:	8812      	ldrh	r2, [r2, #0]
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	0189      	lsls	r1, r1, #6
 8007164:	404a      	eors	r2, r1
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	183a      	adds	r2, r7, r0
 8007174:	8812      	ldrh	r2, [r2, #0]
 8007176:	4909      	ldr	r1, [pc, #36]	; (800719c <USB_EPStartXfer+0x1170>)
 8007178:	430a      	orrs	r2, r1
 800717a:	b292      	uxth	r2, r2
 800717c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	0018      	movs	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	b043      	add	sp, #268	; 0x10c
 8007186:	bd90      	pop	{r4, r7, pc}
 8007188:	00000402 	.word	0x00000402
 800718c:	ffff83ff 	.word	0xffff83ff
 8007190:	ffff8000 	.word	0xffff8000
 8007194:	00000406 	.word	0x00000406
 8007198:	ffffbf8f 	.word	0xffffbf8f
 800719c:	ffff8080 	.word	0xffff8080

080071a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01d      	beq.n	80071ee <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	18d3      	adds	r3, r2, r3
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	200c      	movs	r0, #12
 80071c2:	183b      	adds	r3, r7, r0
 80071c4:	491b      	ldr	r1, [pc, #108]	; (8007234 <USB_EPSetStall+0x94>)
 80071c6:	400a      	ands	r2, r1
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	183b      	adds	r3, r7, r0
 80071cc:	183a      	adds	r2, r7, r0
 80071ce:	8812      	ldrh	r2, [r2, #0]
 80071d0:	2110      	movs	r1, #16
 80071d2:	404a      	eors	r2, r1
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	18d3      	adds	r3, r2, r3
 80071e0:	183a      	adds	r2, r7, r0
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	4914      	ldr	r1, [pc, #80]	; (8007238 <USB_EPSetStall+0x98>)
 80071e6:	430a      	orrs	r2, r1
 80071e8:	b292      	uxth	r2, r2
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e01d      	b.n	800722a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	18d3      	adds	r3, r2, r3
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	200e      	movs	r0, #14
 80071fe:	183b      	adds	r3, r7, r0
 8007200:	490e      	ldr	r1, [pc, #56]	; (800723c <USB_EPSetStall+0x9c>)
 8007202:	400a      	ands	r2, r1
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	183b      	adds	r3, r7, r0
 8007208:	183a      	adds	r2, r7, r0
 800720a:	8812      	ldrh	r2, [r2, #0]
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	0149      	lsls	r1, r1, #5
 8007210:	404a      	eors	r2, r1
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	18d3      	adds	r3, r2, r3
 800721e:	183a      	adds	r2, r7, r0
 8007220:	8812      	ldrh	r2, [r2, #0]
 8007222:	4905      	ldr	r1, [pc, #20]	; (8007238 <USB_EPSetStall+0x98>)
 8007224:	430a      	orrs	r2, r1
 8007226:	b292      	uxth	r2, r2
 8007228:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b004      	add	sp, #16
 8007232:	bd80      	pop	{r7, pc}
 8007234:	ffff8fbf 	.word	0xffff8fbf
 8007238:	ffff8080 	.word	0xffff8080
 800723c:	ffffbf8f 	.word	0xffffbf8f

08007240 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	7b1b      	ldrb	r3, [r3, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d000      	beq.n	8007254 <USB_EPClearStall+0x14>
 8007252:	e095      	b.n	8007380 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d046      	beq.n	80072ea <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	18d2      	adds	r2, r2, r3
 8007266:	2110      	movs	r1, #16
 8007268:	187b      	adds	r3, r7, r1
 800726a:	8812      	ldrh	r2, [r2, #0]
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	187b      	adds	r3, r7, r1
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	2240      	movs	r2, #64	; 0x40
 8007274:	4013      	ands	r3, r2
 8007276:	d016      	beq.n	80072a6 <USB_EPClearStall+0x66>
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	18d3      	adds	r3, r2, r3
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29a      	uxth	r2, r3
 8007286:	200e      	movs	r0, #14
 8007288:	183b      	adds	r3, r7, r0
 800728a:	4940      	ldr	r1, [pc, #256]	; (800738c <USB_EPClearStall+0x14c>)
 800728c:	400a      	ands	r2, r1
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	183a      	adds	r2, r7, r0
 800729c:	8812      	ldrh	r2, [r2, #0]
 800729e:	493c      	ldr	r1, [pc, #240]	; (8007390 <USB_EPClearStall+0x150>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	b292      	uxth	r2, r2
 80072a4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	78db      	ldrb	r3, [r3, #3]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d068      	beq.n	8007380 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	18d3      	adds	r3, r2, r3
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	200c      	movs	r0, #12
 80072be:	183b      	adds	r3, r7, r0
 80072c0:	4934      	ldr	r1, [pc, #208]	; (8007394 <USB_EPClearStall+0x154>)
 80072c2:	400a      	ands	r2, r1
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	183b      	adds	r3, r7, r0
 80072c8:	183a      	adds	r2, r7, r0
 80072ca:	8812      	ldrh	r2, [r2, #0]
 80072cc:	2120      	movs	r1, #32
 80072ce:	404a      	eors	r2, r1
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	18d3      	adds	r3, r2, r3
 80072dc:	183a      	adds	r2, r7, r0
 80072de:	8812      	ldrh	r2, [r2, #0]
 80072e0:	492d      	ldr	r1, [pc, #180]	; (8007398 <USB_EPClearStall+0x158>)
 80072e2:	430a      	orrs	r2, r1
 80072e4:	b292      	uxth	r2, r2
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e04a      	b.n	8007380 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	18d2      	adds	r2, r2, r3
 80072f4:	2116      	movs	r1, #22
 80072f6:	187b      	adds	r3, r7, r1
 80072f8:	8812      	ldrh	r2, [r2, #0]
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	187b      	adds	r3, r7, r1
 80072fe:	881a      	ldrh	r2, [r3, #0]
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4013      	ands	r3, r2
 8007306:	d016      	beq.n	8007336 <USB_EPClearStall+0xf6>
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	18d3      	adds	r3, r2, r3
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29a      	uxth	r2, r3
 8007316:	2014      	movs	r0, #20
 8007318:	183b      	adds	r3, r7, r0
 800731a:	491c      	ldr	r1, [pc, #112]	; (800738c <USB_EPClearStall+0x14c>)
 800731c:	400a      	ands	r2, r1
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	18d3      	adds	r3, r2, r3
 800732a:	183a      	adds	r2, r7, r0
 800732c:	8812      	ldrh	r2, [r2, #0]
 800732e:	491b      	ldr	r1, [pc, #108]	; (800739c <USB_EPClearStall+0x15c>)
 8007330:	430a      	orrs	r2, r1
 8007332:	b292      	uxth	r2, r2
 8007334:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	18d3      	adds	r3, r2, r3
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29a      	uxth	r2, r3
 8007344:	2012      	movs	r0, #18
 8007346:	183b      	adds	r3, r7, r0
 8007348:	4915      	ldr	r1, [pc, #84]	; (80073a0 <USB_EPClearStall+0x160>)
 800734a:	400a      	ands	r2, r1
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	183b      	adds	r3, r7, r0
 8007350:	183a      	adds	r2, r7, r0
 8007352:	8812      	ldrh	r2, [r2, #0]
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	0149      	lsls	r1, r1, #5
 8007358:	404a      	eors	r2, r1
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	183b      	adds	r3, r7, r0
 800735e:	183a      	adds	r2, r7, r0
 8007360:	8812      	ldrh	r2, [r2, #0]
 8007362:	2180      	movs	r1, #128	; 0x80
 8007364:	0189      	lsls	r1, r1, #6
 8007366:	404a      	eors	r2, r1
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	18d3      	adds	r3, r2, r3
 8007374:	183a      	adds	r2, r7, r0
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	4907      	ldr	r1, [pc, #28]	; (8007398 <USB_EPClearStall+0x158>)
 800737a:	430a      	orrs	r2, r1
 800737c:	b292      	uxth	r2, r2
 800737e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	0018      	movs	r0, r3
 8007384:	46bd      	mov	sp, r7
 8007386:	b006      	add	sp, #24
 8007388:	bd80      	pop	{r7, pc}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	ffff8f8f 	.word	0xffff8f8f
 8007390:	ffff80c0 	.word	0xffff80c0
 8007394:	ffff8fbf 	.word	0xffff8fbf
 8007398:	ffff8080 	.word	0xffff8080
 800739c:	ffffc080 	.word	0xffffc080
 80073a0:	ffffbf8f 	.word	0xffffbf8f

080073a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	000a      	movs	r2, r1
 80073ae:	1cfb      	adds	r3, r7, #3
 80073b0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80073b2:	1cfb      	adds	r3, r7, #3
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	224c      	movs	r2, #76	; 0x4c
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b002      	add	sp, #8
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2258      	movs	r2, #88	; 0x58
 80073d8:	5a9b      	ldrh	r3, [r3, r2]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	4a05      	ldr	r2, [pc, #20]	; (80073f4 <USB_DevConnect+0x28>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	b299      	uxth	r1, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2258      	movs	r2, #88	; 0x58
 80073e6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b002      	add	sp, #8
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	ffff8000 	.word	0xffff8000

080073f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2244      	movs	r2, #68	; 0x44
 8007404:	5a9b      	ldrh	r3, [r3, r2]
 8007406:	b29b      	uxth	r3, r3
 8007408:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b004      	add	sp, #16
 8007412:	bd80      	pop	{r7, pc}

08007414 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08c      	sub	sp, #48	; 0x30
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	0019      	movs	r1, r3
 8007420:	1dbb      	adds	r3, r7, #6
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	1c0a      	adds	r2, r1, #0
 8007428:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800742a:	1d3b      	adds	r3, r7, #4
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	3301      	adds	r3, #1
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800743c:	1dbb      	adds	r3, r7, #6
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	18d3      	adds	r3, r2, r3
 8007444:	2280      	movs	r2, #128	; 0x80
 8007446:	00d2      	lsls	r2, r2, #3
 8007448:	4694      	mov	ip, r2
 800744a:	4463      	add	r3, ip
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007452:	e01b      	b.n	800748c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	3301      	adds	r3, #1
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	001a      	movs	r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	b29a      	uxth	r2, r3
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	3302      	adds	r3, #2
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	3301      	adds	r3, #1
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	3b01      	subs	r3, #1
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e0      	bne.n	8007454 <USB_WritePMA+0x40>
  }
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b00c      	add	sp, #48	; 0x30
 800749a:	bd80      	pop	{r7, pc}

0800749c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	0019      	movs	r1, r3
 80074a8:	1dbb      	adds	r3, r7, #6
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	1d3b      	adds	r3, r7, #4
 80074ae:	1c0a      	adds	r2, r1, #0
 80074b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074c4:	1dbb      	adds	r3, r7, #6
 80074c6:	881a      	ldrh	r2, [r3, #0]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	2280      	movs	r2, #128	; 0x80
 80074ce:	00d2      	lsls	r2, r2, #3
 80074d0:	4694      	mov	ip, r2
 80074d2:	4463      	add	r3, ip
 80074d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
 80074da:	e018      	b.n	800750e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	3302      	adds	r3, #2
 80074e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3301      	adds	r3, #1
 80074f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	3b01      	subs	r3, #1
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e3      	bne.n	80074dc <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	2201      	movs	r2, #1
 800751a:	4013      	ands	r3, r2
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	b2da      	uxtb	r2, r3
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	701a      	strb	r2, [r3, #0]
  }
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b00a      	add	sp, #40	; 0x28
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	000a      	movs	r2, r1
 8007544:	1cfb      	adds	r3, r7, #3
 8007546:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007548:	230f      	movs	r3, #15
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	7c1b      	ldrb	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d116      	bne.n	8007586 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007558:	2380      	movs	r3, #128	; 0x80
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	2181      	movs	r1, #129	; 0x81
 8007562:	f002 f896 	bl	8009692 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	2101      	movs	r1, #1
 8007576:	f002 f88c 	bl	8009692 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	23b6      	movs	r3, #182	; 0xb6
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	2101      	movs	r1, #1
 8007582:	50d1      	str	r1, [r2, r3]
 8007584:	e013      	b.n	80075ae <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	2202      	movs	r2, #2
 800758c:	2181      	movs	r1, #129	; 0x81
 800758e:	f002 f880 	bl	8009692 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	2202      	movs	r2, #2
 800759e:	2101      	movs	r1, #1
 80075a0:	f002 f877 	bl	8009692 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	23b6      	movs	r3, #182	; 0xb6
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	2101      	movs	r1, #1
 80075ac:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	2308      	movs	r3, #8
 80075b2:	2203      	movs	r2, #3
 80075b4:	2182      	movs	r1, #130	; 0x82
 80075b6:	f002 f86c 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075c0:	2387      	movs	r3, #135	; 0x87
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	0018      	movs	r0, r3
 80075c6:	f002 f9fd 	bl	80099c4 <USBD_static_malloc>
 80075ca:	0001      	movs	r1, r0
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	23ae      	movs	r3, #174	; 0xae
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	23ae      	movs	r3, #174	; 0xae
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	58d3      	ldr	r3, [r2, r3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80075e0:	230f      	movs	r3, #15
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	2201      	movs	r2, #1
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e02c      	b.n	8007644 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	23ae      	movs	r3, #174	; 0xae
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	58d3      	ldr	r3, [r2, r3]
 80075f2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	23af      	movs	r3, #175	; 0xaf
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	58d3      	ldr	r3, [r2, r3]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	2385      	movs	r3, #133	; 0x85
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	2100      	movs	r1, #0
 8007608:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	2386      	movs	r3, #134	; 0x86
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	2100      	movs	r1, #0
 8007612:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	7c1b      	ldrb	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	2381      	movs	r3, #129	; 0x81
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	58d2      	ldr	r2, [r2, r3]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	2101      	movs	r1, #1
 800762c:	f002 f97c 	bl	8009928 <USBD_LL_PrepareReceive>
 8007630:	e008      	b.n	8007644 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	2381      	movs	r3, #129	; 0x81
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	58d2      	ldr	r2, [r2, r3]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	2101      	movs	r1, #1
 8007640:	f002 f972 	bl	8009928 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007644:	230f      	movs	r3, #15
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	000a      	movs	r2, r1
 800765c:	1cfb      	adds	r3, r7, #3
 800765e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007660:	230f      	movs	r3, #15
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2181      	movs	r1, #129	; 0x81
 800766c:	0018      	movs	r0, r3
 800766e:	f002 f847 	bl	8009700 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2101      	movs	r1, #1
 800767c:	0018      	movs	r0, r3
 800767e:	f002 f83f 	bl	8009700 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	23b6      	movs	r3, #182	; 0xb6
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	2100      	movs	r1, #0
 800768a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2182      	movs	r1, #130	; 0x82
 8007690:	0018      	movs	r0, r3
 8007692:	f002 f835 	bl	8009700 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	23ae      	movs	r3, #174	; 0xae
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	58d3      	ldr	r3, [r2, r3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d011      	beq.n	80076cc <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	23af      	movs	r3, #175	; 0xaf
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	58d3      	ldr	r3, [r2, r3]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	23ae      	movs	r3, #174	; 0xae
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	58d3      	ldr	r3, [r2, r3]
 80076bc:	0018      	movs	r0, r3
 80076be:	f002 f98d 	bl	80099dc <USBD_static_free>
    pdev->pClassData = NULL;
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	23ae      	movs	r3, #174	; 0xae
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	2100      	movs	r1, #0
 80076ca:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80076cc:	230f      	movs	r3, #15
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	781b      	ldrb	r3, [r3, #0]
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b004      	add	sp, #16
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	23ae      	movs	r3, #174	; 0xae
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	58d3      	ldr	r3, [r2, r3]
 80076ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80076f0:	230f      	movs	r3, #15
 80076f2:	18fb      	adds	r3, r7, r3
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80076f8:	230c      	movs	r3, #12
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	2200      	movs	r2, #0
 80076fe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007700:	2317      	movs	r3, #23
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	001a      	movs	r2, r3
 800770e:	2360      	movs	r3, #96	; 0x60
 8007710:	4013      	ands	r3, r2
 8007712:	d03d      	beq.n	8007790 <USBD_CDC_Setup+0xb4>
 8007714:	2b20      	cmp	r3, #32
 8007716:	d000      	beq.n	800771a <USBD_CDC_Setup+0x3e>
 8007718:	e094      	b.n	8007844 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	88db      	ldrh	r3, [r3, #6]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02b      	beq.n	800777a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b25b      	sxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	da12      	bge.n	8007752 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	23af      	movs	r3, #175	; 0xaf
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	58d3      	ldr	r3, [r2, r3]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800773a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	88d2      	ldrh	r2, [r2, #6]
 8007740:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007742:	6939      	ldr	r1, [r7, #16]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	88da      	ldrh	r2, [r3, #6]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	0018      	movs	r0, r3
 800774c:	f001 fbb2 	bl	8008eb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007750:	e083      	b.n	800785a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	7859      	ldrb	r1, [r3, #1]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4a40      	ldr	r2, [pc, #256]	; (8007868 <USBD_CDC_Setup+0x18c>)
 8007768:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88da      	ldrh	r2, [r3, #6]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0018      	movs	r0, r3
 8007774:	f001 fbd1 	bl	8008f1a <USBD_CtlPrepareRx>
      break;
 8007778:	e06f      	b.n	800785a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	23af      	movs	r3, #175	; 0xaf
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	58d3      	ldr	r3, [r2, r3]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	7850      	ldrb	r0, [r2, #1]
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	4798      	blx	r3
      break;
 800778e:	e064      	b.n	800785a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b0b      	cmp	r3, #11
 8007796:	d037      	beq.n	8007808 <USBD_CDC_Setup+0x12c>
 8007798:	dc47      	bgt.n	800782a <USBD_CDC_Setup+0x14e>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <USBD_CDC_Setup+0xc8>
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	d019      	beq.n	80077d6 <USBD_CDC_Setup+0xfa>
 80077a2:	e042      	b.n	800782a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	23a7      	movs	r3, #167	; 0xa7
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	5cd3      	ldrb	r3, [r2, r3]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d107      	bne.n	80077c0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077b0:	230c      	movs	r3, #12
 80077b2:	18f9      	adds	r1, r7, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	0018      	movs	r0, r3
 80077ba:	f001 fb7b 	bl	8008eb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077be:	e040      	b.n	8007842 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0011      	movs	r1, r2
 80077c6:	0018      	movs	r0, r3
 80077c8:	f001 faf6 	bl	8008db8 <USBD_CtlError>
            ret = USBD_FAIL;
 80077cc:	2317      	movs	r3, #23
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	2202      	movs	r2, #2
 80077d2:	701a      	strb	r2, [r3, #0]
          break;
 80077d4:	e035      	b.n	8007842 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	23a7      	movs	r3, #167	; 0xa7
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	5cd3      	ldrb	r3, [r2, r3]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d107      	bne.n	80077f2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80077e2:	230f      	movs	r3, #15
 80077e4:	18f9      	adds	r1, r7, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	0018      	movs	r0, r3
 80077ec:	f001 fb62 	bl	8008eb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077f0:	e027      	b.n	8007842 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f001 fadd 	bl	8008db8 <USBD_CtlError>
            ret = USBD_FAIL;
 80077fe:	2317      	movs	r3, #23
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	2202      	movs	r2, #2
 8007804:	701a      	strb	r2, [r3, #0]
          break;
 8007806:	e01c      	b.n	8007842 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	23a7      	movs	r3, #167	; 0xa7
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d015      	beq.n	8007840 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	0011      	movs	r1, r2
 800781a:	0018      	movs	r0, r3
 800781c:	f001 facc 	bl	8008db8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007820:	2317      	movs	r3, #23
 8007822:	18fb      	adds	r3, r7, r3
 8007824:	2202      	movs	r2, #2
 8007826:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007828:	e00a      	b.n	8007840 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	0011      	movs	r1, r2
 8007830:	0018      	movs	r0, r3
 8007832:	f001 fac1 	bl	8008db8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007836:	2317      	movs	r3, #23
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	2202      	movs	r2, #2
 800783c:	701a      	strb	r2, [r3, #0]
          break;
 800783e:	e000      	b.n	8007842 <USBD_CDC_Setup+0x166>
          break;
 8007840:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007842:	e00a      	b.n	800785a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	0011      	movs	r1, r2
 800784a:	0018      	movs	r0, r3
 800784c:	f001 fab4 	bl	8008db8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007850:	2317      	movs	r3, #23
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	2202      	movs	r2, #2
 8007856:	701a      	strb	r2, [r3, #0]
      break;
 8007858:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800785a:	2317      	movs	r3, #23
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	781b      	ldrb	r3, [r3, #0]
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b006      	add	sp, #24
 8007866:	bd80      	pop	{r7, pc}
 8007868:	00000201 	.word	0x00000201

0800786c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	000a      	movs	r2, r1
 8007876:	1cfb      	adds	r3, r7, #3
 8007878:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	23ae      	movs	r3, #174	; 0xae
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	58d3      	ldr	r3, [r2, r3]
 8007882:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	23b0      	movs	r3, #176	; 0xb0
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	58d3      	ldr	r3, [r2, r3]
 800788c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	23ae      	movs	r3, #174	; 0xae
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	58d3      	ldr	r3, [r2, r3]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d03e      	beq.n	8007918 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800789a:	1cfb      	adds	r3, r7, #3
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	0013      	movs	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	18cb      	adds	r3, r1, r3
 80078aa:	331c      	adds	r3, #28
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d02b      	beq.n	800790a <USBD_CDC_DataIn+0x9e>
 80078b2:	1cfb      	adds	r3, r7, #3
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	0013      	movs	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	189b      	adds	r3, r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	18cb      	adds	r3, r1, r3
 80078c2:	331c      	adds	r3, #28
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	1cfb      	adds	r3, r7, #3
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	0013      	movs	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	189b      	adds	r3, r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	18cb      	adds	r3, r1, r3
 80078d6:	3338      	adds	r3, #56	; 0x38
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	0019      	movs	r1, r3
 80078dc:	f7f8 fcac 	bl	8000238 <__aeabi_uidivmod>
 80078e0:	1e0b      	subs	r3, r1, #0
 80078e2:	d112      	bne.n	800790a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80078e4:	1cfb      	adds	r3, r7, #3
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	0013      	movs	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	189b      	adds	r3, r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	18cb      	adds	r3, r1, r3
 80078f4:	331c      	adds	r3, #28
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078fa:	1cfb      	adds	r3, r7, #3
 80078fc:	7819      	ldrb	r1, [r3, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	f001 ffd9 	bl	80098ba <USBD_LL_Transmit>
 8007908:	e004      	b.n	8007914 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	2385      	movs	r3, #133	; 0x85
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	2100      	movs	r1, #0
 8007912:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	0018      	movs	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	b004      	add	sp, #16
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	000a      	movs	r2, r1
 800792c:	1cfb      	adds	r3, r7, #3
 800792e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	23ae      	movs	r3, #174	; 0xae
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	58d3      	ldr	r3, [r2, r3]
 8007938:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800793a:	1cfb      	adds	r3, r7, #3
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0011      	movs	r1, r2
 8007942:	0018      	movs	r0, r3
 8007944:	f002 f827 	bl	8009996 <USBD_LL_GetRxDataSize>
 8007948:	0001      	movs	r1, r0
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	2383      	movs	r3, #131	; 0x83
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	23ae      	movs	r3, #174	; 0xae
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	58d3      	ldr	r3, [r2, r3]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d011      	beq.n	8007982 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	23af      	movs	r3, #175	; 0xaf
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	58d3      	ldr	r3, [r2, r3]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	68f9      	ldr	r1, [r7, #12]
 800796a:	2381      	movs	r3, #129	; 0x81
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	58c8      	ldr	r0, [r1, r3]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2183      	movs	r1, #131	; 0x83
 8007974:	0089      	lsls	r1, r1, #2
 8007976:	468c      	mov	ip, r1
 8007978:	4463      	add	r3, ip
 800797a:	0019      	movs	r1, r3
 800797c:	4790      	blx	r2

    return USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8007982:	2302      	movs	r3, #2
  }
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b004      	add	sp, #16
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	23ae      	movs	r3, #174	; 0xae
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	58d3      	ldr	r3, [r2, r3]
 800799c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	23af      	movs	r3, #175	; 0xaf
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	58d3      	ldr	r3, [r2, r3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d019      	beq.n	80079de <USBD_CDC_EP0_RxReady+0x52>
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	5cd3      	ldrb	r3, [r2, r3]
 80079b2:	2bff      	cmp	r3, #255	; 0xff
 80079b4:	d013      	beq.n	80079de <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	23af      	movs	r3, #175	; 0xaf
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	58d3      	ldr	r3, [r2, r3]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	2280      	movs	r2, #128	; 0x80
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80079c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4c06      	ldr	r4, [pc, #24]	; (80079e8 <USBD_CDC_EP0_RxReady+0x5c>)
 80079ce:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079d0:	b292      	uxth	r2, r2
 80079d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	2380      	movs	r3, #128	; 0x80
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	21ff      	movs	r1, #255	; 0xff
 80079dc:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	0018      	movs	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b005      	add	sp, #20
 80079e6:	bd90      	pop	{r4, r7, pc}
 80079e8:	00000201 	.word	0x00000201

080079ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2243      	movs	r2, #67	; 0x43
 80079f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80079fa:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000098 	.word	0x20000098

08007a08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2243      	movs	r2, #67	; 0x43
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a16:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8007a18:	0018      	movs	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000054 	.word	0x20000054

08007a24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2243      	movs	r2, #67	; 0x43
 8007a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a32:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8007a34:	0018      	movs	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b002      	add	sp, #8
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200000dc 	.word	0x200000dc

08007a40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220a      	movs	r2, #10
 8007a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a4e:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007a50:	0018      	movs	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b002      	add	sp, #8
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000010 	.word	0x20000010

08007a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a66:	200f      	movs	r0, #15
 8007a68:	183b      	adds	r3, r7, r0
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	23af      	movs	r3, #175	; 0xaf
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007a7e:	183b      	adds	r3, r7, r0
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007a84:	230f      	movs	r3, #15
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	781b      	ldrb	r3, [r3, #0]
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	1dbb      	adds	r3, r7, #6
 8007a9e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	23ae      	movs	r3, #174	; 0xae
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	58d3      	ldr	r3, [r2, r3]
 8007aa8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	2382      	movs	r3, #130	; 0x82
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8007ab4:	1dbb      	adds	r3, r7, #6
 8007ab6:	8819      	ldrh	r1, [r3, #0]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	2384      	movs	r3, #132	; 0x84
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b006      	add	sp, #24
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	23ae      	movs	r3, #174	; 0xae
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	58d3      	ldr	r3, [r2, r3]
 8007adc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	2381      	movs	r3, #129	; 0x81
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	0018      	movs	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b004      	add	sp, #16
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	23ae      	movs	r3, #174	; 0xae
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	58d3      	ldr	r3, [r2, r3]
 8007b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	23ae      	movs	r3, #174	; 0xae
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	58d3      	ldr	r3, [r2, r3]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d022      	beq.n	8007b56 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	2385      	movs	r3, #133	; 0x85
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	58d3      	ldr	r3, [r2, r3]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11a      	bne.n	8007b52 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	2385      	movs	r3, #133	; 0x85
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	2101      	movs	r1, #1
 8007b24:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	2384      	movs	r3, #132	; 0x84
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	58d2      	ldr	r2, [r2, r3]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	2382      	movs	r3, #130	; 0x82
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	2384      	movs	r3, #132	; 0x84
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	000a      	movs	r2, r1
 8007b48:	2181      	movs	r1, #129	; 0x81
 8007b4a:	f001 feb6 	bl	80098ba <USBD_LL_Transmit>

      return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e002      	b.n	8007b58 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	23ae      	movs	r3, #174	; 0xae
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	58d3      	ldr	r3, [r2, r3]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	23ae      	movs	r3, #174	; 0xae
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	58d3      	ldr	r3, [r2, r3]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d019      	beq.n	8007bb2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7c1b      	ldrb	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	2381      	movs	r3, #129	; 0x81
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	58d2      	ldr	r2, [r2, r3]
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	2101      	movs	r1, #1
 8007b96:	f001 fec7 	bl	8009928 <USBD_LL_PrepareReceive>
 8007b9a:	e008      	b.n	8007bae <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	2381      	movs	r3, #129	; 0x81
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	58d2      	ldr	r2, [r2, r3]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	2101      	movs	r1, #1
 8007baa:	f001 febd 	bl	8009928 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	1dfb      	adds	r3, r7, #7
 8007bc8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e020      	b.n	8007c16 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	23ad      	movs	r3, #173	; 0xad
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	58d3      	ldr	r3, [r2, r3]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	23ad      	movs	r3, #173	; 0xad
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	2100      	movs	r1, #0
 8007be8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	23ac      	movs	r3, #172	; 0xac
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	23a7      	movs	r3, #167	; 0xa7
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	2101      	movs	r1, #1
 8007c02:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1dfa      	adds	r2, r7, #7
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f001 fcb6 	bl	8009580 <USBD_LL_Init>

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b004      	add	sp, #16
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c28:	200f      	movs	r0, #15
 8007c2a:	183b      	adds	r3, r7, r0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	23ad      	movs	r3, #173	; 0xad
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007c40:	183b      	adds	r3, r7, r0
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e003      	b.n	8007c50 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c48:	230f      	movs	r3, #15
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007c50:	230f      	movs	r3, #15
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
}
 8007c56:	0018      	movs	r0, r3
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b004      	add	sp, #16
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f001 fced 	bl	8009648 <USBD_LL_Start>

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	0018      	movs	r0, r3
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	0018      	movs	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b002      	add	sp, #8
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c8a:	b590      	push	{r4, r7, lr}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	000a      	movs	r2, r1
 8007c94:	1cfb      	adds	r3, r7, #3
 8007c96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c98:	240f      	movs	r4, #15
 8007c9a:	193b      	adds	r3, r7, r4
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	23ad      	movs	r3, #173	; 0xad
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	58d3      	ldr	r3, [r2, r3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00e      	beq.n	8007cca <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	23ad      	movs	r3, #173	; 0xad
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	58d3      	ldr	r3, [r2, r3]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	1cfa      	adds	r2, r7, #3
 8007cb8:	7811      	ldrb	r1, [r2, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	0010      	movs	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	1e03      	subs	r3, r0, #0
 8007cc2:	d102      	bne.n	8007cca <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007cc4:	193b      	adds	r3, r7, r4
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007cca:	230f      	movs	r3, #15
 8007ccc:	18fb      	adds	r3, r7, r3
 8007cce:	781b      	ldrb	r3, [r3, #0]
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b005      	add	sp, #20
 8007cd6:	bd90      	pop	{r4, r7, pc}

08007cd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	000a      	movs	r2, r1
 8007ce2:	1cfb      	adds	r3, r7, #3
 8007ce4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	23ad      	movs	r3, #173	; 0xad
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	58d3      	ldr	r3, [r2, r3]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	1cfa      	adds	r2, r7, #3
 8007cf2:	7811      	ldrb	r1, [r2, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	0010      	movs	r0, r2
 8007cf8:	4798      	blx	r3

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b002      	add	sp, #8
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	22aa      	movs	r2, #170	; 0xaa
 8007d12:	0092      	lsls	r2, r2, #2
 8007d14:	4694      	mov	ip, r2
 8007d16:	4463      	add	r3, ip
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	0011      	movs	r1, r2
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f001 f810 	bl	8008d42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	23a5      	movs	r3, #165	; 0xa5
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	2101      	movs	r1, #1
 8007d2a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a23      	ldr	r2, [pc, #140]	; (8007dbc <USBD_LL_SetupStage+0xb8>)
 8007d30:	5a9b      	ldrh	r3, [r3, r2]
 8007d32:	0019      	movs	r1, r3
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	23a6      	movs	r3, #166	; 0xa6
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	23aa      	movs	r3, #170	; 0xaa
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	5cd3      	ldrb	r3, [r2, r3]
 8007d44:	001a      	movs	r2, r3
 8007d46:	231f      	movs	r3, #31
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d019      	beq.n	8007d82 <USBD_LL_SetupStage+0x7e>
 8007d4e:	d822      	bhi.n	8007d96 <USBD_LL_SetupStage+0x92>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <USBD_LL_SetupStage+0x56>
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d00a      	beq.n	8007d6e <USBD_LL_SetupStage+0x6a>
 8007d58:	e01d      	b.n	8007d96 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	22aa      	movs	r2, #170	; 0xaa
 8007d5e:	0092      	lsls	r2, r2, #2
 8007d60:	189a      	adds	r2, r3, r2
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0011      	movs	r1, r2
 8007d66:	0018      	movs	r0, r3
 8007d68:	f000 fa10 	bl	800818c <USBD_StdDevReq>
      break;
 8007d6c:	e020      	b.n	8007db0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	22aa      	movs	r2, #170	; 0xaa
 8007d72:	0092      	lsls	r2, r2, #2
 8007d74:	189a      	adds	r2, r3, r2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f000 fa78 	bl	8008270 <USBD_StdItfReq>
      break;
 8007d80:	e016      	b.n	8007db0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	22aa      	movs	r2, #170	; 0xaa
 8007d86:	0092      	lsls	r2, r2, #2
 8007d88:	189a      	adds	r2, r3, r2
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	0011      	movs	r1, r2
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 fac5 	bl	800831e <USBD_StdEPReq>
      break;
 8007d94:	e00c      	b.n	8007db0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	23aa      	movs	r3, #170	; 0xaa
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	5cd3      	ldrb	r3, [r2, r3]
 8007d9e:	227f      	movs	r2, #127	; 0x7f
 8007da0:	4393      	bics	r3, r2
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	0011      	movs	r1, r2
 8007da8:	0018      	movs	r0, r3
 8007daa:	f001 fcd4 	bl	8009756 <USBD_LL_StallEP>
      break;
 8007dae:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	0018      	movs	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b002      	add	sp, #8
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	000002ae 	.word	0x000002ae

08007dc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	200b      	movs	r0, #11
 8007dcc:	183b      	adds	r3, r7, r0
 8007dce:	1c0a      	adds	r2, r1, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dd2:	183b      	adds	r3, r7, r0
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d154      	bne.n	8007e84 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3355      	adds	r3, #85	; 0x55
 8007dde:	33ff      	adds	r3, #255	; 0xff
 8007de0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	23a5      	movs	r3, #165	; 0xa5
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	58d3      	ldr	r3, [r2, r3]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d139      	bne.n	8007e62 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d919      	bls.n	8007e2e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d203      	bcs.n	8007e1c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	e002      	b.n	8007e22 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	001a      	movs	r2, r3
 8007e28:	f001 f89b 	bl	8008f62 <USBD_CtlContinueRx>
 8007e2c:	e045      	b.n	8007eba <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	23ad      	movs	r3, #173	; 0xad
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	58d3      	ldr	r3, [r2, r3]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00d      	beq.n	8007e58 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	23a7      	movs	r3, #167	; 0xa7
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d107      	bne.n	8007e58 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	23ad      	movs	r3, #173	; 0xad
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	58d3      	ldr	r3, [r2, r3]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	0010      	movs	r0, r2
 8007e56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f001 f894 	bl	8008f88 <USBD_CtlSendStatus>
 8007e60:	e02b      	b.n	8007eba <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	23a5      	movs	r3, #165	; 0xa5
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	58d3      	ldr	r3, [r2, r3]
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d125      	bne.n	8007eba <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	23a5      	movs	r3, #165	; 0xa5
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	2100      	movs	r1, #0
 8007e76:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f001 fc6a 	bl	8009756 <USBD_LL_StallEP>
 8007e82:	e01a      	b.n	8007eba <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	23ad      	movs	r3, #173	; 0xad
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	58d3      	ldr	r3, [r2, r3]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d011      	beq.n	8007eb6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	23a7      	movs	r3, #167	; 0xa7
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d10b      	bne.n	8007eb6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	23ad      	movs	r3, #173	; 0xad
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	58d3      	ldr	r3, [r2, r3]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	220b      	movs	r2, #11
 8007eaa:	18ba      	adds	r2, r7, r2
 8007eac:	7811      	ldrb	r1, [r2, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	0010      	movs	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	e001      	b.n	8007eba <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e000      	b.n	8007ebc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	b006      	add	sp, #24
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	200b      	movs	r0, #11
 8007ed0:	183b      	adds	r3, r7, r0
 8007ed2:	1c0a      	adds	r2, r1, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ed6:	183b      	adds	r3, r7, r0
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d000      	beq.n	8007ee0 <USBD_LL_DataInStage+0x1c>
 8007ede:	e08e      	b.n	8007ffe <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	23a5      	movs	r3, #165	; 0xa5
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	58d3      	ldr	r3, [r2, r3]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d164      	bne.n	8007fbc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d915      	bls.n	8007f2a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	1ad2      	subs	r2, r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0018      	movs	r0, r3
 8007f18:	f000 ffec 	bl	8008ef4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	f001 fd00 	bl	8009928 <USBD_LL_PrepareReceive>
 8007f28:	e059      	b.n	8007fde <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	0019      	movs	r1, r3
 8007f34:	0010      	movs	r0, r2
 8007f36:	f7f8 f97f 	bl	8000238 <__aeabi_uidivmod>
 8007f3a:	1e0b      	subs	r3, r1, #0
 8007f3c:	d11f      	bne.n	8007f7e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d319      	bcc.n	8007f7e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	23a6      	movs	r3, #166	; 0xa6
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d211      	bcs.n	8007f7e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	0018      	movs	r0, r3
 8007f62:	f000 ffc7 	bl	8008ef4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	23a6      	movs	r3, #166	; 0xa6
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	f001 fcd6 	bl	8009928 <USBD_LL_PrepareReceive>
 8007f7c:	e02f      	b.n	8007fde <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	23ad      	movs	r3, #173	; 0xad
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	58d3      	ldr	r3, [r2, r3]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00d      	beq.n	8007fa8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	23a7      	movs	r3, #167	; 0xa7
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d107      	bne.n	8007fa8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	23ad      	movs	r3, #173	; 0xad
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	58d3      	ldr	r3, [r2, r3]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2180      	movs	r1, #128	; 0x80
 8007fac:	0018      	movs	r0, r3
 8007fae:	f001 fbd2 	bl	8009756 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f000 fffb 	bl	8008fb0 <USBD_CtlReceiveStatus>
 8007fba:	e010      	b.n	8007fde <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	23a5      	movs	r3, #165	; 0xa5
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	58d3      	ldr	r3, [r2, r3]
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d005      	beq.n	8007fd4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	23a5      	movs	r3, #165	; 0xa5
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f001 fbbc 	bl	8009756 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	23a8      	movs	r3, #168	; 0xa8
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	5cd3      	ldrb	r3, [r2, r3]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d124      	bne.n	8008034 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f7ff fe43 	bl	8007c78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	23a8      	movs	r3, #168	; 0xa8
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	54d1      	strb	r1, [r2, r3]
 8007ffc:	e01a      	b.n	8008034 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	23ad      	movs	r3, #173	; 0xad
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	58d3      	ldr	r3, [r2, r3]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d011      	beq.n	8008030 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	23a7      	movs	r3, #167	; 0xa7
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008014:	2b03      	cmp	r3, #3
 8008016:	d10b      	bne.n	8008030 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	23ad      	movs	r3, #173	; 0xad
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	58d3      	ldr	r3, [r2, r3]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	220b      	movs	r2, #11
 8008024:	18ba      	adds	r2, r7, r2
 8008026:	7811      	ldrb	r1, [r2, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	0010      	movs	r0, r2
 800802c:	4798      	blx	r3
 800802e:	e001      	b.n	8008034 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	e000      	b.n	8008036 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	0018      	movs	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	b006      	add	sp, #24
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	f001 fb20 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	23ac      	movs	r3, #172	; 0xac
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2101      	movs	r1, #1
 800805a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	23b2      	movs	r3, #178	; 0xb2
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	2140      	movs	r1, #64	; 0x40
 8008064:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	2340      	movs	r3, #64	; 0x40
 800806a:	2200      	movs	r2, #0
 800806c:	2180      	movs	r1, #128	; 0x80
 800806e:	f001 fb10 	bl	8009692 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2240      	movs	r2, #64	; 0x40
 800807c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	23a7      	movs	r3, #167	; 0xa7
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	2101      	movs	r1, #1
 8008086:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	23a5      	movs	r3, #165	; 0xa5
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	2100      	movs	r1, #0
 8008090:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	23a9      	movs	r3, #169	; 0xa9
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	2100      	movs	r1, #0
 80080a0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	23ae      	movs	r3, #174	; 0xae
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	58d3      	ldr	r3, [r2, r3]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	23ad      	movs	r3, #173	; 0xad
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	58d3      	ldr	r3, [r2, r3]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b2d9      	uxtb	r1, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	0018      	movs	r0, r3
 80080c2:	4790      	blx	r2
  }

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	0018      	movs	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b002      	add	sp, #8
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	000a      	movs	r2, r1
 80080d8:	1cfb      	adds	r3, r7, #3
 80080da:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1cfa      	adds	r2, r7, #3
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	0018      	movs	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b002      	add	sp, #8
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	23a7      	movs	r3, #167	; 0xa7
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	5cd1      	ldrb	r1, [r2, r3]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a06      	ldr	r2, [pc, #24]	; (800811c <USBD_LL_Suspend+0x2c>)
 8008104:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	23a7      	movs	r3, #167	; 0xa7
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	2104      	movs	r1, #4
 800810e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	0018      	movs	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	b002      	add	sp, #8
 8008118:	bd80      	pop	{r7, pc}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	0000029d 	.word	0x0000029d

08008120 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	23a7      	movs	r3, #167	; 0xa7
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	5cd3      	ldrb	r3, [r2, r3]
 8008130:	2b04      	cmp	r3, #4
 8008132:	d106      	bne.n	8008142 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a05      	ldr	r2, [pc, #20]	; (800814c <USBD_LL_Resume+0x2c>)
 8008138:	5c99      	ldrb	r1, [r3, r2]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	23a7      	movs	r3, #167	; 0xa7
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}
 800814c:	0000029d 	.word	0x0000029d

08008150 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	23a7      	movs	r3, #167	; 0xa7
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	5cd3      	ldrb	r3, [r2, r3]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d10e      	bne.n	8008182 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	23ad      	movs	r3, #173	; 0xad
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	58d3      	ldr	r3, [r2, r3]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	23ad      	movs	r3, #173	; 0xad
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	58d3      	ldr	r3, [r2, r3]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	0010      	movs	r0, r2
 8008180:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	0018      	movs	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008196:	230f      	movs	r3, #15
 8008198:	18fb      	adds	r3, r7, r3
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	001a      	movs	r2, r3
 80081a4:	2360      	movs	r3, #96	; 0x60
 80081a6:	4013      	ands	r3, r2
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d004      	beq.n	80081b6 <USBD_StdDevReq+0x2a>
 80081ac:	d84f      	bhi.n	800824e <USBD_StdDevReq+0xc2>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <USBD_StdDevReq+0x3e>
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d14b      	bne.n	800824e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	23ad      	movs	r3, #173	; 0xad
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	58d3      	ldr	r3, [r2, r3]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	0010      	movs	r0, r2
 80081c6:	4798      	blx	r3
      break;
 80081c8:	e048      	b.n	800825c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	d835      	bhi.n	800823e <USBD_StdDevReq+0xb2>
 80081d2:	009a      	lsls	r2, r3, #2
 80081d4:	4b25      	ldr	r3, [pc, #148]	; (800826c <USBD_StdDevReq+0xe0>)
 80081d6:	18d3      	adds	r3, r2, r3
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	0011      	movs	r1, r2
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 fa52 	bl	800868c <USBD_GetDescriptor>
          break;
 80081e8:	e030      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	0011      	movs	r1, r2
 80081f0:	0018      	movs	r0, r3
 80081f2:	f000 fbfd 	bl	80089f0 <USBD_SetAddress>
          break;
 80081f6:	e029      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0011      	movs	r1, r2
 80081fe:	0018      	movs	r0, r3
 8008200:	f000 fc4a 	bl	8008a98 <USBD_SetConfig>
          break;
 8008204:	e022      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	0011      	movs	r1, r2
 800820c:	0018      	movs	r0, r3
 800820e:	f000 fce7 	bl	8008be0 <USBD_GetConfig>
          break;
 8008212:	e01b      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0011      	movs	r1, r2
 800821a:	0018      	movs	r0, r3
 800821c:	f000 fd1b 	bl	8008c56 <USBD_GetStatus>
          break;
 8008220:	e014      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0011      	movs	r1, r2
 8008228:	0018      	movs	r0, r3
 800822a:	f000 fd4e 	bl	8008cca <USBD_SetFeature>
          break;
 800822e:	e00d      	b.n	800824c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	0011      	movs	r1, r2
 8008236:	0018      	movs	r0, r3
 8008238:	f000 fd5d 	bl	8008cf6 <USBD_ClrFeature>
          break;
 800823c:	e006      	b.n	800824c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0011      	movs	r1, r2
 8008244:	0018      	movs	r0, r3
 8008246:	f000 fdb7 	bl	8008db8 <USBD_CtlError>
          break;
 800824a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800824c:	e006      	b.n	800825c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0011      	movs	r1, r2
 8008254:	0018      	movs	r0, r3
 8008256:	f000 fdaf 	bl	8008db8 <USBD_CtlError>
      break;
 800825a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800825c:	230f      	movs	r3, #15
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	781b      	ldrb	r3, [r3, #0]
}
 8008262:	0018      	movs	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	b004      	add	sp, #16
 8008268:	bd80      	pop	{r7, pc}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	0800a9b8 	.word	0x0800a9b8

08008270 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008270:	b5b0      	push	{r4, r5, r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	230f      	movs	r3, #15
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	001a      	movs	r2, r3
 8008288:	2360      	movs	r3, #96	; 0x60
 800828a:	4013      	ands	r3, r2
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d004      	beq.n	800829a <USBD_StdItfReq+0x2a>
 8008290:	d839      	bhi.n	8008306 <USBD_StdItfReq+0x96>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <USBD_StdItfReq+0x2a>
 8008296:	2b20      	cmp	r3, #32
 8008298:	d135      	bne.n	8008306 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	23a7      	movs	r3, #167	; 0xa7
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	5cd3      	ldrb	r3, [r2, r3]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d825      	bhi.n	80082f4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	889b      	ldrh	r3, [r3, #4]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d819      	bhi.n	80082e6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	23ad      	movs	r3, #173	; 0xad
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	58d3      	ldr	r3, [r2, r3]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	250f      	movs	r5, #15
 80082be:	197c      	adds	r4, r7, r5
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	0010      	movs	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	0003      	movs	r3, r0
 80082ca:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d116      	bne.n	8008302 <USBD_StdItfReq+0x92>
 80082d4:	197b      	adds	r3, r7, r5
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d112      	bne.n	8008302 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 fe52 	bl	8008f88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082e4:	e00d      	b.n	8008302 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	0011      	movs	r1, r2
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 fd63 	bl	8008db8 <USBD_CtlError>
          break;
 80082f2:	e006      	b.n	8008302 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	0011      	movs	r1, r2
 80082fa:	0018      	movs	r0, r3
 80082fc:	f000 fd5c 	bl	8008db8 <USBD_CtlError>
          break;
 8008300:	e000      	b.n	8008304 <USBD_StdItfReq+0x94>
          break;
 8008302:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008304:	e006      	b.n	8008314 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	0011      	movs	r1, r2
 800830c:	0018      	movs	r0, r3
 800830e:	f000 fd53 	bl	8008db8 <USBD_CtlError>
      break;
 8008312:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	0018      	movs	r0, r3
 8008318:	46bd      	mov	sp, r7
 800831a:	b004      	add	sp, #16
 800831c:	bdb0      	pop	{r4, r5, r7, pc}

0800831e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800831e:	b5b0      	push	{r4, r5, r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008328:	230f      	movs	r3, #15
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	889a      	ldrh	r2, [r3, #4]
 8008334:	230e      	movs	r3, #14
 8008336:	18fb      	adds	r3, r7, r3
 8008338:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	001a      	movs	r2, r3
 8008340:	2360      	movs	r3, #96	; 0x60
 8008342:	4013      	ands	r3, r2
 8008344:	2b40      	cmp	r3, #64	; 0x40
 8008346:	d006      	beq.n	8008356 <USBD_StdEPReq+0x38>
 8008348:	d900      	bls.n	800834c <USBD_StdEPReq+0x2e>
 800834a:	e190      	b.n	800866e <USBD_StdEPReq+0x350>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00c      	beq.n	800836a <USBD_StdEPReq+0x4c>
 8008350:	2b20      	cmp	r3, #32
 8008352:	d000      	beq.n	8008356 <USBD_StdEPReq+0x38>
 8008354:	e18b      	b.n	800866e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	23ad      	movs	r3, #173	; 0xad
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	58d3      	ldr	r3, [r2, r3]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	0010      	movs	r0, r2
 8008366:	4798      	blx	r3
      break;
 8008368:	e188      	b.n	800867c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	001a      	movs	r2, r3
 8008370:	2360      	movs	r3, #96	; 0x60
 8008372:	4013      	ands	r3, r2
 8008374:	2b20      	cmp	r3, #32
 8008376:	d10f      	bne.n	8008398 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	23ad      	movs	r3, #173	; 0xad
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	58d3      	ldr	r3, [r2, r3]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	250f      	movs	r5, #15
 8008384:	197c      	adds	r4, r7, r5
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	0010      	movs	r0, r2
 800838c:	4798      	blx	r3
 800838e:	0003      	movs	r3, r0
 8008390:	7023      	strb	r3, [r4, #0]

        return ret;
 8008392:	197b      	adds	r3, r7, r5
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	e174      	b.n	8008682 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b03      	cmp	r3, #3
 800839e:	d007      	beq.n	80083b0 <USBD_StdEPReq+0x92>
 80083a0:	dd00      	ble.n	80083a4 <USBD_StdEPReq+0x86>
 80083a2:	e15c      	b.n	800865e <USBD_StdEPReq+0x340>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d100      	bne.n	80083aa <USBD_StdEPReq+0x8c>
 80083a8:	e092      	b.n	80084d0 <USBD_StdEPReq+0x1b2>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d04b      	beq.n	8008446 <USBD_StdEPReq+0x128>
 80083ae:	e156      	b.n	800865e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	23a7      	movs	r3, #167	; 0xa7
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	5cd3      	ldrb	r3, [r2, r3]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d002      	beq.n	80083c2 <USBD_StdEPReq+0xa4>
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d01d      	beq.n	80083fc <USBD_StdEPReq+0xde>
 80083c0:	e039      	b.n	8008436 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c2:	220e      	movs	r2, #14
 80083c4:	18bb      	adds	r3, r7, r2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d010      	beq.n	80083ee <USBD_StdEPReq+0xd0>
 80083cc:	18bb      	adds	r3, r7, r2
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d00c      	beq.n	80083ee <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083d4:	18bb      	adds	r3, r7, r2
 80083d6:	781a      	ldrb	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	0011      	movs	r1, r2
 80083dc:	0018      	movs	r0, r3
 80083de:	f001 f9ba 	bl	8009756 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2180      	movs	r1, #128	; 0x80
 80083e6:	0018      	movs	r0, r3
 80083e8:	f001 f9b5 	bl	8009756 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083ec:	e02a      	b.n	8008444 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0011      	movs	r1, r2
 80083f4:	0018      	movs	r0, r3
 80083f6:	f000 fcdf 	bl	8008db8 <USBD_CtlError>
              break;
 80083fa:	e023      	b.n	8008444 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	885b      	ldrh	r3, [r3, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d113      	bne.n	800842c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008404:	220e      	movs	r2, #14
 8008406:	18bb      	adds	r3, r7, r2
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <USBD_StdEPReq+0x10e>
 800840e:	18bb      	adds	r3, r7, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b80      	cmp	r3, #128	; 0x80
 8008414:	d00a      	beq.n	800842c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	88db      	ldrh	r3, [r3, #6]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800841e:	18bb      	adds	r3, r7, r2
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0011      	movs	r1, r2
 8008426:	0018      	movs	r0, r3
 8008428:	f001 f995 	bl	8009756 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	0018      	movs	r0, r3
 8008430:	f000 fdaa 	bl	8008f88 <USBD_CtlSendStatus>

              break;
 8008434:	e006      	b.n	8008444 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f000 fcbb 	bl	8008db8 <USBD_CtlError>
              break;
 8008442:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008444:	e112      	b.n	800866c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	23a7      	movs	r3, #167	; 0xa7
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	5cd3      	ldrb	r3, [r2, r3]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d002      	beq.n	8008458 <USBD_StdEPReq+0x13a>
 8008452:	2b03      	cmp	r3, #3
 8008454:	d01d      	beq.n	8008492 <USBD_StdEPReq+0x174>
 8008456:	e032      	b.n	80084be <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008458:	220e      	movs	r2, #14
 800845a:	18bb      	adds	r3, r7, r2
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d010      	beq.n	8008484 <USBD_StdEPReq+0x166>
 8008462:	18bb      	adds	r3, r7, r2
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b80      	cmp	r3, #128	; 0x80
 8008468:	d00c      	beq.n	8008484 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800846a:	18bb      	adds	r3, r7, r2
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	0011      	movs	r1, r2
 8008472:	0018      	movs	r0, r3
 8008474:	f001 f96f 	bl	8009756 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	0018      	movs	r0, r3
 800847e:	f001 f96a 	bl	8009756 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008482:	e024      	b.n	80084ce <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	0011      	movs	r1, r2
 800848a:	0018      	movs	r0, r3
 800848c:	f000 fc94 	bl	8008db8 <USBD_CtlError>
              break;
 8008490:	e01d      	b.n	80084ce <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d118      	bne.n	80084cc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800849a:	210e      	movs	r1, #14
 800849c:	187b      	adds	r3, r7, r1
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	227f      	movs	r2, #127	; 0x7f
 80084a2:	4013      	ands	r3, r2
 80084a4:	d006      	beq.n	80084b4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80084a6:	187b      	adds	r3, r7, r1
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	0011      	movs	r1, r2
 80084ae:	0018      	movs	r0, r3
 80084b0:	f001 f97c 	bl	80097ac <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	0018      	movs	r0, r3
 80084b8:	f000 fd66 	bl	8008f88 <USBD_CtlSendStatus>
              }
              break;
 80084bc:	e006      	b.n	80084cc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	0011      	movs	r1, r2
 80084c4:	0018      	movs	r0, r3
 80084c6:	f000 fc77 	bl	8008db8 <USBD_CtlError>
              break;
 80084ca:	e000      	b.n	80084ce <USBD_StdEPReq+0x1b0>
              break;
 80084cc:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80084ce:	e0cd      	b.n	800866c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	23a7      	movs	r3, #167	; 0xa7
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d002      	beq.n	80084e2 <USBD_StdEPReq+0x1c4>
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d03c      	beq.n	800855a <USBD_StdEPReq+0x23c>
 80084e0:	e0b5      	b.n	800864e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e2:	220e      	movs	r2, #14
 80084e4:	18bb      	adds	r3, r7, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <USBD_StdEPReq+0x1e4>
 80084ec:	18bb      	adds	r3, r7, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d006      	beq.n	8008502 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0011      	movs	r1, r2
 80084fa:	0018      	movs	r0, r3
 80084fc:	f000 fc5c 	bl	8008db8 <USBD_CtlError>
                break;
 8008500:	e0ac      	b.n	800865c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008502:	220e      	movs	r2, #14
 8008504:	18bb      	adds	r3, r7, r2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	b25b      	sxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	da0c      	bge.n	8008528 <USBD_StdEPReq+0x20a>
 800850e:	18bb      	adds	r3, r7, r2
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	227f      	movs	r2, #127	; 0x7f
 8008514:	401a      	ands	r2, r3
 8008516:	0013      	movs	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	189b      	adds	r3, r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	3310      	adds	r3, #16
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	18d3      	adds	r3, r2, r3
 8008524:	3304      	adds	r3, #4
 8008526:	e00d      	b.n	8008544 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008528:	230e      	movs	r3, #14
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	227f      	movs	r2, #127	; 0x7f
 8008530:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008532:	0013      	movs	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	189b      	adds	r3, r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	3351      	adds	r3, #81	; 0x51
 800853c:	33ff      	adds	r3, #255	; 0xff
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	18d3      	adds	r3, r2, r3
 8008542:	3304      	adds	r3, #4
 8008544:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	0018      	movs	r0, r3
 8008554:	f000 fcae 	bl	8008eb4 <USBD_CtlSendData>
              break;
 8008558:	e080      	b.n	800865c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800855a:	220e      	movs	r2, #14
 800855c:	18bb      	adds	r3, r7, r2
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b25b      	sxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	da14      	bge.n	8008590 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008566:	18bb      	adds	r3, r7, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	220f      	movs	r2, #15
 800856c:	401a      	ands	r2, r3
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	0013      	movs	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	189b      	adds	r3, r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	18cb      	adds	r3, r1, r3
 800857a:	3318      	adds	r3, #24
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d11e      	bne.n	80085c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0011      	movs	r1, r2
 8008588:	0018      	movs	r0, r3
 800858a:	f000 fc15 	bl	8008db8 <USBD_CtlError>
                  break;
 800858e:	e065      	b.n	800865c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008590:	230e      	movs	r3, #14
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	220f      	movs	r2, #15
 8008598:	401a      	ands	r2, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	23ac      	movs	r3, #172	; 0xac
 800859e:	0059      	lsls	r1, r3, #1
 80085a0:	0013      	movs	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	18c3      	adds	r3, r0, r3
 80085aa:	185b      	adds	r3, r3, r1
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	0011      	movs	r1, r2
 80085b8:	0018      	movs	r0, r3
 80085ba:	f000 fbfd 	bl	8008db8 <USBD_CtlError>
                  break;
 80085be:	e04d      	b.n	800865c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c0:	220e      	movs	r2, #14
 80085c2:	18bb      	adds	r3, r7, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b25b      	sxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da0c      	bge.n	80085e6 <USBD_StdEPReq+0x2c8>
 80085cc:	18bb      	adds	r3, r7, r2
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	227f      	movs	r2, #127	; 0x7f
 80085d2:	401a      	ands	r2, r3
 80085d4:	0013      	movs	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	189b      	adds	r3, r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	3310      	adds	r3, #16
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	18d3      	adds	r3, r2, r3
 80085e2:	3304      	adds	r3, #4
 80085e4:	e00d      	b.n	8008602 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085e6:	230e      	movs	r3, #14
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	227f      	movs	r2, #127	; 0x7f
 80085ee:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f0:	0013      	movs	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	189b      	adds	r3, r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	3351      	adds	r3, #81	; 0x51
 80085fa:	33ff      	adds	r3, #255	; 0xff
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	18d3      	adds	r3, r2, r3
 8008600:	3304      	adds	r3, #4
 8008602:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008604:	220e      	movs	r2, #14
 8008606:	18bb      	adds	r3, r7, r2
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USBD_StdEPReq+0x2f8>
 800860e:	18bb      	adds	r3, r7, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b80      	cmp	r3, #128	; 0x80
 8008614:	d103      	bne.n	800861e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e010      	b.n	8008640 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800861e:	230e      	movs	r3, #14
 8008620:	18fb      	adds	r3, r7, r3
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0011      	movs	r1, r2
 8008628:	0018      	movs	r0, r3
 800862a:	f001 f8ea 	bl	8009802 <USBD_LL_IsStallEP>
 800862e:	1e03      	subs	r3, r0, #0
 8008630:	d003      	beq.n	800863a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	e002      	b.n	8008640 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	0018      	movs	r0, r3
 8008648:	f000 fc34 	bl	8008eb4 <USBD_CtlSendData>
              break;
 800864c:	e006      	b.n	800865c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f000 fbaf 	bl	8008db8 <USBD_CtlError>
              break;
 800865a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800865c:	e006      	b.n	800866c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	0011      	movs	r1, r2
 8008664:	0018      	movs	r0, r3
 8008666:	f000 fba7 	bl	8008db8 <USBD_CtlError>
          break;
 800866a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800866c:	e006      	b.n	800867c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	0011      	movs	r1, r2
 8008674:	0018      	movs	r0, r3
 8008676:	f000 fb9f 	bl	8008db8 <USBD_CtlError>
      break;
 800867a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800867c:	230f      	movs	r3, #15
 800867e:	18fb      	adds	r3, r7, r3
 8008680:	781b      	ldrb	r3, [r3, #0]
}
 8008682:	0018      	movs	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	b004      	add	sp, #16
 8008688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800868c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008696:	2308      	movs	r3, #8
 8008698:	18fb      	adds	r3, r7, r3
 800869a:	2200      	movs	r2, #0
 800869c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086a2:	230b      	movs	r3, #11
 80086a4:	18fb      	adds	r3, r7, r3
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	885b      	ldrh	r3, [r3, #2]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b07      	cmp	r3, #7
 80086b4:	d900      	bls.n	80086b8 <USBD_GetDescriptor+0x2c>
 80086b6:	e159      	b.n	800896c <USBD_GetDescriptor+0x2e0>
 80086b8:	009a      	lsls	r2, r3, #2
 80086ba:	4bcb      	ldr	r3, [pc, #812]	; (80089e8 <USBD_GetDescriptor+0x35c>)
 80086bc:	18d3      	adds	r3, r2, r3
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	23ac      	movs	r3, #172	; 0xac
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	58d3      	ldr	r3, [r2, r3]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	2108      	movs	r1, #8
 80086d2:	1879      	adds	r1, r7, r1
 80086d4:	0010      	movs	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	0003      	movs	r3, r0
 80086da:	60fb      	str	r3, [r7, #12]
      break;
 80086dc:	e153      	b.n	8008986 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	7c1b      	ldrb	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10f      	bne.n	8008706 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	23ad      	movs	r3, #173	; 0xad
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	58d3      	ldr	r3, [r2, r3]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	2208      	movs	r2, #8
 80086f2:	18ba      	adds	r2, r7, r2
 80086f4:	0010      	movs	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	0003      	movs	r3, r0
 80086fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	2202      	movs	r2, #2
 8008702:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008704:	e13f      	b.n	8008986 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	23ad      	movs	r3, #173	; 0xad
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	58d3      	ldr	r3, [r2, r3]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	2208      	movs	r2, #8
 8008712:	18ba      	adds	r2, r7, r2
 8008714:	0010      	movs	r0, r2
 8008716:	4798      	blx	r3
 8008718:	0003      	movs	r3, r0
 800871a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	2202      	movs	r2, #2
 8008722:	701a      	strb	r2, [r3, #0]
      break;
 8008724:	e12f      	b.n	8008986 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	885b      	ldrh	r3, [r3, #2]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b05      	cmp	r3, #5
 800872e:	d900      	bls.n	8008732 <USBD_GetDescriptor+0xa6>
 8008730:	e0d0      	b.n	80088d4 <USBD_GetDescriptor+0x248>
 8008732:	009a      	lsls	r2, r3, #2
 8008734:	4bad      	ldr	r3, [pc, #692]	; (80089ec <USBD_GetDescriptor+0x360>)
 8008736:	18d3      	adds	r3, r2, r3
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	23ac      	movs	r3, #172	; 0xac
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	58d3      	ldr	r3, [r2, r3]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00d      	beq.n	8008766 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	23ac      	movs	r3, #172	; 0xac
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	58d3      	ldr	r3, [r2, r3]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7c12      	ldrb	r2, [r2, #16]
 8008758:	2108      	movs	r1, #8
 800875a:	1879      	adds	r1, r7, r1
 800875c:	0010      	movs	r0, r2
 800875e:	4798      	blx	r3
 8008760:	0003      	movs	r3, r0
 8008762:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008764:	e0c3      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	0011      	movs	r1, r2
 800876c:	0018      	movs	r0, r3
 800876e:	f000 fb23 	bl	8008db8 <USBD_CtlError>
            err++;
 8008772:	210b      	movs	r1, #11
 8008774:	187b      	adds	r3, r7, r1
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	187b      	adds	r3, r7, r1
 800877a:	3201      	adds	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]
          break;
 800877e:	e0b6      	b.n	80088ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	23ac      	movs	r3, #172	; 0xac
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	58d3      	ldr	r3, [r2, r3]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	23ac      	movs	r3, #172	; 0xac
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	58d3      	ldr	r3, [r2, r3]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	2108      	movs	r1, #8
 800879e:	1879      	adds	r1, r7, r1
 80087a0:	0010      	movs	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	0003      	movs	r3, r0
 80087a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a8:	e0a1      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	0011      	movs	r1, r2
 80087b0:	0018      	movs	r0, r3
 80087b2:	f000 fb01 	bl	8008db8 <USBD_CtlError>
            err++;
 80087b6:	210b      	movs	r1, #11
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	187b      	adds	r3, r7, r1
 80087be:	3201      	adds	r2, #1
 80087c0:	701a      	strb	r2, [r3, #0]
          break;
 80087c2:	e094      	b.n	80088ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	23ac      	movs	r3, #172	; 0xac
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	58d3      	ldr	r3, [r2, r3]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00d      	beq.n	80087ee <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	23ac      	movs	r3, #172	; 0xac
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	58d3      	ldr	r3, [r2, r3]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7c12      	ldrb	r2, [r2, #16]
 80087e0:	2108      	movs	r1, #8
 80087e2:	1879      	adds	r1, r7, r1
 80087e4:	0010      	movs	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	0003      	movs	r3, r0
 80087ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ec:	e07f      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	0011      	movs	r1, r2
 80087f4:	0018      	movs	r0, r3
 80087f6:	f000 fadf 	bl	8008db8 <USBD_CtlError>
            err++;
 80087fa:	210b      	movs	r1, #11
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	187b      	adds	r3, r7, r1
 8008802:	3201      	adds	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
          break;
 8008806:	e072      	b.n	80088ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	23ac      	movs	r3, #172	; 0xac
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	58d3      	ldr	r3, [r2, r3]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	23ac      	movs	r3, #172	; 0xac
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	58d3      	ldr	r3, [r2, r3]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	7c12      	ldrb	r2, [r2, #16]
 8008824:	2108      	movs	r1, #8
 8008826:	1879      	adds	r1, r7, r1
 8008828:	0010      	movs	r0, r2
 800882a:	4798      	blx	r3
 800882c:	0003      	movs	r3, r0
 800882e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008830:	e05d      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	0011      	movs	r1, r2
 8008838:	0018      	movs	r0, r3
 800883a:	f000 fabd 	bl	8008db8 <USBD_CtlError>
            err++;
 800883e:	210b      	movs	r1, #11
 8008840:	187b      	adds	r3, r7, r1
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	187b      	adds	r3, r7, r1
 8008846:	3201      	adds	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
          break;
 800884a:	e050      	b.n	80088ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	23ac      	movs	r3, #172	; 0xac
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	58d3      	ldr	r3, [r2, r3]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00d      	beq.n	8008876 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	23ac      	movs	r3, #172	; 0xac
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	58d3      	ldr	r3, [r2, r3]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	2108      	movs	r1, #8
 800886a:	1879      	adds	r1, r7, r1
 800886c:	0010      	movs	r0, r2
 800886e:	4798      	blx	r3
 8008870:	0003      	movs	r3, r0
 8008872:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008874:	e03b      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	0011      	movs	r1, r2
 800887c:	0018      	movs	r0, r3
 800887e:	f000 fa9b 	bl	8008db8 <USBD_CtlError>
            err++;
 8008882:	210b      	movs	r1, #11
 8008884:	187b      	adds	r3, r7, r1
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	187b      	adds	r3, r7, r1
 800888a:	3201      	adds	r2, #1
 800888c:	701a      	strb	r2, [r3, #0]
          break;
 800888e:	e02e      	b.n	80088ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	23ac      	movs	r3, #172	; 0xac
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	58d3      	ldr	r3, [r2, r3]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00d      	beq.n	80088ba <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	23ac      	movs	r3, #172	; 0xac
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	58d3      	ldr	r3, [r2, r3]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	2108      	movs	r1, #8
 80088ae:	1879      	adds	r1, r7, r1
 80088b0:	0010      	movs	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	0003      	movs	r3, r0
 80088b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b8:	e019      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	0011      	movs	r1, r2
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 fa79 	bl	8008db8 <USBD_CtlError>
            err++;
 80088c6:	210b      	movs	r1, #11
 80088c8:	187b      	adds	r3, r7, r1
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	187b      	adds	r3, r7, r1
 80088ce:	3201      	adds	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
          break;
 80088d2:	e00c      	b.n	80088ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 fa6c 	bl	8008db8 <USBD_CtlError>
          err++;
 80088e0:	210b      	movs	r1, #11
 80088e2:	187b      	adds	r3, r7, r1
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	187b      	adds	r3, r7, r1
 80088e8:	3201      	adds	r2, #1
 80088ea:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80088ec:	e04b      	b.n	8008986 <USBD_GetDescriptor+0x2fa>
 80088ee:	e04a      	b.n	8008986 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7c1b      	ldrb	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	23ad      	movs	r3, #173	; 0xad
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	58d3      	ldr	r3, [r2, r3]
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	2208      	movs	r2, #8
 8008904:	18ba      	adds	r2, r7, r2
 8008906:	0010      	movs	r0, r2
 8008908:	4798      	blx	r3
 800890a:	0003      	movs	r3, r0
 800890c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800890e:	e03a      	b.n	8008986 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f000 fa4e 	bl	8008db8 <USBD_CtlError>
        err++;
 800891c:	210b      	movs	r1, #11
 800891e:	187b      	adds	r3, r7, r1
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	187b      	adds	r3, r7, r1
 8008924:	3201      	adds	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
      break;
 8008928:	e02d      	b.n	8008986 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7c1b      	ldrb	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	23ad      	movs	r3, #173	; 0xad
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	58d3      	ldr	r3, [r2, r3]
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	2208      	movs	r2, #8
 800893e:	18ba      	adds	r2, r7, r2
 8008940:	0010      	movs	r0, r2
 8008942:	4798      	blx	r3
 8008944:	0003      	movs	r3, r0
 8008946:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	2207      	movs	r2, #7
 800894e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008950:	e019      	b.n	8008986 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	0011      	movs	r1, r2
 8008958:	0018      	movs	r0, r3
 800895a:	f000 fa2d 	bl	8008db8 <USBD_CtlError>
        err++;
 800895e:	210b      	movs	r1, #11
 8008960:	187b      	adds	r3, r7, r1
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	187b      	adds	r3, r7, r1
 8008966:	3201      	adds	r2, #1
 8008968:	701a      	strb	r2, [r3, #0]
      break;
 800896a:	e00c      	b.n	8008986 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	0011      	movs	r1, r2
 8008972:	0018      	movs	r0, r3
 8008974:	f000 fa20 	bl	8008db8 <USBD_CtlError>
      err++;
 8008978:	210b      	movs	r1, #11
 800897a:	187b      	adds	r3, r7, r1
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	187b      	adds	r3, r7, r1
 8008980:	3201      	adds	r2, #1
 8008982:	701a      	strb	r2, [r3, #0]
      break;
 8008984:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008986:	230b      	movs	r3, #11
 8008988:	18fb      	adds	r3, r7, r3
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d127      	bne.n	80089e0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008990:	2108      	movs	r1, #8
 8008992:	187b      	adds	r3, r7, r1
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d019      	beq.n	80089ce <USBD_GetDescriptor+0x342>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d015      	beq.n	80089ce <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	88da      	ldrh	r2, [r3, #6]
 80089a6:	187b      	adds	r3, r7, r1
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	1c18      	adds	r0, r3, #0
 80089ac:	1c11      	adds	r1, r2, #0
 80089ae:	b28a      	uxth	r2, r1
 80089b0:	b283      	uxth	r3, r0
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d900      	bls.n	80089b8 <USBD_GetDescriptor+0x32c>
 80089b6:	1c01      	adds	r1, r0, #0
 80089b8:	b28a      	uxth	r2, r1
 80089ba:	2108      	movs	r1, #8
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	881a      	ldrh	r2, [r3, #0]
 80089c4:	68f9      	ldr	r1, [r7, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f000 fa73 	bl	8008eb4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	88db      	ldrh	r3, [r3, #6]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	0018      	movs	r0, r3
 80089da:	f000 fad5 	bl	8008f88 <USBD_CtlSendStatus>
 80089de:	e000      	b.n	80089e2 <USBD_GetDescriptor+0x356>
    return;
 80089e0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b004      	add	sp, #16
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	0800a9e0 	.word	0x0800a9e0
 80089ec:	0800aa00 	.word	0x0800aa00

080089f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	889b      	ldrh	r3, [r3, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d13d      	bne.n	8008a7e <USBD_SetAddress+0x8e>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	88db      	ldrh	r3, [r3, #6]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d139      	bne.n	8008a7e <USBD_SetAddress+0x8e>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a10:	d835      	bhi.n	8008a7e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	885b      	ldrh	r3, [r3, #2]
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	230f      	movs	r3, #15
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	217f      	movs	r1, #127	; 0x7f
 8008a1e:	400a      	ands	r2, r1
 8008a20:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	23a7      	movs	r3, #167	; 0xa7
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	5cd3      	ldrb	r3, [r2, r3]
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d106      	bne.n	8008a3c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f000 f9bf 	bl	8008db8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3a:	e027      	b.n	8008a8c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	240f      	movs	r4, #15
 8008a40:	193a      	adds	r2, r7, r4
 8008a42:	4914      	ldr	r1, [pc, #80]	; (8008a94 <USBD_SetAddress+0xa4>)
 8008a44:	7812      	ldrb	r2, [r2, #0]
 8008a46:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a48:	193b      	adds	r3, r7, r4
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	0011      	movs	r1, r2
 8008a50:	0018      	movs	r0, r3
 8008a52:	f000 ff07 	bl	8009864 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f000 fa95 	bl	8008f88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a5e:	193b      	adds	r3, r7, r4
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	23a7      	movs	r3, #167	; 0xa7
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	e00c      	b.n	8008a8c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	23a7      	movs	r3, #167	; 0xa7
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	2101      	movs	r1, #1
 8008a7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7c:	e006      	b.n	8008a8c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	0011      	movs	r1, r2
 8008a84:	0018      	movs	r0, r3
 8008a86:	f000 f997 	bl	8008db8 <USBD_CtlError>
  }
}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b005      	add	sp, #20
 8008a92:	bd90      	pop	{r4, r7, pc}
 8008a94:	0000029e 	.word	0x0000029e

08008a98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	4b4c      	ldr	r3, [pc, #304]	; (8008bdc <USBD_SetConfig+0x144>)
 8008aaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aac:	4b4b      	ldr	r3, [pc, #300]	; (8008bdc <USBD_SetConfig+0x144>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d906      	bls.n	8008ac2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	0011      	movs	r1, r2
 8008aba:	0018      	movs	r0, r3
 8008abc:	f000 f97c 	bl	8008db8 <USBD_CtlError>
 8008ac0:	e088      	b.n	8008bd4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	23a7      	movs	r3, #167	; 0xa7
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	5cd3      	ldrb	r3, [r2, r3]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d002      	beq.n	8008ad4 <USBD_SetConfig+0x3c>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d029      	beq.n	8008b26 <USBD_SetConfig+0x8e>
 8008ad2:	e071      	b.n	8008bb8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008ad4:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <USBD_SetConfig+0x144>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01f      	beq.n	8008b1c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008adc:	4b3f      	ldr	r3, [pc, #252]	; (8008bdc <USBD_SetConfig+0x144>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	23a7      	movs	r3, #167	; 0xa7
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	2103      	movs	r1, #3
 8008aee:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008af0:	4b3a      	ldr	r3, [pc, #232]	; (8008bdc <USBD_SetConfig+0x144>)
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	0011      	movs	r1, r2
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff f8c6 	bl	8007c8a <USBD_SetClassConfig>
 8008afe:	0003      	movs	r3, r0
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d106      	bne.n	8008b12 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	0011      	movs	r1, r2
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f000 f954 	bl	8008db8 <USBD_CtlError>
            return;
 8008b10:	e060      	b.n	8008bd4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f000 fa37 	bl	8008f88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b1a:	e05b      	b.n	8008bd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f000 fa32 	bl	8008f88 <USBD_CtlSendStatus>
        break;
 8008b24:	e056      	b.n	8008bd4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b26:	4b2d      	ldr	r3, [pc, #180]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d115      	bne.n	8008b5a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	23a7      	movs	r3, #167	; 0xa7
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	2102      	movs	r1, #2
 8008b36:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008b38:	4b28      	ldr	r3, [pc, #160]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	001a      	movs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0011      	movs	r1, r2
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7ff f8c4 	bl	8007cd8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	0018      	movs	r0, r3
 8008b54:	f000 fa18 	bl	8008f88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b58:	e03c      	b.n	8008bd4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008b5a:	4b20      	ldr	r3, [pc, #128]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	001a      	movs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d022      	beq.n	8008bae <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f7ff f8b0 	bl	8007cd8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b78:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	001a      	movs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b82:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <USBD_SetConfig+0x144>)
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	0011      	movs	r1, r2
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7ff f87d 	bl	8007c8a <USBD_SetClassConfig>
 8008b90:	0003      	movs	r3, r0
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d106      	bne.n	8008ba4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 f90b 	bl	8008db8 <USBD_CtlError>
            return;
 8008ba2:	e017      	b.n	8008bd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f000 f9ee 	bl	8008f88 <USBD_CtlSendStatus>
        break;
 8008bac:	e012      	b.n	8008bd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	f000 f9e9 	bl	8008f88 <USBD_CtlSendStatus>
        break;
 8008bb6:	e00d      	b.n	8008bd4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	0011      	movs	r1, r2
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f000 f8fa 	bl	8008db8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <USBD_SetConfig+0x144>)
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	0011      	movs	r1, r2
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff f883 	bl	8007cd8 <USBD_ClrClassConfig>
        break;
 8008bd2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	b002      	add	sp, #8
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	20000244 	.word	0x20000244

08008be0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	88db      	ldrh	r3, [r3, #6]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d006      	beq.n	8008c00 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	0011      	movs	r1, r2
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f000 f8dd 	bl	8008db8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bfe:	e026      	b.n	8008c4e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	23a7      	movs	r3, #167	; 0xa7
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	5cd3      	ldrb	r3, [r2, r3]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	dc02      	bgt.n	8008c12 <USBD_GetConfig+0x32>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dc03      	bgt.n	8008c18 <USBD_GetConfig+0x38>
 8008c10:	e016      	b.n	8008c40 <USBD_GetConfig+0x60>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d00c      	beq.n	8008c30 <USBD_GetConfig+0x50>
 8008c16:	e013      	b.n	8008c40 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3308      	adds	r3, #8
 8008c22:	0019      	movs	r1, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f000 f943 	bl	8008eb4 <USBD_CtlSendData>
        break;
 8008c2e:	e00e      	b.n	8008c4e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1d19      	adds	r1, r3, #4
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f000 f93b 	bl	8008eb4 <USBD_CtlSendData>
        break;
 8008c3e:	e006      	b.n	8008c4e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	0011      	movs	r1, r2
 8008c46:	0018      	movs	r0, r3
 8008c48:	f000 f8b6 	bl	8008db8 <USBD_CtlError>
        break;
 8008c4c:	46c0      	nop			; (mov r8, r8)
}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b002      	add	sp, #8
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	23a7      	movs	r3, #167	; 0xa7
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	5cd3      	ldrb	r3, [r2, r3]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d822      	bhi.n	8008cb4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d006      	beq.n	8008c84 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	0011      	movs	r1, r2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f000 f89b 	bl	8008db8 <USBD_CtlError>
        break;
 8008c82:	e01e      	b.n	8008cc2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	23a9      	movs	r3, #169	; 0xa9
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	58d3      	ldr	r3, [r2, r3]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	0019      	movs	r1, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	0018      	movs	r0, r3
 8008cae:	f000 f901 	bl	8008eb4 <USBD_CtlSendData>
      break;
 8008cb2:	e006      	b.n	8008cc2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	0011      	movs	r1, r2
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f000 f87c 	bl	8008db8 <USBD_CtlError>
      break;
 8008cc0:	46c0      	nop			; (mov r8, r8)
  }
}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b002      	add	sp, #8
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d108      	bne.n	8008cee <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	23a9      	movs	r3, #169	; 0xa9
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f000 f94d 	bl	8008f88 <USBD_CtlSendStatus>
  }
}
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	b002      	add	sp, #8
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	23a7      	movs	r3, #167	; 0xa7
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	5cd3      	ldrb	r3, [r2, r3]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d80d      	bhi.n	8008d2a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d110      	bne.n	8008d38 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	23a9      	movs	r3, #169	; 0xa9
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	0018      	movs	r0, r3
 8008d24:	f000 f930 	bl	8008f88 <USBD_CtlSendStatus>
      }
      break;
 8008d28:	e006      	b.n	8008d38 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 f841 	bl	8008db8 <USBD_CtlError>
      break;
 8008d36:	e000      	b.n	8008d3a <USBD_ClrFeature+0x44>
      break;
 8008d38:	46c0      	nop			; (mov r8, r8)
  }
}
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b002      	add	sp, #8
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	785a      	ldrb	r2, [r3, #1]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	3302      	adds	r3, #2
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	3303      	adds	r3, #3
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	3305      	adds	r3, #5
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	18d3      	adds	r3, r2, r3
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	3306      	adds	r3, #6
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	3307      	adds	r3, #7
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	021b      	lsls	r3, r3, #8
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	18d3      	adds	r3, r2, r3
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	80da      	strh	r2, [r3, #6]

}
 8008db0:	46c0      	nop			; (mov r8, r8)
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b002      	add	sp, #8
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f000 fcc5 	bl	8009756 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f000 fcc0 	bl	8009756 <USBD_LL_StallEP>
}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b002      	add	sp, #8
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dde:	b590      	push	{r4, r7, lr}
 8008de0:	b087      	sub	sp, #28
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60f8      	str	r0, [r7, #12]
 8008de6:	60b9      	str	r1, [r7, #8]
 8008de8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dea:	2417      	movs	r4, #23
 8008dec:	193b      	adds	r3, r7, r4
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d03c      	beq.n	8008e72 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f000 f83d 	bl	8008e7a <USBD_GetLen>
 8008e00:	0003      	movs	r3, r0
 8008e02:	3301      	adds	r3, #1
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	18db      	adds	r3, r3, r3
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e0e:	193b      	adds	r3, r7, r4
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	193a      	adds	r2, r7, r4
 8008e14:	1c59      	adds	r1, r3, #1
 8008e16:	7011      	strb	r1, [r2, #0]
 8008e18:	001a      	movs	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	189b      	adds	r3, r3, r2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e24:	193b      	adds	r3, r7, r4
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	193a      	adds	r2, r7, r4
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	7011      	strb	r1, [r2, #0]
 8008e2e:	001a      	movs	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	189b      	adds	r3, r3, r2
 8008e34:	2203      	movs	r2, #3
 8008e36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e38:	e017      	b.n	8008e6a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	60fa      	str	r2, [r7, #12]
 8008e40:	2417      	movs	r4, #23
 8008e42:	193a      	adds	r2, r7, r4
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	1939      	adds	r1, r7, r4
 8008e48:	1c50      	adds	r0, r2, #1
 8008e4a:	7008      	strb	r0, [r1, #0]
 8008e4c:	0011      	movs	r1, r2
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	1852      	adds	r2, r2, r1
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e56:	193b      	adds	r3, r7, r4
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	193a      	adds	r2, r7, r4
 8008e5c:	1c59      	adds	r1, r3, #1
 8008e5e:	7011      	strb	r1, [r2, #0]
 8008e60:	001a      	movs	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	189b      	adds	r3, r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e3      	bne.n	8008e3a <USBD_GetString+0x5c>
    }
  }
}
 8008e72:	46c0      	nop			; (mov r8, r8)
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b007      	add	sp, #28
 8008e78:	bd90      	pop	{r4, r7, pc}

08008e7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e82:	230f      	movs	r3, #15
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008e8a:	e008      	b.n	8008e9e <USBD_GetLen+0x24>
  {
    len++;
 8008e8c:	210f      	movs	r1, #15
 8008e8e:	187b      	adds	r3, r7, r1
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	3201      	adds	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
    buf++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f2      	bne.n	8008e8c <USBD_GetLen+0x12>
  }

  return len;
 8008ea6:	230f      	movs	r3, #15
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
}
 8008eac:	0018      	movs	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b004      	add	sp, #16
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	1dbb      	adds	r3, r7, #6
 8008ec0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	23a5      	movs	r3, #165	; 0xa5
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	2102      	movs	r1, #2
 8008eca:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008ecc:	1dbb      	adds	r3, r7, #6
 8008ece:	881a      	ldrh	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ed4:	1dbb      	adds	r3, r7, #6
 8008ed6:	881a      	ldrh	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008edc:	1dbb      	adds	r3, r7, #6
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	f000 fce8 	bl	80098ba <USBD_LL_Transmit>

  return USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	0018      	movs	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	b004      	add	sp, #16
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	1dbb      	adds	r3, r7, #6
 8008f00:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f02:	1dbb      	adds	r3, r7, #6
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	f000 fcd5 	bl	80098ba <USBD_LL_Transmit>

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	0018      	movs	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b004      	add	sp, #16
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	1dbb      	adds	r3, r7, #6
 8008f26:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	23a5      	movs	r3, #165	; 0xa5
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	2103      	movs	r1, #3
 8008f30:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008f32:	1dbb      	adds	r3, r7, #6
 8008f34:	8819      	ldrh	r1, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	23ae      	movs	r3, #174	; 0xae
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008f3e:	1dbb      	adds	r3, r7, #6
 8008f40:	8819      	ldrh	r1, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	23b0      	movs	r3, #176	; 0xb0
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f4a:	1dbb      	adds	r3, r7, #6
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	2100      	movs	r1, #0
 8008f54:	f000 fce8 	bl	8009928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	b004      	add	sp, #16
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	1dbb      	adds	r3, r7, #6
 8008f6e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f70:	1dbb      	adds	r3, r7, #6
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f000 fcd5 	bl	8009928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	0018      	movs	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b004      	add	sp, #16
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	23a5      	movs	r3, #165	; 0xa5
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	2104      	movs	r1, #4
 8008f98:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f000 fc8a 	bl	80098ba <USBD_LL_Transmit>

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b002      	add	sp, #8
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	23a5      	movs	r3, #165	; 0xa5
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	2105      	movs	r1, #5
 8008fc0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f000 fcad 	bl	8009928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b002      	add	sp, #8
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fdc:	4914      	ldr	r1, [pc, #80]	; (8009030 <MX_USB_DEVICE_Init+0x58>)
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <MX_USB_DEVICE_Init+0x5c>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f7fe fdea 	bl	8007bbc <USBD_Init>
 8008fe8:	1e03      	subs	r3, r0, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fec:	f7f8 f9e4 	bl	80013b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ff0:	4a11      	ldr	r2, [pc, #68]	; (8009038 <MX_USB_DEVICE_Init+0x60>)
 8008ff2:	4b10      	ldr	r3, [pc, #64]	; (8009034 <MX_USB_DEVICE_Init+0x5c>)
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7fe fe11 	bl	8007c1e <USBD_RegisterClass>
 8008ffc:	1e03      	subs	r3, r0, #0
 8008ffe:	d001      	beq.n	8009004 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009000:	f7f8 f9da 	bl	80013b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009004:	4a0d      	ldr	r2, [pc, #52]	; (800903c <MX_USB_DEVICE_Init+0x64>)
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <MX_USB_DEVICE_Init+0x5c>)
 8009008:	0011      	movs	r1, r2
 800900a:	0018      	movs	r0, r3
 800900c:	f7fe fd26 	bl	8007a5c <USBD_CDC_RegisterInterface>
 8009010:	1e03      	subs	r3, r0, #0
 8009012:	d001      	beq.n	8009018 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8009014:	f7f8 f9d0 	bl	80013b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <MX_USB_DEVICE_Init+0x5c>)
 800901a:	0018      	movs	r0, r3
 800901c:	f7fe fe1f 	bl	8007c5e <USBD_Start>
 8009020:	1e03      	subs	r3, r0, #0
 8009022:	d001      	beq.n	8009028 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8009024:	f7f8 f9c8 	bl	80013b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009028:	46c0      	nop			; (mov r8, r8)
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	20000130 	.word	0x20000130
 8009034:	200017e8 	.word	0x200017e8
 8009038:	2000001c 	.word	0x2000001c
 800903c:	20000120 	.word	0x20000120

08009040 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009044:	4907      	ldr	r1, [pc, #28]	; (8009064 <CDC_Init_FS+0x24>)
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <CDC_Init_FS+0x28>)
 8009048:	2200      	movs	r2, #0
 800904a:	0018      	movs	r0, r3
 800904c:	f7fe fd21 	bl	8007a92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009050:	4a06      	ldr	r2, [pc, #24]	; (800906c <CDC_Init_FS+0x2c>)
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <CDC_Init_FS+0x28>)
 8009054:	0011      	movs	r1, r2
 8009056:	0018      	movs	r0, r3
 8009058:	f7fe fd37 	bl	8007aca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800905c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800905e:	0018      	movs	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20001e94 	.word	0x20001e94
 8009068:	200017e8 	.word	0x200017e8
 800906c:	20001aac 	.word	0x20001aac

08009070 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009074:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6039      	str	r1, [r7, #0]
 8009084:	0011      	movs	r1, r2
 8009086:	1dfb      	adds	r3, r7, #7
 8009088:	1c02      	adds	r2, r0, #0
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	1c0a      	adds	r2, r1, #0
 8009090:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009092:	1dfb      	adds	r3, r7, #7
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b23      	cmp	r3, #35	; 0x23
 8009098:	d804      	bhi.n	80090a4 <CDC_Control_FS+0x28>
 800909a:	009a      	lsls	r2, r3, #2
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <CDC_Control_FS+0x34>)
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80090a4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80090a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b002      	add	sp, #8
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	0800aa18 	.word	0x0800aa18

080090b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <CDC_Receive_FS+0x38>)
 80090c2:	0011      	movs	r1, r2
 80090c4:	0018      	movs	r0, r3
 80090c6:	f7fe fd00 	bl	8007aca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <CDC_Receive_FS+0x38>)
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7fe fd47 	bl	8007b60 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	0011      	movs	r1, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	f7f7 fb2c 	bl	8000738 <CDC_ReceiveCallback>
  return (USBD_OK);
 80090e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b002      	add	sp, #8
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	200017e8 	.word	0x200017e8

080090f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090f0:	b5b0      	push	{r4, r5, r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	000a      	movs	r2, r1
 80090fa:	1cbb      	adds	r3, r7, #2
 80090fc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80090fe:	230f      	movs	r3, #15
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009106:	4a11      	ldr	r2, [pc, #68]	; (800914c <CDC_Transmit_FS+0x5c>)
 8009108:	23ae      	movs	r3, #174	; 0xae
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	58d3      	ldr	r3, [r2, r3]
 800910e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	2385      	movs	r3, #133	; 0x85
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	58d3      	ldr	r3, [r2, r3]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800911c:	2301      	movs	r3, #1
 800911e:	e010      	b.n	8009142 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009120:	1cbb      	adds	r3, r7, #2
 8009122:	881a      	ldrh	r2, [r3, #0]
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <CDC_Transmit_FS+0x5c>)
 8009128:	0018      	movs	r0, r3
 800912a:	f7fe fcb2 	bl	8007a92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800912e:	250f      	movs	r5, #15
 8009130:	197c      	adds	r4, r7, r5
 8009132:	4b06      	ldr	r3, [pc, #24]	; (800914c <CDC_Transmit_FS+0x5c>)
 8009134:	0018      	movs	r0, r3
 8009136:	f7fe fcdc 	bl	8007af2 <USBD_CDC_TransmitPacket>
 800913a:	0003      	movs	r3, r0
 800913c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800913e:	197b      	adds	r3, r7, r5
 8009140:	781b      	ldrb	r3, [r3, #0]
}
 8009142:	0018      	movs	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	b004      	add	sp, #16
 8009148:	bdb0      	pop	{r4, r5, r7, pc}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	200017e8 	.word	0x200017e8

08009150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	0002      	movs	r2, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	1dfb      	adds	r3, r7, #7
 800915c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2212      	movs	r2, #18
 8009162:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009166:	0018      	movs	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	b002      	add	sp, #8
 800916c:	bd80      	pop	{r7, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	2000014c 	.word	0x2000014c

08009174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	0002      	movs	r2, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	1dfb      	adds	r3, r7, #7
 8009180:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2204      	movs	r2, #4
 8009186:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800918a:	0018      	movs	r0, r3
 800918c:	46bd      	mov	sp, r7
 800918e:	b002      	add	sp, #8
 8009190:	bd80      	pop	{r7, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	20000160 	.word	0x20000160

08009198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	0002      	movs	r2, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	1dfb      	adds	r3, r7, #7
 80091a4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80091a6:	1dfb      	adds	r3, r7, #7
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4908      	ldr	r1, [pc, #32]	; (80091d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <USBD_FS_ProductStrDescriptor+0x40>)
 80091b4:	0018      	movs	r0, r3
 80091b6:	f7ff fe12 	bl	8008dde <USBD_GetString>
 80091ba:	e005      	b.n	80091c8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	4905      	ldr	r1, [pc, #20]	; (80091d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <USBD_FS_ProductStrDescriptor+0x40>)
 80091c2:	0018      	movs	r0, r3
 80091c4:	f7ff fe0b 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 80091c8:	4b02      	ldr	r3, [pc, #8]	; (80091d4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b002      	add	sp, #8
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	2000227c 	.word	0x2000227c
 80091d8:	0800a774 	.word	0x0800a774

080091dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	0002      	movs	r2, r0
 80091e4:	6039      	str	r1, [r7, #0]
 80091e6:	1dfb      	adds	r3, r7, #7
 80091e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	4904      	ldr	r1, [pc, #16]	; (8009200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80091f0:	0018      	movs	r0, r3
 80091f2:	f7ff fdf4 	bl	8008dde <USBD_GetString>
  return USBD_StrDesc;
 80091f6:	4b02      	ldr	r3, [pc, #8]	; (8009200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80091f8:	0018      	movs	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b002      	add	sp, #8
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	2000227c 	.word	0x2000227c
 8009204:	0800a78c 	.word	0x0800a78c

08009208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	0002      	movs	r2, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	221a      	movs	r2, #26
 800921a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800921c:	f000 f84c 	bl	80092b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009222:	0018      	movs	r0, r3
 8009224:	46bd      	mov	sp, r7
 8009226:	b002      	add	sp, #8
 8009228:	bd80      	pop	{r7, pc}
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	20000164 	.word	0x20000164

08009230 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	0002      	movs	r2, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	1dfb      	adds	r3, r7, #7
 800923c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800923e:	1dfb      	adds	r3, r7, #7
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4908      	ldr	r1, [pc, #32]	; (800926c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800924a:	4b09      	ldr	r3, [pc, #36]	; (8009270 <USBD_FS_ConfigStrDescriptor+0x40>)
 800924c:	0018      	movs	r0, r3
 800924e:	f7ff fdc6 	bl	8008dde <USBD_GetString>
 8009252:	e005      	b.n	8009260 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	4905      	ldr	r1, [pc, #20]	; (800926c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <USBD_FS_ConfigStrDescriptor+0x40>)
 800925a:	0018      	movs	r0, r3
 800925c:	f7ff fdbf 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 8009260:	4b02      	ldr	r3, [pc, #8]	; (800926c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009262:	0018      	movs	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	b002      	add	sp, #8
 8009268:	bd80      	pop	{r7, pc}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	2000227c 	.word	0x2000227c
 8009270:	0800a7a0 	.word	0x0800a7a0

08009274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	0002      	movs	r2, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	1dfb      	adds	r3, r7, #7
 8009280:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009282:	1dfb      	adds	r3, r7, #7
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4908      	ldr	r1, [pc, #32]	; (80092b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009290:	0018      	movs	r0, r3
 8009292:	f7ff fda4 	bl	8008dde <USBD_GetString>
 8009296:	e005      	b.n	80092a4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	4905      	ldr	r1, [pc, #20]	; (80092b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800929c:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800929e:	0018      	movs	r0, r3
 80092a0:	f7ff fd9d 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80092a6:	0018      	movs	r0, r3
 80092a8:	46bd      	mov	sp, r7
 80092aa:	b002      	add	sp, #8
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	2000227c 	.word	0x2000227c
 80092b4:	0800a7ac 	.word	0x0800a7ac

080092b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092be:	4b10      	ldr	r3, [pc, #64]	; (8009300 <Get_SerialNum+0x48>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <Get_SerialNum+0x4c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <Get_SerialNum+0x50>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	18d3      	adds	r3, r2, r3
 80092d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092de:	490b      	ldr	r1, [pc, #44]	; (800930c <Get_SerialNum+0x54>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2208      	movs	r2, #8
 80092e4:	0018      	movs	r0, r3
 80092e6:	f000 f815 	bl	8009314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092ea:	4909      	ldr	r1, [pc, #36]	; (8009310 <Get_SerialNum+0x58>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2204      	movs	r2, #4
 80092f0:	0018      	movs	r0, r3
 80092f2:	f000 f80f 	bl	8009314 <IntToUnicode>
  }
}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b004      	add	sp, #16
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	1ffff7ac 	.word	0x1ffff7ac
 8009304:	1ffff7b0 	.word	0x1ffff7b0
 8009308:	1ffff7b4 	.word	0x1ffff7b4
 800930c:	20000166 	.word	0x20000166
 8009310:	20000176 	.word	0x20000176

08009314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	1dfb      	adds	r3, r7, #7
 8009320:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009322:	2117      	movs	r1, #23
 8009324:	187b      	adds	r3, r7, r1
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800932a:	187b      	adds	r3, r7, r1
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e02f      	b.n	8009392 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	0f1b      	lsrs	r3, r3, #28
 8009336:	2b09      	cmp	r3, #9
 8009338:	d80d      	bhi.n	8009356 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	0f1b      	lsrs	r3, r3, #28
 800933e:	b2da      	uxtb	r2, r3
 8009340:	2317      	movs	r3, #23
 8009342:	18fb      	adds	r3, r7, r3
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	0019      	movs	r1, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	185b      	adds	r3, r3, r1
 800934e:	3230      	adds	r2, #48	; 0x30
 8009350:	b2d2      	uxtb	r2, r2
 8009352:	701a      	strb	r2, [r3, #0]
 8009354:	e00c      	b.n	8009370 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	0f1b      	lsrs	r3, r3, #28
 800935a:	b2da      	uxtb	r2, r3
 800935c:	2317      	movs	r3, #23
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	0019      	movs	r1, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	185b      	adds	r3, r3, r1
 800936a:	3237      	adds	r2, #55	; 0x37
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009376:	2117      	movs	r1, #23
 8009378:	187b      	adds	r3, r7, r1
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	3301      	adds	r3, #1
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	18d3      	adds	r3, r2, r3
 8009384:	2200      	movs	r2, #0
 8009386:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009388:	187b      	adds	r3, r7, r1
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	187b      	adds	r3, r7, r1
 800938e:	3201      	adds	r2, #1
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	2317      	movs	r3, #23
 8009394:	18fa      	adds	r2, r7, r3
 8009396:	1dfb      	adds	r3, r7, #7
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d3c8      	bcc.n	8009332 <IntToUnicode+0x1e>
  }
}
 80093a0:	46c0      	nop			; (mov r8, r8)
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b006      	add	sp, #24
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <HAL_PCD_MspInit+0x48>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d115      	bne.n	80093ea <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093be:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <HAL_PCD_MspInit+0x4c>)
 80093c0:	69da      	ldr	r2, [r3, #28]
 80093c2:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <HAL_PCD_MspInit+0x4c>)
 80093c4:	2180      	movs	r1, #128	; 0x80
 80093c6:	0409      	lsls	r1, r1, #16
 80093c8:	430a      	orrs	r2, r1
 80093ca:	61da      	str	r2, [r3, #28]
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <HAL_PCD_MspInit+0x4c>)
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	2380      	movs	r3, #128	; 0x80
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	4013      	ands	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	201f      	movs	r0, #31
 80093e0:	f7f9 f930 	bl	8002644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80093e4:	201f      	movs	r0, #31
 80093e6:	f7f9 f942 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80093ea:	46c0      	nop			; (mov r8, r8)
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b004      	add	sp, #16
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	40005c00 	.word	0x40005c00
 80093f8:	40021000 	.word	0x40021000

080093fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	23bc      	movs	r3, #188	; 0xbc
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	58d2      	ldr	r2, [r2, r3]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	21ac      	movs	r1, #172	; 0xac
 8009410:	0089      	lsls	r1, r1, #2
 8009412:	468c      	mov	ip, r1
 8009414:	4463      	add	r3, ip
 8009416:	0019      	movs	r1, r3
 8009418:	0010      	movs	r0, r2
 800941a:	f7fe fc73 	bl	8007d04 <USBD_LL_SetupStage>
}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	46bd      	mov	sp, r7
 8009422:	b002      	add	sp, #8
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009426:	b590      	push	{r4, r7, lr}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	000a      	movs	r2, r1
 8009430:	1cfb      	adds	r3, r7, #3
 8009432:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	23bc      	movs	r3, #188	; 0xbc
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	58d4      	ldr	r4, [r2, r3]
 800943c:	1cfb      	adds	r3, r7, #3
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	23be      	movs	r3, #190	; 0xbe
 8009444:	0059      	lsls	r1, r3, #1
 8009446:	0013      	movs	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	189b      	adds	r3, r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	18c3      	adds	r3, r0, r3
 8009450:	185b      	adds	r3, r3, r1
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	1cfb      	adds	r3, r7, #3
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	0019      	movs	r1, r3
 800945a:	0020      	movs	r0, r4
 800945c:	f7fe fcb0 	bl	8007dc0 <USBD_LL_DataOutStage>
}
 8009460:	46c0      	nop			; (mov r8, r8)
 8009462:	46bd      	mov	sp, r7
 8009464:	b003      	add	sp, #12
 8009466:	bd90      	pop	{r4, r7, pc}

08009468 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	000a      	movs	r2, r1
 8009472:	1cfb      	adds	r3, r7, #3
 8009474:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	23bc      	movs	r3, #188	; 0xbc
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	58d0      	ldr	r0, [r2, r3]
 800947e:	1cfb      	adds	r3, r7, #3
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	0013      	movs	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	189b      	adds	r3, r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	18cb      	adds	r3, r1, r3
 800948e:	333c      	adds	r3, #60	; 0x3c
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	1cfb      	adds	r3, r7, #3
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	0019      	movs	r1, r3
 8009498:	f7fe fd14 	bl	8007ec4 <USBD_LL_DataInStage>
}
 800949c:	46c0      	nop			; (mov r8, r8)
 800949e:	46bd      	mov	sp, r7
 80094a0:	b002      	add	sp, #8
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	23bc      	movs	r3, #188	; 0xbc
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	58d3      	ldr	r3, [r2, r3]
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7fe fe4b 	bl	8008150 <USBD_LL_SOF>
}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	46bd      	mov	sp, r7
 80094be:	b002      	add	sp, #8
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094ca:	230f      	movs	r3, #15
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	2201      	movs	r2, #1
 80094d0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d001      	beq.n	80094de <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80094da:	f7f7 ff6d 	bl	80013b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	23bc      	movs	r3, #188	; 0xbc
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	58d2      	ldr	r2, [r2, r3]
 80094e6:	230f      	movs	r3, #15
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	0019      	movs	r1, r3
 80094ee:	0010      	movs	r0, r2
 80094f0:	f7fe fded 	bl	80080ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	23bc      	movs	r3, #188	; 0xbc
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	58d3      	ldr	r3, [r2, r3]
 80094fc:	0018      	movs	r0, r3
 80094fe:	f7fe fd9e 	bl	800803e <USBD_LL_Reset>
}
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	46bd      	mov	sp, r7
 8009506:	b004      	add	sp, #16
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	23bc      	movs	r3, #188	; 0xbc
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	58d3      	ldr	r3, [r2, r3]
 800951c:	0018      	movs	r0, r3
 800951e:	f7fe fde7 	bl	80080f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_PCD_SuspendCallback+0x34>)
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <HAL_PCD_SuspendCallback+0x34>)
 8009530:	2106      	movs	r1, #6
 8009532:	430a      	orrs	r2, r1
 8009534:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	46bd      	mov	sp, r7
 800953a:	b002      	add	sp, #8
 800953c:	bd80      	pop	{r7, pc}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d007      	beq.n	8009564 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009554:	4b09      	ldr	r3, [pc, #36]	; (800957c <HAL_PCD_ResumeCallback+0x38>)
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	4b08      	ldr	r3, [pc, #32]	; (800957c <HAL_PCD_ResumeCallback+0x38>)
 800955a:	2106      	movs	r1, #6
 800955c:	438a      	bics	r2, r1
 800955e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009560:	f000 fa44 	bl	80099ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	23bc      	movs	r3, #188	; 0xbc
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	58d3      	ldr	r3, [r2, r3]
 800956c:	0018      	movs	r0, r3
 800956e:	f7fe fdd7 	bl	8008120 <USBD_LL_Resume>
}
 8009572:	46c0      	nop			; (mov r8, r8)
 8009574:	46bd      	mov	sp, r7
 8009576:	b002      	add	sp, #8
 8009578:	bd80      	pop	{r7, pc}
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	e000ed00 	.word	0xe000ed00

08009580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009588:	4a2d      	ldr	r2, [pc, #180]	; (8009640 <USBD_LL_Init+0xc0>)
 800958a:	23bc      	movs	r3, #188	; 0xbc
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	23b0      	movs	r3, #176	; 0xb0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4929      	ldr	r1, [pc, #164]	; (8009640 <USBD_LL_Init+0xc0>)
 800959a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800959c:	4b28      	ldr	r3, [pc, #160]	; (8009640 <USBD_LL_Init+0xc0>)
 800959e:	4a29      	ldr	r2, [pc, #164]	; (8009644 <USBD_LL_Init+0xc4>)
 80095a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095a2:	4b27      	ldr	r3, [pc, #156]	; (8009640 <USBD_LL_Init+0xc0>)
 80095a4:	2208      	movs	r2, #8
 80095a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <USBD_LL_Init+0xc0>)
 80095aa:	2202      	movs	r2, #2
 80095ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <USBD_LL_Init+0xc0>)
 80095b0:	2202      	movs	r2, #2
 80095b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095b4:	4b22      	ldr	r3, [pc, #136]	; (8009640 <USBD_LL_Init+0xc0>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095ba:	4b21      	ldr	r3, [pc, #132]	; (8009640 <USBD_LL_Init+0xc0>)
 80095bc:	2200      	movs	r2, #0
 80095be:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095c0:	4b1f      	ldr	r3, [pc, #124]	; (8009640 <USBD_LL_Init+0xc0>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095c6:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <USBD_LL_Init+0xc0>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7f9 fb4d 	bl	8002c68 <HAL_PCD_Init>
 80095ce:	1e03      	subs	r3, r0, #0
 80095d0:	d001      	beq.n	80095d6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80095d2:	f7f7 fef1 	bl	80013b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	23b0      	movs	r3, #176	; 0xb0
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	58d0      	ldr	r0, [r2, r3]
 80095de:	2318      	movs	r3, #24
 80095e0:	2200      	movs	r2, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	f7fb f92e 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	23b0      	movs	r3, #176	; 0xb0
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	58d0      	ldr	r0, [r2, r3]
 80095f0:	2358      	movs	r3, #88	; 0x58
 80095f2:	2200      	movs	r2, #0
 80095f4:	2180      	movs	r1, #128	; 0x80
 80095f6:	f7fb f925 	bl	8004844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	23b0      	movs	r3, #176	; 0xb0
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	58d0      	ldr	r0, [r2, r3]
 8009602:	23c0      	movs	r3, #192	; 0xc0
 8009604:	2200      	movs	r2, #0
 8009606:	2181      	movs	r1, #129	; 0x81
 8009608:	f7fb f91c 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	23b0      	movs	r3, #176	; 0xb0
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	58d0      	ldr	r0, [r2, r3]
 8009614:	2388      	movs	r3, #136	; 0x88
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	2200      	movs	r2, #0
 800961a:	2101      	movs	r1, #1
 800961c:	f7fb f912 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	23b0      	movs	r3, #176	; 0xb0
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	58d0      	ldr	r0, [r2, r3]
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	2200      	movs	r2, #0
 800962e:	2182      	movs	r1, #130	; 0x82
 8009630:	f7fb f908 	bl	8004844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	0018      	movs	r0, r3
 8009638:	46bd      	mov	sp, r7
 800963a:	b002      	add	sp, #8
 800963c:	bd80      	pop	{r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	2000247c 	.word	0x2000247c
 8009644:	40005c00 	.word	0x40005c00

08009648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009650:	210f      	movs	r1, #15
 8009652:	187b      	adds	r3, r7, r1
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009658:	260e      	movs	r6, #14
 800965a:	19bb      	adds	r3, r7, r6
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	23b0      	movs	r3, #176	; 0xb0
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	58d3      	ldr	r3, [r2, r3]
 8009668:	000d      	movs	r5, r1
 800966a:	187c      	adds	r4, r7, r1
 800966c:	0018      	movs	r0, r3
 800966e:	f7f9 fc0b 	bl	8002e88 <HAL_PCD_Start>
 8009672:	0003      	movs	r3, r0
 8009674:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	19bc      	adds	r4, r7, r6
 8009678:	197b      	adds	r3, r7, r5
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	0018      	movs	r0, r3
 800967e:	f000 f9bc 	bl	80099fa <USBD_Get_USB_Status>
 8009682:	0003      	movs	r3, r0
 8009684:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009686:	19bb      	adds	r3, r7, r6
 8009688:	781b      	ldrb	r3, [r3, #0]
}
 800968a:	0018      	movs	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	b005      	add	sp, #20
 8009690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009692 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	000c      	movs	r4, r1
 800969c:	0010      	movs	r0, r2
 800969e:	0019      	movs	r1, r3
 80096a0:	1cfb      	adds	r3, r7, #3
 80096a2:	1c22      	adds	r2, r4, #0
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	1cbb      	adds	r3, r7, #2
 80096a8:	1c02      	adds	r2, r0, #0
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	003b      	movs	r3, r7
 80096ae:	1c0a      	adds	r2, r1, #0
 80096b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	260f      	movs	r6, #15
 80096b4:	19bb      	adds	r3, r7, r6
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	250e      	movs	r5, #14
 80096bc:	197b      	adds	r3, r7, r5
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	23b0      	movs	r3, #176	; 0xb0
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	58d0      	ldr	r0, [r2, r3]
 80096ca:	19bc      	adds	r4, r7, r6
 80096cc:	1cbb      	adds	r3, r7, #2
 80096ce:	781d      	ldrb	r5, [r3, #0]
 80096d0:	003b      	movs	r3, r7
 80096d2:	881a      	ldrh	r2, [r3, #0]
 80096d4:	1cfb      	adds	r3, r7, #3
 80096d6:	7819      	ldrb	r1, [r3, #0]
 80096d8:	002b      	movs	r3, r5
 80096da:	f7f9 fda2 	bl	8003222 <HAL_PCD_EP_Open>
 80096de:	0003      	movs	r3, r0
 80096e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	250e      	movs	r5, #14
 80096e4:	197c      	adds	r4, r7, r5
 80096e6:	19bb      	adds	r3, r7, r6
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	0018      	movs	r0, r3
 80096ec:	f000 f985 	bl	80099fa <USBD_Get_USB_Status>
 80096f0:	0003      	movs	r3, r0
 80096f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096f4:	197b      	adds	r3, r7, r5
 80096f6:	781b      	ldrb	r3, [r3, #0]
}
 80096f8:	0018      	movs	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b005      	add	sp, #20
 80096fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009700 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	000a      	movs	r2, r1
 800970a:	1cfb      	adds	r3, r7, #3
 800970c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970e:	210f      	movs	r1, #15
 8009710:	187b      	adds	r3, r7, r1
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009716:	260e      	movs	r6, #14
 8009718:	19bb      	adds	r3, r7, r6
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	23b0      	movs	r3, #176	; 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	58d2      	ldr	r2, [r2, r3]
 8009726:	000d      	movs	r5, r1
 8009728:	187c      	adds	r4, r7, r1
 800972a:	1cfb      	adds	r3, r7, #3
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	0019      	movs	r1, r3
 8009730:	0010      	movs	r0, r2
 8009732:	f7f9 fdee 	bl	8003312 <HAL_PCD_EP_Close>
 8009736:	0003      	movs	r3, r0
 8009738:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973a:	19bc      	adds	r4, r7, r6
 800973c:	197b      	adds	r3, r7, r5
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	0018      	movs	r0, r3
 8009742:	f000 f95a 	bl	80099fa <USBD_Get_USB_Status>
 8009746:	0003      	movs	r3, r0
 8009748:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800974a:	19bb      	adds	r3, r7, r6
 800974c:	781b      	ldrb	r3, [r3, #0]
}
 800974e:	0018      	movs	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	b005      	add	sp, #20
 8009754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009756 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	000a      	movs	r2, r1
 8009760:	1cfb      	adds	r3, r7, #3
 8009762:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009764:	210f      	movs	r1, #15
 8009766:	187b      	adds	r3, r7, r1
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976c:	260e      	movs	r6, #14
 800976e:	19bb      	adds	r3, r7, r6
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	23b0      	movs	r3, #176	; 0xb0
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	58d2      	ldr	r2, [r2, r3]
 800977c:	000d      	movs	r5, r1
 800977e:	187c      	adds	r4, r7, r1
 8009780:	1cfb      	adds	r3, r7, #3
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	0019      	movs	r1, r3
 8009786:	0010      	movs	r0, r2
 8009788:	f7f9 feba 	bl	8003500 <HAL_PCD_EP_SetStall>
 800978c:	0003      	movs	r3, r0
 800978e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009790:	19bc      	adds	r4, r7, r6
 8009792:	197b      	adds	r3, r7, r5
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	0018      	movs	r0, r3
 8009798:	f000 f92f 	bl	80099fa <USBD_Get_USB_Status>
 800979c:	0003      	movs	r3, r0
 800979e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80097a0:	19bb      	adds	r3, r7, r6
 80097a2:	781b      	ldrb	r3, [r3, #0]
}
 80097a4:	0018      	movs	r0, r3
 80097a6:	46bd      	mov	sp, r7
 80097a8:	b005      	add	sp, #20
 80097aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	000a      	movs	r2, r1
 80097b6:	1cfb      	adds	r3, r7, #3
 80097b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ba:	210f      	movs	r1, #15
 80097bc:	187b      	adds	r3, r7, r1
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c2:	260e      	movs	r6, #14
 80097c4:	19bb      	adds	r3, r7, r6
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	23b0      	movs	r3, #176	; 0xb0
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	58d2      	ldr	r2, [r2, r3]
 80097d2:	000d      	movs	r5, r1
 80097d4:	187c      	adds	r4, r7, r1
 80097d6:	1cfb      	adds	r3, r7, #3
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	0019      	movs	r1, r3
 80097dc:	0010      	movs	r0, r2
 80097de:	f7f9 feeb 	bl	80035b8 <HAL_PCD_EP_ClrStall>
 80097e2:	0003      	movs	r3, r0
 80097e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e6:	19bc      	adds	r4, r7, r6
 80097e8:	197b      	adds	r3, r7, r5
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	0018      	movs	r0, r3
 80097ee:	f000 f904 	bl	80099fa <USBD_Get_USB_Status>
 80097f2:	0003      	movs	r3, r0
 80097f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80097f6:	19bb      	adds	r3, r7, r6
 80097f8:	781b      	ldrb	r3, [r3, #0]
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b005      	add	sp, #20
 8009800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009802 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	000a      	movs	r2, r1
 800980c:	1cfb      	adds	r3, r7, #3
 800980e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	23b0      	movs	r3, #176	; 0xb0
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	58d3      	ldr	r3, [r2, r3]
 8009818:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800981a:	1cfb      	adds	r3, r7, #3
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b25b      	sxtb	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	da0d      	bge.n	8009840 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009824:	1cfb      	adds	r3, r7, #3
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	227f      	movs	r2, #127	; 0x7f
 800982a:	4013      	ands	r3, r2
 800982c:	68f9      	ldr	r1, [r7, #12]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	0013      	movs	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	189b      	adds	r3, r3, r2
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	18cb      	adds	r3, r1, r3
 800983a:	3302      	adds	r3, #2
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	e00d      	b.n	800985c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009840:	1cfb      	adds	r3, r7, #3
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	227f      	movs	r2, #127	; 0x7f
 8009846:	401a      	ands	r2, r3
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	23b5      	movs	r3, #181	; 0xb5
 800984c:	0059      	lsls	r1, r3, #1
 800984e:	0013      	movs	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	189b      	adds	r3, r3, r2
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	18c3      	adds	r3, r0, r3
 8009858:	185b      	adds	r3, r3, r1
 800985a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800985c:	0018      	movs	r0, r3
 800985e:	46bd      	mov	sp, r7
 8009860:	b004      	add	sp, #16
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	000a      	movs	r2, r1
 800986e:	1cfb      	adds	r3, r7, #3
 8009870:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009872:	210f      	movs	r1, #15
 8009874:	187b      	adds	r3, r7, r1
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987a:	260e      	movs	r6, #14
 800987c:	19bb      	adds	r3, r7, r6
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	23b0      	movs	r3, #176	; 0xb0
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	58d2      	ldr	r2, [r2, r3]
 800988a:	000d      	movs	r5, r1
 800988c:	187c      	adds	r4, r7, r1
 800988e:	1cfb      	adds	r3, r7, #3
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	0019      	movs	r1, r3
 8009894:	0010      	movs	r0, r2
 8009896:	f7f9 fc99 	bl	80031cc <HAL_PCD_SetAddress>
 800989a:	0003      	movs	r3, r0
 800989c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	19bc      	adds	r4, r7, r6
 80098a0:	197b      	adds	r3, r7, r5
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	0018      	movs	r0, r3
 80098a6:	f000 f8a8 	bl	80099fa <USBD_Get_USB_Status>
 80098aa:	0003      	movs	r3, r0
 80098ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098ae:	19bb      	adds	r3, r7, r6
 80098b0:	781b      	ldrb	r3, [r3, #0]
}
 80098b2:	0018      	movs	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b005      	add	sp, #20
 80098b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	0008      	movs	r0, r1
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	0019      	movs	r1, r3
 80098c8:	230b      	movs	r3, #11
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	1c02      	adds	r2, r0, #0
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	2408      	movs	r4, #8
 80098d2:	193b      	adds	r3, r7, r4
 80098d4:	1c0a      	adds	r2, r1, #0
 80098d6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d8:	2117      	movs	r1, #23
 80098da:	187b      	adds	r3, r7, r1
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2516      	movs	r5, #22
 80098e2:	197b      	adds	r3, r7, r5
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	23b0      	movs	r3, #176	; 0xb0
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	58d0      	ldr	r0, [r2, r3]
 80098f0:	193b      	adds	r3, r7, r4
 80098f2:	881d      	ldrh	r5, [r3, #0]
 80098f4:	000e      	movs	r6, r1
 80098f6:	187c      	adds	r4, r7, r1
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	230b      	movs	r3, #11
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	7819      	ldrb	r1, [r3, #0]
 8009900:	002b      	movs	r3, r5
 8009902:	f7f9 fdb4 	bl	800346e <HAL_PCD_EP_Transmit>
 8009906:	0003      	movs	r3, r0
 8009908:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990a:	2516      	movs	r5, #22
 800990c:	197c      	adds	r4, r7, r5
 800990e:	19bb      	adds	r3, r7, r6
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	0018      	movs	r0, r3
 8009914:	f000 f871 	bl	80099fa <USBD_Get_USB_Status>
 8009918:	0003      	movs	r3, r0
 800991a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800991c:	197b      	adds	r3, r7, r5
 800991e:	781b      	ldrb	r3, [r3, #0]
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b007      	add	sp, #28
 8009926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009928 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	0008      	movs	r0, r1
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	0019      	movs	r1, r3
 8009936:	230b      	movs	r3, #11
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	1c02      	adds	r2, r0, #0
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	2408      	movs	r4, #8
 8009940:	193b      	adds	r3, r7, r4
 8009942:	1c0a      	adds	r2, r1, #0
 8009944:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009946:	2117      	movs	r1, #23
 8009948:	187b      	adds	r3, r7, r1
 800994a:	2200      	movs	r2, #0
 800994c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994e:	2516      	movs	r5, #22
 8009950:	197b      	adds	r3, r7, r5
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	23b0      	movs	r3, #176	; 0xb0
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	58d0      	ldr	r0, [r2, r3]
 800995e:	193b      	adds	r3, r7, r4
 8009960:	881d      	ldrh	r5, [r3, #0]
 8009962:	000e      	movs	r6, r1
 8009964:	187c      	adds	r4, r7, r1
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	230b      	movs	r3, #11
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	7819      	ldrb	r1, [r3, #0]
 800996e:	002b      	movs	r3, r5
 8009970:	f7f9 fd20 	bl	80033b4 <HAL_PCD_EP_Receive>
 8009974:	0003      	movs	r3, r0
 8009976:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009978:	2516      	movs	r5, #22
 800997a:	197c      	adds	r4, r7, r5
 800997c:	19bb      	adds	r3, r7, r6
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	0018      	movs	r0, r3
 8009982:	f000 f83a 	bl	80099fa <USBD_Get_USB_Status>
 8009986:	0003      	movs	r3, r0
 8009988:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800998a:	197b      	adds	r3, r7, r5
 800998c:	781b      	ldrb	r3, [r3, #0]
}
 800998e:	0018      	movs	r0, r3
 8009990:	46bd      	mov	sp, r7
 8009992:	b007      	add	sp, #28
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009996 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	000a      	movs	r2, r1
 80099a0:	1cfb      	adds	r3, r7, #3
 80099a2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	23b0      	movs	r3, #176	; 0xb0
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	58d2      	ldr	r2, [r2, r3]
 80099ac:	1cfb      	adds	r3, r7, #3
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	0019      	movs	r1, r3
 80099b2:	0010      	movs	r0, r2
 80099b4:	f7f9 fd42 	bl	800343c <HAL_PCD_EP_GetRxCount>
 80099b8:	0003      	movs	r3, r0
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b002      	add	sp, #8
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <USBD_static_malloc+0x14>)
}
 80099ce:	0018      	movs	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b002      	add	sp, #8
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	20000248 	.word	0x20000248

080099dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

}
 80099e4:	46c0      	nop			; (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b002      	add	sp, #8
 80099ea:	bd80      	pop	{r7, pc}

080099ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80099f0:	f7f7 fbd6 	bl	80011a0 <SystemClock_Config>
}
 80099f4:	46c0      	nop			; (mov r8, r8)
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	0002      	movs	r2, r0
 8009a02:	1dfb      	adds	r3, r7, #7
 8009a04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	230f      	movs	r3, #15
 8009a08:	18fb      	adds	r3, r7, r3
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009a0e:	1dfb      	adds	r3, r7, #7
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d017      	beq.n	8009a46 <USBD_Get_USB_Status+0x4c>
 8009a16:	dc1b      	bgt.n	8009a50 <USBD_Get_USB_Status+0x56>
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d00f      	beq.n	8009a3c <USBD_Get_USB_Status+0x42>
 8009a1c:	dc18      	bgt.n	8009a50 <USBD_Get_USB_Status+0x56>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <USBD_Get_USB_Status+0x2e>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d005      	beq.n	8009a32 <USBD_Get_USB_Status+0x38>
 8009a26:	e013      	b.n	8009a50 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a28:	230f      	movs	r3, #15
 8009a2a:	18fb      	adds	r3, r7, r3
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]
    break;
 8009a30:	e013      	b.n	8009a5a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a32:	230f      	movs	r3, #15
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	2202      	movs	r2, #2
 8009a38:	701a      	strb	r2, [r3, #0]
    break;
 8009a3a:	e00e      	b.n	8009a5a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a3c:	230f      	movs	r3, #15
 8009a3e:	18fb      	adds	r3, r7, r3
 8009a40:	2201      	movs	r2, #1
 8009a42:	701a      	strb	r2, [r3, #0]
    break;
 8009a44:	e009      	b.n	8009a5a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a46:	230f      	movs	r3, #15
 8009a48:	18fb      	adds	r3, r7, r3
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	701a      	strb	r2, [r3, #0]
    break;
 8009a4e:	e004      	b.n	8009a5a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009a50:	230f      	movs	r3, #15
 8009a52:	18fb      	adds	r3, r7, r3
 8009a54:	2202      	movs	r2, #2
 8009a56:	701a      	strb	r2, [r3, #0]
    break;
 8009a58:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	781b      	ldrb	r3, [r3, #0]
}
 8009a60:	0018      	movs	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b004      	add	sp, #16
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <__errno>:
 8009a68:	4b01      	ldr	r3, [pc, #4]	; (8009a70 <__errno+0x8>)
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	4770      	bx	lr
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	20000180 	.word	0x20000180

08009a74 <__libc_init_array>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	2600      	movs	r6, #0
 8009a78:	4d0c      	ldr	r5, [pc, #48]	; (8009aac <__libc_init_array+0x38>)
 8009a7a:	4c0d      	ldr	r4, [pc, #52]	; (8009ab0 <__libc_init_array+0x3c>)
 8009a7c:	1b64      	subs	r4, r4, r5
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	42a6      	cmp	r6, r4
 8009a82:	d109      	bne.n	8009a98 <__libc_init_array+0x24>
 8009a84:	2600      	movs	r6, #0
 8009a86:	f000 fc55 	bl	800a334 <_init>
 8009a8a:	4d0a      	ldr	r5, [pc, #40]	; (8009ab4 <__libc_init_array+0x40>)
 8009a8c:	4c0a      	ldr	r4, [pc, #40]	; (8009ab8 <__libc_init_array+0x44>)
 8009a8e:	1b64      	subs	r4, r4, r5
 8009a90:	10a4      	asrs	r4, r4, #2
 8009a92:	42a6      	cmp	r6, r4
 8009a94:	d105      	bne.n	8009aa2 <__libc_init_array+0x2e>
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	00b3      	lsls	r3, r6, #2
 8009a9a:	58eb      	ldr	r3, [r5, r3]
 8009a9c:	4798      	blx	r3
 8009a9e:	3601      	adds	r6, #1
 8009aa0:	e7ee      	b.n	8009a80 <__libc_init_array+0xc>
 8009aa2:	00b3      	lsls	r3, r6, #2
 8009aa4:	58eb      	ldr	r3, [r5, r3]
 8009aa6:	4798      	blx	r3
 8009aa8:	3601      	adds	r6, #1
 8009aaa:	e7f2      	b.n	8009a92 <__libc_init_array+0x1e>
 8009aac:	0800aadc 	.word	0x0800aadc
 8009ab0:	0800aadc 	.word	0x0800aadc
 8009ab4:	0800aadc 	.word	0x0800aadc
 8009ab8:	0800aae0 	.word	0x0800aae0

08009abc <memcpy>:
 8009abc:	2300      	movs	r3, #0
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d100      	bne.n	8009ac6 <memcpy+0xa>
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	5ccc      	ldrb	r4, [r1, r3]
 8009ac8:	54c4      	strb	r4, [r0, r3]
 8009aca:	3301      	adds	r3, #1
 8009acc:	e7f8      	b.n	8009ac0 <memcpy+0x4>

08009ace <memset>:
 8009ace:	0003      	movs	r3, r0
 8009ad0:	1882      	adds	r2, r0, r2
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d100      	bne.n	8009ad8 <memset+0xa>
 8009ad6:	4770      	bx	lr
 8009ad8:	7019      	strb	r1, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	e7f9      	b.n	8009ad2 <memset+0x4>
	...

08009ae0 <siprintf>:
 8009ae0:	b40e      	push	{r1, r2, r3}
 8009ae2:	b500      	push	{lr}
 8009ae4:	490b      	ldr	r1, [pc, #44]	; (8009b14 <siprintf+0x34>)
 8009ae6:	b09c      	sub	sp, #112	; 0x70
 8009ae8:	ab1d      	add	r3, sp, #116	; 0x74
 8009aea:	9002      	str	r0, [sp, #8]
 8009aec:	9006      	str	r0, [sp, #24]
 8009aee:	9107      	str	r1, [sp, #28]
 8009af0:	9104      	str	r1, [sp, #16]
 8009af2:	4809      	ldr	r0, [pc, #36]	; (8009b18 <siprintf+0x38>)
 8009af4:	4909      	ldr	r1, [pc, #36]	; (8009b1c <siprintf+0x3c>)
 8009af6:	cb04      	ldmia	r3!, {r2}
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	a902      	add	r1, sp, #8
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	f000 f87e 	bl	8009c00 <_svfiprintf_r>
 8009b04:	2300      	movs	r3, #0
 8009b06:	9a02      	ldr	r2, [sp, #8]
 8009b08:	7013      	strb	r3, [r2, #0]
 8009b0a:	b01c      	add	sp, #112	; 0x70
 8009b0c:	bc08      	pop	{r3}
 8009b0e:	b003      	add	sp, #12
 8009b10:	4718      	bx	r3
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	7fffffff 	.word	0x7fffffff
 8009b18:	20000180 	.word	0x20000180
 8009b1c:	ffff0208 	.word	0xffff0208

08009b20 <strcat>:
 8009b20:	0002      	movs	r2, r0
 8009b22:	b510      	push	{r4, lr}
 8009b24:	7813      	ldrb	r3, [r2, #0]
 8009b26:	0014      	movs	r4, r2
 8009b28:	3201      	adds	r2, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1fa      	bne.n	8009b24 <strcat+0x4>
 8009b2e:	5cca      	ldrb	r2, [r1, r3]
 8009b30:	54e2      	strb	r2, [r4, r3]
 8009b32:	3301      	adds	r3, #1
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d1fa      	bne.n	8009b2e <strcat+0xe>
 8009b38:	bd10      	pop	{r4, pc}
	...

08009b3c <__ssputs_r>:
 8009b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3e:	688e      	ldr	r6, [r1, #8]
 8009b40:	b085      	sub	sp, #20
 8009b42:	0007      	movs	r7, r0
 8009b44:	000c      	movs	r4, r1
 8009b46:	9203      	str	r2, [sp, #12]
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	429e      	cmp	r6, r3
 8009b4c:	d83c      	bhi.n	8009bc8 <__ssputs_r+0x8c>
 8009b4e:	2390      	movs	r3, #144	; 0x90
 8009b50:	898a      	ldrh	r2, [r1, #12]
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	421a      	tst	r2, r3
 8009b56:	d034      	beq.n	8009bc2 <__ssputs_r+0x86>
 8009b58:	2503      	movs	r5, #3
 8009b5a:	6909      	ldr	r1, [r1, #16]
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	1a5b      	subs	r3, r3, r1
 8009b60:	9302      	str	r3, [sp, #8]
 8009b62:	6963      	ldr	r3, [r4, #20]
 8009b64:	9802      	ldr	r0, [sp, #8]
 8009b66:	435d      	muls	r5, r3
 8009b68:	0feb      	lsrs	r3, r5, #31
 8009b6a:	195d      	adds	r5, r3, r5
 8009b6c:	9b01      	ldr	r3, [sp, #4]
 8009b6e:	106d      	asrs	r5, r5, #1
 8009b70:	3301      	adds	r3, #1
 8009b72:	181b      	adds	r3, r3, r0
 8009b74:	42ab      	cmp	r3, r5
 8009b76:	d900      	bls.n	8009b7a <__ssputs_r+0x3e>
 8009b78:	001d      	movs	r5, r3
 8009b7a:	0553      	lsls	r3, r2, #21
 8009b7c:	d532      	bpl.n	8009be4 <__ssputs_r+0xa8>
 8009b7e:	0029      	movs	r1, r5
 8009b80:	0038      	movs	r0, r7
 8009b82:	f000 fb27 	bl	800a1d4 <_malloc_r>
 8009b86:	1e06      	subs	r6, r0, #0
 8009b88:	d109      	bne.n	8009b9e <__ssputs_r+0x62>
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	603b      	str	r3, [r7, #0]
 8009b8e:	2340      	movs	r3, #64	; 0x40
 8009b90:	2001      	movs	r0, #1
 8009b92:	89a2      	ldrh	r2, [r4, #12]
 8009b94:	4240      	negs	r0, r0
 8009b96:	4313      	orrs	r3, r2
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	b005      	add	sp, #20
 8009b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9e:	9a02      	ldr	r2, [sp, #8]
 8009ba0:	6921      	ldr	r1, [r4, #16]
 8009ba2:	f7ff ff8b 	bl	8009abc <memcpy>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	4a14      	ldr	r2, [pc, #80]	; (8009bfc <__ssputs_r+0xc0>)
 8009baa:	401a      	ands	r2, r3
 8009bac:	2380      	movs	r3, #128	; 0x80
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	9b02      	ldr	r3, [sp, #8]
 8009bb4:	6126      	str	r6, [r4, #16]
 8009bb6:	18f6      	adds	r6, r6, r3
 8009bb8:	6026      	str	r6, [r4, #0]
 8009bba:	6165      	str	r5, [r4, #20]
 8009bbc:	9e01      	ldr	r6, [sp, #4]
 8009bbe:	1aed      	subs	r5, r5, r3
 8009bc0:	60a5      	str	r5, [r4, #8]
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	429e      	cmp	r6, r3
 8009bc6:	d900      	bls.n	8009bca <__ssputs_r+0x8e>
 8009bc8:	9e01      	ldr	r6, [sp, #4]
 8009bca:	0032      	movs	r2, r6
 8009bcc:	9903      	ldr	r1, [sp, #12]
 8009bce:	6820      	ldr	r0, [r4, #0]
 8009bd0:	f000 faa3 	bl	800a11a <memmove>
 8009bd4:	68a3      	ldr	r3, [r4, #8]
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	1b9b      	subs	r3, r3, r6
 8009bda:	60a3      	str	r3, [r4, #8]
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	199e      	adds	r6, r3, r6
 8009be0:	6026      	str	r6, [r4, #0]
 8009be2:	e7da      	b.n	8009b9a <__ssputs_r+0x5e>
 8009be4:	002a      	movs	r2, r5
 8009be6:	0038      	movs	r0, r7
 8009be8:	f000 fb52 	bl	800a290 <_realloc_r>
 8009bec:	1e06      	subs	r6, r0, #0
 8009bee:	d1e0      	bne.n	8009bb2 <__ssputs_r+0x76>
 8009bf0:	0038      	movs	r0, r7
 8009bf2:	6921      	ldr	r1, [r4, #16]
 8009bf4:	f000 faa4 	bl	800a140 <_free_r>
 8009bf8:	e7c7      	b.n	8009b8a <__ssputs_r+0x4e>
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	fffffb7f 	.word	0xfffffb7f

08009c00 <_svfiprintf_r>:
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	b0a1      	sub	sp, #132	; 0x84
 8009c04:	9003      	str	r0, [sp, #12]
 8009c06:	001d      	movs	r5, r3
 8009c08:	898b      	ldrh	r3, [r1, #12]
 8009c0a:	000f      	movs	r7, r1
 8009c0c:	0016      	movs	r6, r2
 8009c0e:	061b      	lsls	r3, r3, #24
 8009c10:	d511      	bpl.n	8009c36 <_svfiprintf_r+0x36>
 8009c12:	690b      	ldr	r3, [r1, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10e      	bne.n	8009c36 <_svfiprintf_r+0x36>
 8009c18:	2140      	movs	r1, #64	; 0x40
 8009c1a:	f000 fadb 	bl	800a1d4 <_malloc_r>
 8009c1e:	6038      	str	r0, [r7, #0]
 8009c20:	6138      	str	r0, [r7, #16]
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d105      	bne.n	8009c32 <_svfiprintf_r+0x32>
 8009c26:	230c      	movs	r3, #12
 8009c28:	9a03      	ldr	r2, [sp, #12]
 8009c2a:	3801      	subs	r0, #1
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	b021      	add	sp, #132	; 0x84
 8009c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c32:	2340      	movs	r3, #64	; 0x40
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	2300      	movs	r3, #0
 8009c38:	ac08      	add	r4, sp, #32
 8009c3a:	6163      	str	r3, [r4, #20]
 8009c3c:	3320      	adds	r3, #32
 8009c3e:	7663      	strb	r3, [r4, #25]
 8009c40:	3310      	adds	r3, #16
 8009c42:	76a3      	strb	r3, [r4, #26]
 8009c44:	9507      	str	r5, [sp, #28]
 8009c46:	0035      	movs	r5, r6
 8009c48:	782b      	ldrb	r3, [r5, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <_svfiprintf_r+0x52>
 8009c4e:	2b25      	cmp	r3, #37	; 0x25
 8009c50:	d147      	bne.n	8009ce2 <_svfiprintf_r+0xe2>
 8009c52:	1bab      	subs	r3, r5, r6
 8009c54:	9305      	str	r3, [sp, #20]
 8009c56:	42b5      	cmp	r5, r6
 8009c58:	d00c      	beq.n	8009c74 <_svfiprintf_r+0x74>
 8009c5a:	0032      	movs	r2, r6
 8009c5c:	0039      	movs	r1, r7
 8009c5e:	9803      	ldr	r0, [sp, #12]
 8009c60:	f7ff ff6c 	bl	8009b3c <__ssputs_r>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d100      	bne.n	8009c6a <_svfiprintf_r+0x6a>
 8009c68:	e0ae      	b.n	8009dc8 <_svfiprintf_r+0x1c8>
 8009c6a:	6962      	ldr	r2, [r4, #20]
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	4694      	mov	ip, r2
 8009c70:	4463      	add	r3, ip
 8009c72:	6163      	str	r3, [r4, #20]
 8009c74:	782b      	ldrb	r3, [r5, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d100      	bne.n	8009c7c <_svfiprintf_r+0x7c>
 8009c7a:	e0a5      	b.n	8009dc8 <_svfiprintf_r+0x1c8>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4252      	negs	r2, r2
 8009c82:	6062      	str	r2, [r4, #4]
 8009c84:	a904      	add	r1, sp, #16
 8009c86:	3254      	adds	r2, #84	; 0x54
 8009c88:	1852      	adds	r2, r2, r1
 8009c8a:	1c6e      	adds	r6, r5, #1
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	60e3      	str	r3, [r4, #12]
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	7013      	strb	r3, [r2, #0]
 8009c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c96:	2205      	movs	r2, #5
 8009c98:	7831      	ldrb	r1, [r6, #0]
 8009c9a:	4854      	ldr	r0, [pc, #336]	; (8009dec <_svfiprintf_r+0x1ec>)
 8009c9c:	f000 fa32 	bl	800a104 <memchr>
 8009ca0:	1c75      	adds	r5, r6, #1
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d11f      	bne.n	8009ce6 <_svfiprintf_r+0xe6>
 8009ca6:	6822      	ldr	r2, [r4, #0]
 8009ca8:	06d3      	lsls	r3, r2, #27
 8009caa:	d504      	bpl.n	8009cb6 <_svfiprintf_r+0xb6>
 8009cac:	2353      	movs	r3, #83	; 0x53
 8009cae:	a904      	add	r1, sp, #16
 8009cb0:	185b      	adds	r3, r3, r1
 8009cb2:	2120      	movs	r1, #32
 8009cb4:	7019      	strb	r1, [r3, #0]
 8009cb6:	0713      	lsls	r3, r2, #28
 8009cb8:	d504      	bpl.n	8009cc4 <_svfiprintf_r+0xc4>
 8009cba:	2353      	movs	r3, #83	; 0x53
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	185b      	adds	r3, r3, r1
 8009cc0:	212b      	movs	r1, #43	; 0x2b
 8009cc2:	7019      	strb	r1, [r3, #0]
 8009cc4:	7833      	ldrb	r3, [r6, #0]
 8009cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc8:	d016      	beq.n	8009cf8 <_svfiprintf_r+0xf8>
 8009cca:	0035      	movs	r5, r6
 8009ccc:	2100      	movs	r1, #0
 8009cce:	200a      	movs	r0, #10
 8009cd0:	68e3      	ldr	r3, [r4, #12]
 8009cd2:	782a      	ldrb	r2, [r5, #0]
 8009cd4:	1c6e      	adds	r6, r5, #1
 8009cd6:	3a30      	subs	r2, #48	; 0x30
 8009cd8:	2a09      	cmp	r2, #9
 8009cda:	d94e      	bls.n	8009d7a <_svfiprintf_r+0x17a>
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d111      	bne.n	8009d04 <_svfiprintf_r+0x104>
 8009ce0:	e017      	b.n	8009d12 <_svfiprintf_r+0x112>
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	e7b0      	b.n	8009c48 <_svfiprintf_r+0x48>
 8009ce6:	4b41      	ldr	r3, [pc, #260]	; (8009dec <_svfiprintf_r+0x1ec>)
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	1ac0      	subs	r0, r0, r3
 8009cec:	2301      	movs	r3, #1
 8009cee:	4083      	lsls	r3, r0
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	002e      	movs	r6, r5
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	e7ce      	b.n	8009c96 <_svfiprintf_r+0x96>
 8009cf8:	9b07      	ldr	r3, [sp, #28]
 8009cfa:	1d19      	adds	r1, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	9107      	str	r1, [sp, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	db01      	blt.n	8009d08 <_svfiprintf_r+0x108>
 8009d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d06:	e004      	b.n	8009d12 <_svfiprintf_r+0x112>
 8009d08:	425b      	negs	r3, r3
 8009d0a:	60e3      	str	r3, [r4, #12]
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	782b      	ldrb	r3, [r5, #0]
 8009d14:	2b2e      	cmp	r3, #46	; 0x2e
 8009d16:	d10a      	bne.n	8009d2e <_svfiprintf_r+0x12e>
 8009d18:	786b      	ldrb	r3, [r5, #1]
 8009d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1c:	d135      	bne.n	8009d8a <_svfiprintf_r+0x18a>
 8009d1e:	9b07      	ldr	r3, [sp, #28]
 8009d20:	3502      	adds	r5, #2
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9207      	str	r2, [sp, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	db2b      	blt.n	8009d84 <_svfiprintf_r+0x184>
 8009d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2e:	4e30      	ldr	r6, [pc, #192]	; (8009df0 <_svfiprintf_r+0x1f0>)
 8009d30:	2203      	movs	r2, #3
 8009d32:	0030      	movs	r0, r6
 8009d34:	7829      	ldrb	r1, [r5, #0]
 8009d36:	f000 f9e5 	bl	800a104 <memchr>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d006      	beq.n	8009d4c <_svfiprintf_r+0x14c>
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	1b80      	subs	r0, r0, r6
 8009d42:	4083      	lsls	r3, r0
 8009d44:	6822      	ldr	r2, [r4, #0]
 8009d46:	3501      	adds	r5, #1
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	7829      	ldrb	r1, [r5, #0]
 8009d4e:	2206      	movs	r2, #6
 8009d50:	4828      	ldr	r0, [pc, #160]	; (8009df4 <_svfiprintf_r+0x1f4>)
 8009d52:	1c6e      	adds	r6, r5, #1
 8009d54:	7621      	strb	r1, [r4, #24]
 8009d56:	f000 f9d5 	bl	800a104 <memchr>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d03c      	beq.n	8009dd8 <_svfiprintf_r+0x1d8>
 8009d5e:	4b26      	ldr	r3, [pc, #152]	; (8009df8 <_svfiprintf_r+0x1f8>)
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d125      	bne.n	8009db0 <_svfiprintf_r+0x1b0>
 8009d64:	2207      	movs	r2, #7
 8009d66:	9b07      	ldr	r3, [sp, #28]
 8009d68:	3307      	adds	r3, #7
 8009d6a:	4393      	bics	r3, r2
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	9307      	str	r3, [sp, #28]
 8009d70:	6963      	ldr	r3, [r4, #20]
 8009d72:	9a04      	ldr	r2, [sp, #16]
 8009d74:	189b      	adds	r3, r3, r2
 8009d76:	6163      	str	r3, [r4, #20]
 8009d78:	e765      	b.n	8009c46 <_svfiprintf_r+0x46>
 8009d7a:	4343      	muls	r3, r0
 8009d7c:	0035      	movs	r5, r6
 8009d7e:	2101      	movs	r1, #1
 8009d80:	189b      	adds	r3, r3, r2
 8009d82:	e7a6      	b.n	8009cd2 <_svfiprintf_r+0xd2>
 8009d84:	2301      	movs	r3, #1
 8009d86:	425b      	negs	r3, r3
 8009d88:	e7d0      	b.n	8009d2c <_svfiprintf_r+0x12c>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	200a      	movs	r0, #10
 8009d8e:	001a      	movs	r2, r3
 8009d90:	3501      	adds	r5, #1
 8009d92:	6063      	str	r3, [r4, #4]
 8009d94:	7829      	ldrb	r1, [r5, #0]
 8009d96:	1c6e      	adds	r6, r5, #1
 8009d98:	3930      	subs	r1, #48	; 0x30
 8009d9a:	2909      	cmp	r1, #9
 8009d9c:	d903      	bls.n	8009da6 <_svfiprintf_r+0x1a6>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0c5      	beq.n	8009d2e <_svfiprintf_r+0x12e>
 8009da2:	9209      	str	r2, [sp, #36]	; 0x24
 8009da4:	e7c3      	b.n	8009d2e <_svfiprintf_r+0x12e>
 8009da6:	4342      	muls	r2, r0
 8009da8:	0035      	movs	r5, r6
 8009daa:	2301      	movs	r3, #1
 8009dac:	1852      	adds	r2, r2, r1
 8009dae:	e7f1      	b.n	8009d94 <_svfiprintf_r+0x194>
 8009db0:	ab07      	add	r3, sp, #28
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	003a      	movs	r2, r7
 8009db6:	0021      	movs	r1, r4
 8009db8:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <_svfiprintf_r+0x1fc>)
 8009dba:	9803      	ldr	r0, [sp, #12]
 8009dbc:	e000      	b.n	8009dc0 <_svfiprintf_r+0x1c0>
 8009dbe:	bf00      	nop
 8009dc0:	9004      	str	r0, [sp, #16]
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	d1d3      	bne.n	8009d70 <_svfiprintf_r+0x170>
 8009dc8:	89bb      	ldrh	r3, [r7, #12]
 8009dca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009dcc:	065b      	lsls	r3, r3, #25
 8009dce:	d400      	bmi.n	8009dd2 <_svfiprintf_r+0x1d2>
 8009dd0:	e72d      	b.n	8009c2e <_svfiprintf_r+0x2e>
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	4240      	negs	r0, r0
 8009dd6:	e72a      	b.n	8009c2e <_svfiprintf_r+0x2e>
 8009dd8:	ab07      	add	r3, sp, #28
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	003a      	movs	r2, r7
 8009dde:	0021      	movs	r1, r4
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <_svfiprintf_r+0x1fc>)
 8009de2:	9803      	ldr	r0, [sp, #12]
 8009de4:	f000 f87c 	bl	8009ee0 <_printf_i>
 8009de8:	e7ea      	b.n	8009dc0 <_svfiprintf_r+0x1c0>
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	0800aaa8 	.word	0x0800aaa8
 8009df0:	0800aaae 	.word	0x0800aaae
 8009df4:	0800aab2 	.word	0x0800aab2
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	08009b3d 	.word	0x08009b3d

08009e00 <_printf_common>:
 8009e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e02:	0015      	movs	r5, r2
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	688a      	ldr	r2, [r1, #8]
 8009e08:	690b      	ldr	r3, [r1, #16]
 8009e0a:	000c      	movs	r4, r1
 8009e0c:	9000      	str	r0, [sp, #0]
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	da00      	bge.n	8009e14 <_printf_common+0x14>
 8009e12:	0013      	movs	r3, r2
 8009e14:	0022      	movs	r2, r4
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	3243      	adds	r2, #67	; 0x43
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	d001      	beq.n	8009e24 <_printf_common+0x24>
 8009e20:	3301      	adds	r3, #1
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	069b      	lsls	r3, r3, #26
 8009e28:	d502      	bpl.n	8009e30 <_printf_common+0x30>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	2306      	movs	r3, #6
 8009e34:	0017      	movs	r7, r2
 8009e36:	401f      	ands	r7, r3
 8009e38:	421a      	tst	r2, r3
 8009e3a:	d027      	beq.n	8009e8c <_printf_common+0x8c>
 8009e3c:	0023      	movs	r3, r4
 8009e3e:	3343      	adds	r3, #67	; 0x43
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	1e5a      	subs	r2, r3, #1
 8009e44:	4193      	sbcs	r3, r2
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	0692      	lsls	r2, r2, #26
 8009e4a:	d430      	bmi.n	8009eae <_printf_common+0xae>
 8009e4c:	0022      	movs	r2, r4
 8009e4e:	9901      	ldr	r1, [sp, #4]
 8009e50:	9800      	ldr	r0, [sp, #0]
 8009e52:	9e08      	ldr	r6, [sp, #32]
 8009e54:	3243      	adds	r2, #67	; 0x43
 8009e56:	47b0      	blx	r6
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d025      	beq.n	8009ea8 <_printf_common+0xa8>
 8009e5c:	2306      	movs	r3, #6
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	682a      	ldr	r2, [r5, #0]
 8009e62:	68e1      	ldr	r1, [r4, #12]
 8009e64:	2500      	movs	r5, #0
 8009e66:	4003      	ands	r3, r0
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d103      	bne.n	8009e74 <_printf_common+0x74>
 8009e6c:	1a8d      	subs	r5, r1, r2
 8009e6e:	43eb      	mvns	r3, r5
 8009e70:	17db      	asrs	r3, r3, #31
 8009e72:	401d      	ands	r5, r3
 8009e74:	68a3      	ldr	r3, [r4, #8]
 8009e76:	6922      	ldr	r2, [r4, #16]
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	dd01      	ble.n	8009e80 <_printf_common+0x80>
 8009e7c:	1a9b      	subs	r3, r3, r2
 8009e7e:	18ed      	adds	r5, r5, r3
 8009e80:	2700      	movs	r7, #0
 8009e82:	42bd      	cmp	r5, r7
 8009e84:	d120      	bne.n	8009ec8 <_printf_common+0xc8>
 8009e86:	2000      	movs	r0, #0
 8009e88:	e010      	b.n	8009eac <_printf_common+0xac>
 8009e8a:	3701      	adds	r7, #1
 8009e8c:	68e3      	ldr	r3, [r4, #12]
 8009e8e:	682a      	ldr	r2, [r5, #0]
 8009e90:	1a9b      	subs	r3, r3, r2
 8009e92:	42bb      	cmp	r3, r7
 8009e94:	ddd2      	ble.n	8009e3c <_printf_common+0x3c>
 8009e96:	0022      	movs	r2, r4
 8009e98:	2301      	movs	r3, #1
 8009e9a:	9901      	ldr	r1, [sp, #4]
 8009e9c:	9800      	ldr	r0, [sp, #0]
 8009e9e:	9e08      	ldr	r6, [sp, #32]
 8009ea0:	3219      	adds	r2, #25
 8009ea2:	47b0      	blx	r6
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d1f0      	bne.n	8009e8a <_printf_common+0x8a>
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	4240      	negs	r0, r0
 8009eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eae:	2030      	movs	r0, #48	; 0x30
 8009eb0:	18e1      	adds	r1, r4, r3
 8009eb2:	3143      	adds	r1, #67	; 0x43
 8009eb4:	7008      	strb	r0, [r1, #0]
 8009eb6:	0021      	movs	r1, r4
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	3145      	adds	r1, #69	; 0x45
 8009ebc:	7809      	ldrb	r1, [r1, #0]
 8009ebe:	18a2      	adds	r2, r4, r2
 8009ec0:	3243      	adds	r2, #67	; 0x43
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	7011      	strb	r1, [r2, #0]
 8009ec6:	e7c1      	b.n	8009e4c <_printf_common+0x4c>
 8009ec8:	0022      	movs	r2, r4
 8009eca:	2301      	movs	r3, #1
 8009ecc:	9901      	ldr	r1, [sp, #4]
 8009ece:	9800      	ldr	r0, [sp, #0]
 8009ed0:	9e08      	ldr	r6, [sp, #32]
 8009ed2:	321a      	adds	r2, #26
 8009ed4:	47b0      	blx	r6
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d0e6      	beq.n	8009ea8 <_printf_common+0xa8>
 8009eda:	3701      	adds	r7, #1
 8009edc:	e7d1      	b.n	8009e82 <_printf_common+0x82>
	...

08009ee0 <_printf_i>:
 8009ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ee2:	b08b      	sub	sp, #44	; 0x2c
 8009ee4:	9206      	str	r2, [sp, #24]
 8009ee6:	000a      	movs	r2, r1
 8009ee8:	3243      	adds	r2, #67	; 0x43
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	9005      	str	r0, [sp, #20]
 8009eee:	9204      	str	r2, [sp, #16]
 8009ef0:	7e0a      	ldrb	r2, [r1, #24]
 8009ef2:	000c      	movs	r4, r1
 8009ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ef6:	2a78      	cmp	r2, #120	; 0x78
 8009ef8:	d806      	bhi.n	8009f08 <_printf_i+0x28>
 8009efa:	2a62      	cmp	r2, #98	; 0x62
 8009efc:	d808      	bhi.n	8009f10 <_printf_i+0x30>
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	d100      	bne.n	8009f04 <_printf_i+0x24>
 8009f02:	e0c0      	b.n	800a086 <_printf_i+0x1a6>
 8009f04:	2a58      	cmp	r2, #88	; 0x58
 8009f06:	d052      	beq.n	8009fae <_printf_i+0xce>
 8009f08:	0026      	movs	r6, r4
 8009f0a:	3642      	adds	r6, #66	; 0x42
 8009f0c:	7032      	strb	r2, [r6, #0]
 8009f0e:	e022      	b.n	8009f56 <_printf_i+0x76>
 8009f10:	0010      	movs	r0, r2
 8009f12:	3863      	subs	r0, #99	; 0x63
 8009f14:	2815      	cmp	r0, #21
 8009f16:	d8f7      	bhi.n	8009f08 <_printf_i+0x28>
 8009f18:	f7f6 f8fe 	bl	8000118 <__gnu_thumb1_case_shi>
 8009f1c:	001f0016 	.word	0x001f0016
 8009f20:	fff6fff6 	.word	0xfff6fff6
 8009f24:	fff6fff6 	.word	0xfff6fff6
 8009f28:	fff6001f 	.word	0xfff6001f
 8009f2c:	fff6fff6 	.word	0xfff6fff6
 8009f30:	00a8fff6 	.word	0x00a8fff6
 8009f34:	009a0036 	.word	0x009a0036
 8009f38:	fff6fff6 	.word	0xfff6fff6
 8009f3c:	fff600b9 	.word	0xfff600b9
 8009f40:	fff60036 	.word	0xfff60036
 8009f44:	009efff6 	.word	0x009efff6
 8009f48:	0026      	movs	r6, r4
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	3642      	adds	r6, #66	; 0x42
 8009f4e:	1d11      	adds	r1, r2, #4
 8009f50:	6019      	str	r1, [r3, #0]
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	7033      	strb	r3, [r6, #0]
 8009f56:	2301      	movs	r3, #1
 8009f58:	e0a7      	b.n	800a0aa <_printf_i+0x1ca>
 8009f5a:	6808      	ldr	r0, [r1, #0]
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	1d0a      	adds	r2, r1, #4
 8009f60:	0605      	lsls	r5, r0, #24
 8009f62:	d50b      	bpl.n	8009f7c <_printf_i+0x9c>
 8009f64:	680d      	ldr	r5, [r1, #0]
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	da03      	bge.n	8009f74 <_printf_i+0x94>
 8009f6c:	232d      	movs	r3, #45	; 0x2d
 8009f6e:	9a04      	ldr	r2, [sp, #16]
 8009f70:	426d      	negs	r5, r5
 8009f72:	7013      	strb	r3, [r2, #0]
 8009f74:	4b61      	ldr	r3, [pc, #388]	; (800a0fc <_printf_i+0x21c>)
 8009f76:	270a      	movs	r7, #10
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	e032      	b.n	8009fe2 <_printf_i+0x102>
 8009f7c:	680d      	ldr	r5, [r1, #0]
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	0641      	lsls	r1, r0, #25
 8009f82:	d5f1      	bpl.n	8009f68 <_printf_i+0x88>
 8009f84:	b22d      	sxth	r5, r5
 8009f86:	e7ef      	b.n	8009f68 <_printf_i+0x88>
 8009f88:	680d      	ldr	r5, [r1, #0]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	1d08      	adds	r0, r1, #4
 8009f8e:	6018      	str	r0, [r3, #0]
 8009f90:	062e      	lsls	r6, r5, #24
 8009f92:	d501      	bpl.n	8009f98 <_printf_i+0xb8>
 8009f94:	680d      	ldr	r5, [r1, #0]
 8009f96:	e003      	b.n	8009fa0 <_printf_i+0xc0>
 8009f98:	066d      	lsls	r5, r5, #25
 8009f9a:	d5fb      	bpl.n	8009f94 <_printf_i+0xb4>
 8009f9c:	680d      	ldr	r5, [r1, #0]
 8009f9e:	b2ad      	uxth	r5, r5
 8009fa0:	4b56      	ldr	r3, [pc, #344]	; (800a0fc <_printf_i+0x21c>)
 8009fa2:	270a      	movs	r7, #10
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	2a6f      	cmp	r2, #111	; 0x6f
 8009fa8:	d117      	bne.n	8009fda <_printf_i+0xfa>
 8009faa:	2708      	movs	r7, #8
 8009fac:	e015      	b.n	8009fda <_printf_i+0xfa>
 8009fae:	3145      	adds	r1, #69	; 0x45
 8009fb0:	700a      	strb	r2, [r1, #0]
 8009fb2:	4a52      	ldr	r2, [pc, #328]	; (800a0fc <_printf_i+0x21c>)
 8009fb4:	9203      	str	r2, [sp, #12]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	ca20      	ldmia	r2!, {r5}
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	0608      	lsls	r0, r1, #24
 8009fc0:	d550      	bpl.n	800a064 <_printf_i+0x184>
 8009fc2:	07cb      	lsls	r3, r1, #31
 8009fc4:	d502      	bpl.n	8009fcc <_printf_i+0xec>
 8009fc6:	2320      	movs	r3, #32
 8009fc8:	4319      	orrs	r1, r3
 8009fca:	6021      	str	r1, [r4, #0]
 8009fcc:	2710      	movs	r7, #16
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	d103      	bne.n	8009fda <_printf_i+0xfa>
 8009fd2:	2320      	movs	r3, #32
 8009fd4:	6822      	ldr	r2, [r4, #0]
 8009fd6:	439a      	bics	r2, r3
 8009fd8:	6022      	str	r2, [r4, #0]
 8009fda:	0023      	movs	r3, r4
 8009fdc:	2200      	movs	r2, #0
 8009fde:	3343      	adds	r3, #67	; 0x43
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	6863      	ldr	r3, [r4, #4]
 8009fe4:	60a3      	str	r3, [r4, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	db03      	blt.n	8009ff2 <_printf_i+0x112>
 8009fea:	2204      	movs	r2, #4
 8009fec:	6821      	ldr	r1, [r4, #0]
 8009fee:	4391      	bics	r1, r2
 8009ff0:	6021      	str	r1, [r4, #0]
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	d102      	bne.n	8009ffc <_printf_i+0x11c>
 8009ff6:	9e04      	ldr	r6, [sp, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <_printf_i+0x136>
 8009ffc:	9e04      	ldr	r6, [sp, #16]
 8009ffe:	0028      	movs	r0, r5
 800a000:	0039      	movs	r1, r7
 800a002:	f7f6 f919 	bl	8000238 <__aeabi_uidivmod>
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	3e01      	subs	r6, #1
 800a00a:	5c5b      	ldrb	r3, [r3, r1]
 800a00c:	7033      	strb	r3, [r6, #0]
 800a00e:	002b      	movs	r3, r5
 800a010:	0005      	movs	r5, r0
 800a012:	429f      	cmp	r7, r3
 800a014:	d9f3      	bls.n	8009ffe <_printf_i+0x11e>
 800a016:	2f08      	cmp	r7, #8
 800a018:	d109      	bne.n	800a02e <_printf_i+0x14e>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	07db      	lsls	r3, r3, #31
 800a01e:	d506      	bpl.n	800a02e <_printf_i+0x14e>
 800a020:	6863      	ldr	r3, [r4, #4]
 800a022:	6922      	ldr	r2, [r4, #16]
 800a024:	4293      	cmp	r3, r2
 800a026:	dc02      	bgt.n	800a02e <_printf_i+0x14e>
 800a028:	2330      	movs	r3, #48	; 0x30
 800a02a:	3e01      	subs	r6, #1
 800a02c:	7033      	strb	r3, [r6, #0]
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	1b9b      	subs	r3, r3, r6
 800a032:	6123      	str	r3, [r4, #16]
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	0021      	movs	r1, r4
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	9805      	ldr	r0, [sp, #20]
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	aa09      	add	r2, sp, #36	; 0x24
 800a040:	f7ff fede 	bl	8009e00 <_printf_common>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d135      	bne.n	800a0b4 <_printf_i+0x1d4>
 800a048:	2001      	movs	r0, #1
 800a04a:	4240      	negs	r0, r0
 800a04c:	b00b      	add	sp, #44	; 0x2c
 800a04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a050:	2220      	movs	r2, #32
 800a052:	6809      	ldr	r1, [r1, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	0022      	movs	r2, r4
 800a05a:	2178      	movs	r1, #120	; 0x78
 800a05c:	3245      	adds	r2, #69	; 0x45
 800a05e:	7011      	strb	r1, [r2, #0]
 800a060:	4a27      	ldr	r2, [pc, #156]	; (800a100 <_printf_i+0x220>)
 800a062:	e7a7      	b.n	8009fb4 <_printf_i+0xd4>
 800a064:	0648      	lsls	r0, r1, #25
 800a066:	d5ac      	bpl.n	8009fc2 <_printf_i+0xe2>
 800a068:	b2ad      	uxth	r5, r5
 800a06a:	e7aa      	b.n	8009fc2 <_printf_i+0xe2>
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	680d      	ldr	r5, [r1, #0]
 800a070:	1d10      	adds	r0, r2, #4
 800a072:	6949      	ldr	r1, [r1, #20]
 800a074:	6018      	str	r0, [r3, #0]
 800a076:	6813      	ldr	r3, [r2, #0]
 800a078:	062e      	lsls	r6, r5, #24
 800a07a:	d501      	bpl.n	800a080 <_printf_i+0x1a0>
 800a07c:	6019      	str	r1, [r3, #0]
 800a07e:	e002      	b.n	800a086 <_printf_i+0x1a6>
 800a080:	066d      	lsls	r5, r5, #25
 800a082:	d5fb      	bpl.n	800a07c <_printf_i+0x19c>
 800a084:	8019      	strh	r1, [r3, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	9e04      	ldr	r6, [sp, #16]
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	e7d2      	b.n	800a034 <_printf_i+0x154>
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	1d11      	adds	r1, r2, #4
 800a092:	6019      	str	r1, [r3, #0]
 800a094:	6816      	ldr	r6, [r2, #0]
 800a096:	2100      	movs	r1, #0
 800a098:	0030      	movs	r0, r6
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	f000 f832 	bl	800a104 <memchr>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d001      	beq.n	800a0a8 <_printf_i+0x1c8>
 800a0a4:	1b80      	subs	r0, r0, r6
 800a0a6:	6060      	str	r0, [r4, #4]
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9a04      	ldr	r2, [sp, #16]
 800a0b0:	7013      	strb	r3, [r2, #0]
 800a0b2:	e7bf      	b.n	800a034 <_printf_i+0x154>
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	0032      	movs	r2, r6
 800a0b8:	9906      	ldr	r1, [sp, #24]
 800a0ba:	9805      	ldr	r0, [sp, #20]
 800a0bc:	9d07      	ldr	r5, [sp, #28]
 800a0be:	47a8      	blx	r5
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d0c1      	beq.n	800a048 <_printf_i+0x168>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	079b      	lsls	r3, r3, #30
 800a0c8:	d415      	bmi.n	800a0f6 <_printf_i+0x216>
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	68e0      	ldr	r0, [r4, #12]
 800a0ce:	4298      	cmp	r0, r3
 800a0d0:	dabc      	bge.n	800a04c <_printf_i+0x16c>
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	e7ba      	b.n	800a04c <_printf_i+0x16c>
 800a0d6:	0022      	movs	r2, r4
 800a0d8:	2301      	movs	r3, #1
 800a0da:	9906      	ldr	r1, [sp, #24]
 800a0dc:	9805      	ldr	r0, [sp, #20]
 800a0de:	9e07      	ldr	r6, [sp, #28]
 800a0e0:	3219      	adds	r2, #25
 800a0e2:	47b0      	blx	r6
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d0af      	beq.n	800a048 <_printf_i+0x168>
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	dcf0      	bgt.n	800a0d6 <_printf_i+0x1f6>
 800a0f4:	e7e9      	b.n	800a0ca <_printf_i+0x1ea>
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	e7f7      	b.n	800a0ea <_printf_i+0x20a>
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	0800aab9 	.word	0x0800aab9
 800a100:	0800aaca 	.word	0x0800aaca

0800a104 <memchr>:
 800a104:	b2c9      	uxtb	r1, r1
 800a106:	1882      	adds	r2, r0, r2
 800a108:	4290      	cmp	r0, r2
 800a10a:	d101      	bne.n	800a110 <memchr+0xc>
 800a10c:	2000      	movs	r0, #0
 800a10e:	4770      	bx	lr
 800a110:	7803      	ldrb	r3, [r0, #0]
 800a112:	428b      	cmp	r3, r1
 800a114:	d0fb      	beq.n	800a10e <memchr+0xa>
 800a116:	3001      	adds	r0, #1
 800a118:	e7f6      	b.n	800a108 <memchr+0x4>

0800a11a <memmove>:
 800a11a:	b510      	push	{r4, lr}
 800a11c:	4288      	cmp	r0, r1
 800a11e:	d902      	bls.n	800a126 <memmove+0xc>
 800a120:	188b      	adds	r3, r1, r2
 800a122:	4298      	cmp	r0, r3
 800a124:	d303      	bcc.n	800a12e <memmove+0x14>
 800a126:	2300      	movs	r3, #0
 800a128:	e007      	b.n	800a13a <memmove+0x20>
 800a12a:	5c8b      	ldrb	r3, [r1, r2]
 800a12c:	5483      	strb	r3, [r0, r2]
 800a12e:	3a01      	subs	r2, #1
 800a130:	d2fb      	bcs.n	800a12a <memmove+0x10>
 800a132:	bd10      	pop	{r4, pc}
 800a134:	5ccc      	ldrb	r4, [r1, r3]
 800a136:	54c4      	strb	r4, [r0, r3]
 800a138:	3301      	adds	r3, #1
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d1fa      	bne.n	800a134 <memmove+0x1a>
 800a13e:	e7f8      	b.n	800a132 <memmove+0x18>

0800a140 <_free_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	0005      	movs	r5, r0
 800a144:	2900      	cmp	r1, #0
 800a146:	d010      	beq.n	800a16a <_free_r+0x2a>
 800a148:	1f0c      	subs	r4, r1, #4
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da00      	bge.n	800a152 <_free_r+0x12>
 800a150:	18e4      	adds	r4, r4, r3
 800a152:	0028      	movs	r0, r5
 800a154:	f000 f8d4 	bl	800a300 <__malloc_lock>
 800a158:	4a1d      	ldr	r2, [pc, #116]	; (800a1d0 <_free_r+0x90>)
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d105      	bne.n	800a16c <_free_r+0x2c>
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	6014      	str	r4, [r2, #0]
 800a164:	0028      	movs	r0, r5
 800a166:	f000 f8d3 	bl	800a310 <__malloc_unlock>
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d908      	bls.n	800a182 <_free_r+0x42>
 800a170:	6821      	ldr	r1, [r4, #0]
 800a172:	1860      	adds	r0, r4, r1
 800a174:	4283      	cmp	r3, r0
 800a176:	d1f3      	bne.n	800a160 <_free_r+0x20>
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	1841      	adds	r1, r0, r1
 800a17e:	6021      	str	r1, [r4, #0]
 800a180:	e7ee      	b.n	800a160 <_free_r+0x20>
 800a182:	001a      	movs	r2, r3
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <_free_r+0x4e>
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	d9f9      	bls.n	800a182 <_free_r+0x42>
 800a18e:	6811      	ldr	r1, [r2, #0]
 800a190:	1850      	adds	r0, r2, r1
 800a192:	42a0      	cmp	r0, r4
 800a194:	d10b      	bne.n	800a1ae <_free_r+0x6e>
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	1809      	adds	r1, r1, r0
 800a19a:	1850      	adds	r0, r2, r1
 800a19c:	6011      	str	r1, [r2, #0]
 800a19e:	4283      	cmp	r3, r0
 800a1a0:	d1e0      	bne.n	800a164 <_free_r+0x24>
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	1841      	adds	r1, r0, r1
 800a1a8:	6011      	str	r1, [r2, #0]
 800a1aa:	6053      	str	r3, [r2, #4]
 800a1ac:	e7da      	b.n	800a164 <_free_r+0x24>
 800a1ae:	42a0      	cmp	r0, r4
 800a1b0:	d902      	bls.n	800a1b8 <_free_r+0x78>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	e7d5      	b.n	800a164 <_free_r+0x24>
 800a1b8:	6821      	ldr	r1, [r4, #0]
 800a1ba:	1860      	adds	r0, r4, r1
 800a1bc:	4283      	cmp	r3, r0
 800a1be:	d103      	bne.n	800a1c8 <_free_r+0x88>
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	1841      	adds	r1, r0, r1
 800a1c6:	6021      	str	r1, [r4, #0]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	6054      	str	r4, [r2, #4]
 800a1cc:	e7ca      	b.n	800a164 <_free_r+0x24>
 800a1ce:	46c0      	nop			; (mov r8, r8)
 800a1d0:	20000468 	.word	0x20000468

0800a1d4 <_malloc_r>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	1ccd      	adds	r5, r1, #3
 800a1da:	439d      	bics	r5, r3
 800a1dc:	3508      	adds	r5, #8
 800a1de:	0006      	movs	r6, r0
 800a1e0:	2d0c      	cmp	r5, #12
 800a1e2:	d21f      	bcs.n	800a224 <_malloc_r+0x50>
 800a1e4:	250c      	movs	r5, #12
 800a1e6:	42a9      	cmp	r1, r5
 800a1e8:	d81e      	bhi.n	800a228 <_malloc_r+0x54>
 800a1ea:	0030      	movs	r0, r6
 800a1ec:	f000 f888 	bl	800a300 <__malloc_lock>
 800a1f0:	4925      	ldr	r1, [pc, #148]	; (800a288 <_malloc_r+0xb4>)
 800a1f2:	680a      	ldr	r2, [r1, #0]
 800a1f4:	0014      	movs	r4, r2
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	d11a      	bne.n	800a230 <_malloc_r+0x5c>
 800a1fa:	4f24      	ldr	r7, [pc, #144]	; (800a28c <_malloc_r+0xb8>)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d104      	bne.n	800a20c <_malloc_r+0x38>
 800a202:	0021      	movs	r1, r4
 800a204:	0030      	movs	r0, r6
 800a206:	f000 f869 	bl	800a2dc <_sbrk_r>
 800a20a:	6038      	str	r0, [r7, #0]
 800a20c:	0029      	movs	r1, r5
 800a20e:	0030      	movs	r0, r6
 800a210:	f000 f864 	bl	800a2dc <_sbrk_r>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d12b      	bne.n	800a270 <_malloc_r+0x9c>
 800a218:	230c      	movs	r3, #12
 800a21a:	0030      	movs	r0, r6
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	f000 f877 	bl	800a310 <__malloc_unlock>
 800a222:	e003      	b.n	800a22c <_malloc_r+0x58>
 800a224:	2d00      	cmp	r5, #0
 800a226:	dade      	bge.n	800a1e6 <_malloc_r+0x12>
 800a228:	230c      	movs	r3, #12
 800a22a:	6033      	str	r3, [r6, #0]
 800a22c:	2000      	movs	r0, #0
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	1b5b      	subs	r3, r3, r5
 800a234:	d419      	bmi.n	800a26a <_malloc_r+0x96>
 800a236:	2b0b      	cmp	r3, #11
 800a238:	d903      	bls.n	800a242 <_malloc_r+0x6e>
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	18e4      	adds	r4, r4, r3
 800a23e:	6025      	str	r5, [r4, #0]
 800a240:	e003      	b.n	800a24a <_malloc_r+0x76>
 800a242:	6863      	ldr	r3, [r4, #4]
 800a244:	42a2      	cmp	r2, r4
 800a246:	d10e      	bne.n	800a266 <_malloc_r+0x92>
 800a248:	600b      	str	r3, [r1, #0]
 800a24a:	0030      	movs	r0, r6
 800a24c:	f000 f860 	bl	800a310 <__malloc_unlock>
 800a250:	0020      	movs	r0, r4
 800a252:	2207      	movs	r2, #7
 800a254:	300b      	adds	r0, #11
 800a256:	1d23      	adds	r3, r4, #4
 800a258:	4390      	bics	r0, r2
 800a25a:	1ac2      	subs	r2, r0, r3
 800a25c:	4298      	cmp	r0, r3
 800a25e:	d0e6      	beq.n	800a22e <_malloc_r+0x5a>
 800a260:	1a1b      	subs	r3, r3, r0
 800a262:	50a3      	str	r3, [r4, r2]
 800a264:	e7e3      	b.n	800a22e <_malloc_r+0x5a>
 800a266:	6053      	str	r3, [r2, #4]
 800a268:	e7ef      	b.n	800a24a <_malloc_r+0x76>
 800a26a:	0022      	movs	r2, r4
 800a26c:	6864      	ldr	r4, [r4, #4]
 800a26e:	e7c2      	b.n	800a1f6 <_malloc_r+0x22>
 800a270:	2303      	movs	r3, #3
 800a272:	1cc4      	adds	r4, r0, #3
 800a274:	439c      	bics	r4, r3
 800a276:	42a0      	cmp	r0, r4
 800a278:	d0e1      	beq.n	800a23e <_malloc_r+0x6a>
 800a27a:	1a21      	subs	r1, r4, r0
 800a27c:	0030      	movs	r0, r6
 800a27e:	f000 f82d 	bl	800a2dc <_sbrk_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d1db      	bne.n	800a23e <_malloc_r+0x6a>
 800a286:	e7c7      	b.n	800a218 <_malloc_r+0x44>
 800a288:	20000468 	.word	0x20000468
 800a28c:	2000046c 	.word	0x2000046c

0800a290 <_realloc_r>:
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	0007      	movs	r7, r0
 800a294:	000d      	movs	r5, r1
 800a296:	0016      	movs	r6, r2
 800a298:	2900      	cmp	r1, #0
 800a29a:	d105      	bne.n	800a2a8 <_realloc_r+0x18>
 800a29c:	0011      	movs	r1, r2
 800a29e:	f7ff ff99 	bl	800a1d4 <_malloc_r>
 800a2a2:	0004      	movs	r4, r0
 800a2a4:	0020      	movs	r0, r4
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	d103      	bne.n	800a2b4 <_realloc_r+0x24>
 800a2ac:	f7ff ff48 	bl	800a140 <_free_r>
 800a2b0:	0034      	movs	r4, r6
 800a2b2:	e7f7      	b.n	800a2a4 <_realloc_r+0x14>
 800a2b4:	f000 f834 	bl	800a320 <_malloc_usable_size_r>
 800a2b8:	002c      	movs	r4, r5
 800a2ba:	42b0      	cmp	r0, r6
 800a2bc:	d2f2      	bcs.n	800a2a4 <_realloc_r+0x14>
 800a2be:	0031      	movs	r1, r6
 800a2c0:	0038      	movs	r0, r7
 800a2c2:	f7ff ff87 	bl	800a1d4 <_malloc_r>
 800a2c6:	1e04      	subs	r4, r0, #0
 800a2c8:	d0ec      	beq.n	800a2a4 <_realloc_r+0x14>
 800a2ca:	0029      	movs	r1, r5
 800a2cc:	0032      	movs	r2, r6
 800a2ce:	f7ff fbf5 	bl	8009abc <memcpy>
 800a2d2:	0029      	movs	r1, r5
 800a2d4:	0038      	movs	r0, r7
 800a2d6:	f7ff ff33 	bl	800a140 <_free_r>
 800a2da:	e7e3      	b.n	800a2a4 <_realloc_r+0x14>

0800a2dc <_sbrk_r>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	4d06      	ldr	r5, [pc, #24]	; (800a2fc <_sbrk_r+0x20>)
 800a2e2:	0004      	movs	r4, r0
 800a2e4:	0008      	movs	r0, r1
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	f7f7 f93c 	bl	8001564 <_sbrk>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d103      	bne.n	800a2f8 <_sbrk_r+0x1c>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d000      	beq.n	800a2f8 <_sbrk_r+0x1c>
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	20002770 	.word	0x20002770

0800a300 <__malloc_lock>:
 800a300:	b510      	push	{r4, lr}
 800a302:	4802      	ldr	r0, [pc, #8]	; (800a30c <__malloc_lock+0xc>)
 800a304:	f000 f814 	bl	800a330 <__retarget_lock_acquire_recursive>
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	20002778 	.word	0x20002778

0800a310 <__malloc_unlock>:
 800a310:	b510      	push	{r4, lr}
 800a312:	4802      	ldr	r0, [pc, #8]	; (800a31c <__malloc_unlock+0xc>)
 800a314:	f000 f80d 	bl	800a332 <__retarget_lock_release_recursive>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	20002778 	.word	0x20002778

0800a320 <_malloc_usable_size_r>:
 800a320:	1f0b      	subs	r3, r1, #4
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	1f18      	subs	r0, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	da01      	bge.n	800a32e <_malloc_usable_size_r+0xe>
 800a32a:	580b      	ldr	r3, [r1, r0]
 800a32c:	18c0      	adds	r0, r0, r3
 800a32e:	4770      	bx	lr

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
