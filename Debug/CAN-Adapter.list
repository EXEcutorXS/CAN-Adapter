
CAN-Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080089a8  080089a8  000189a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008c0c  08008c0c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c0c  08008c0c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  2000017c  08008d90  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e0  08008d90  000216e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013758  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c8  00000000  00000000  000338fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00037548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bccf  00000000  00000000  00037f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb06  00000000  00000000  00053c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009339f  00000000  00000000  00063745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6ae4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000f6b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008990 	.word	0x08008990

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08008990 	.word	0x08008990

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HexToInt>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t HexToInt(uint8_t *string) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	617b      	str	r3, [r7, #20]
	uint32_t tmp = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	613b      	str	r3, [r7, #16]
	uint8_t i = 0;
 8000230:	230f      	movs	r3, #15
 8000232:	18fb      	adds	r3, r7, r3
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]

	while (string[i] != 0) {
 8000238:	e04d      	b.n	80002d6 <HexToInt+0xb6>
		switch (string[i]) {
 800023a:	230f      	movs	r3, #15
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	18d3      	adds	r3, r2, r3
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3b30      	subs	r3, #48	; 0x30
 8000248:	2b36      	cmp	r3, #54	; 0x36
 800024a:	d834      	bhi.n	80002b6 <HexToInt+0x96>
 800024c:	009a      	lsls	r2, r3, #2
 800024e:	4b28      	ldr	r3, [pc, #160]	; (80002f0 <HexToInt+0xd0>)
 8000250:	18d3      	adds	r3, r2, r3
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	469f      	mov	pc, r3
		case '0':
			tmp = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
			break;
 800025a:	e031      	b.n	80002c0 <HexToInt+0xa0>
		case '1':
			tmp = 1;
 800025c:	2301      	movs	r3, #1
 800025e:	613b      	str	r3, [r7, #16]
			break;
 8000260:	e02e      	b.n	80002c0 <HexToInt+0xa0>
		case '2':
			tmp = 2;
 8000262:	2302      	movs	r3, #2
 8000264:	613b      	str	r3, [r7, #16]
			break;
 8000266:	e02b      	b.n	80002c0 <HexToInt+0xa0>
		case '3':
			tmp = 3;
 8000268:	2303      	movs	r3, #3
 800026a:	613b      	str	r3, [r7, #16]
			break;
 800026c:	e028      	b.n	80002c0 <HexToInt+0xa0>
		case '4':
			tmp = 4;
 800026e:	2304      	movs	r3, #4
 8000270:	613b      	str	r3, [r7, #16]
			break;
 8000272:	e025      	b.n	80002c0 <HexToInt+0xa0>
		case '5':
			tmp = 5;
 8000274:	2305      	movs	r3, #5
 8000276:	613b      	str	r3, [r7, #16]
			break;
 8000278:	e022      	b.n	80002c0 <HexToInt+0xa0>
		case '6':
			tmp = 6;
 800027a:	2306      	movs	r3, #6
 800027c:	613b      	str	r3, [r7, #16]
			break;
 800027e:	e01f      	b.n	80002c0 <HexToInt+0xa0>
		case '7':
			tmp = 7;
 8000280:	2307      	movs	r3, #7
 8000282:	613b      	str	r3, [r7, #16]
			break;
 8000284:	e01c      	b.n	80002c0 <HexToInt+0xa0>
		case '8':
			tmp = 8;
 8000286:	2308      	movs	r3, #8
 8000288:	613b      	str	r3, [r7, #16]
			break;
 800028a:	e019      	b.n	80002c0 <HexToInt+0xa0>
		case '9':
			tmp = 9;
 800028c:	2309      	movs	r3, #9
 800028e:	613b      	str	r3, [r7, #16]
			break;
 8000290:	e016      	b.n	80002c0 <HexToInt+0xa0>
		case 'A':
		case 'a':
			tmp = 10;
 8000292:	230a      	movs	r3, #10
 8000294:	613b      	str	r3, [r7, #16]
			break;
 8000296:	e013      	b.n	80002c0 <HexToInt+0xa0>
		case 'B':
		case 'b':
			tmp = 11;
 8000298:	230b      	movs	r3, #11
 800029a:	613b      	str	r3, [r7, #16]
			break;
 800029c:	e010      	b.n	80002c0 <HexToInt+0xa0>
		case 'C':
		case 'c':
			tmp = 12;
 800029e:	230c      	movs	r3, #12
 80002a0:	613b      	str	r3, [r7, #16]
			break;
 80002a2:	e00d      	b.n	80002c0 <HexToInt+0xa0>
		case 'D':
		case 'd':
			tmp = 13;
 80002a4:	230d      	movs	r3, #13
 80002a6:	613b      	str	r3, [r7, #16]
			break;
 80002a8:	e00a      	b.n	80002c0 <HexToInt+0xa0>
		case 'E':
		case 'e':
			tmp = 14;
 80002aa:	230e      	movs	r3, #14
 80002ac:	613b      	str	r3, [r7, #16]
			break;
 80002ae:	e007      	b.n	80002c0 <HexToInt+0xa0>
		case 'F':
		case 'f':
			tmp = 15;
 80002b0:	230f      	movs	r3, #15
 80002b2:	613b      	str	r3, [r7, #16]
			break;
 80002b4:	e004      	b.n	80002c0 <HexToInt+0xa0>
		default:
			Error_Handler();
 80002b6:	f000 faa1 	bl	80007fc <Error_Handler>
			return 0xFFFFFFFF;
 80002ba:	2301      	movs	r3, #1
 80002bc:	425b      	negs	r3, r3
 80002be:	e013      	b.n	80002e8 <HexToInt+0xc8>
		}
		value = (value << 4) | tmp;
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	011b      	lsls	r3, r3, #4
 80002c4:	693a      	ldr	r2, [r7, #16]
 80002c6:	4313      	orrs	r3, r2
 80002c8:	617b      	str	r3, [r7, #20]
		i++;
 80002ca:	210f      	movs	r1, #15
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	781a      	ldrb	r2, [r3, #0]
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	3201      	adds	r2, #1
 80002d4:	701a      	strb	r2, [r3, #0]
	while (string[i] != 0) {
 80002d6:	230f      	movs	r3, #15
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1a9      	bne.n	800023a <HexToInt+0x1a>
	}
	return value;
 80002e6:	697b      	ldr	r3, [r7, #20]
}
 80002e8:	0018      	movs	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b006      	add	sp, #24
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	08008a10 	.word	0x08008a10

080002f4 <reportError>:

void reportError(uint8_t errorCode) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	0002      	movs	r2, r0
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	701a      	strb	r2, [r3, #0]
	uint8_t errorBuf[2] = { 'E', errorCode };
 8000300:	210c      	movs	r1, #12
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2245      	movs	r2, #69	; 0x45
 8000306:	701a      	strb	r2, [r3, #0]
 8000308:	187b      	adds	r3, r7, r1
 800030a:	1dfa      	adds	r2, r7, #7
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(errorBuf, 2);
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2102      	movs	r1, #2
 8000314:	0018      	movs	r0, r3
 8000316:	f007 fe49 	bl	8007fac <CDC_Transmit_FS>
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b004      	add	sp, #16
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &messages[ptr].header,
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	001a      	movs	r2, r3
 8000332:	0013      	movs	r3, r2
 8000334:	00db      	lsls	r3, r3, #3
 8000336:	189b      	adds	r3, r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4a17      	ldr	r2, [pc, #92]	; (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800033c:	1899      	adds	r1, r3, r2
			messages[ptr].buf) != HAL_OK)
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	0013      	movs	r3, r2
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	189b      	adds	r3, r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	3318      	adds	r3, #24
 800034e:	001a      	movs	r2, r3
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000352:	18d3      	adds	r3, r2, r3
 8000354:	3304      	adds	r3, #4
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &messages[ptr].header,
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	000a      	movs	r2, r1
 800035a:	2100      	movs	r1, #0
 800035c:	f000 fe13 	bl	8000f86 <HAL_CAN_GetRxMessage>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		Error_Handler();
 8000364:	f000 fa4a 	bl	80007fc <Error_Handler>

	ptr++;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	b2da      	uxtb	r2, r3
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000372:	701a      	strb	r2, [r3, #0]
	if (ptr > 15)
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b0f      	cmp	r3, #15
 800037a:	d902      	bls.n	8000382 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		ptr = 0;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	lastRx = HAL_GetTick();
 8000382:	f000 fb75 	bl	8000a70 <HAL_GetTick>
 8000386:	0002      	movs	r2, r0
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b002      	add	sp, #8
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000019a 	.word	0x2000019a
 8000398:	20000514 	.word	0x20000514
 800039c:	2000019c 	.word	0x2000019c

080003a0 <CDC_ReceiveCallback>:

void CDC_ReceiveCallback(uint8_t *Buf, uint32_t len) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	if (*Buf == '<')
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b3c      	cmp	r3, #60	; 0x3c
 80003b0:	d103      	bne.n	80003ba <CDC_ReceiveCallback+0x1a>
		usbPtr = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <CDC_ReceiveCallback+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
	} else {
		memcpy(usbBuf + usbPtr, Buf, len);
		usbPtr += len;
	}

}
 80003b8:	e01f      	b.n	80003fa <CDC_ReceiveCallback+0x5a>
	else if (*Buf == '>') {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b3e      	cmp	r3, #62	; 0x3e
 80003c0:	d109      	bne.n	80003d6 <CDC_ReceiveCallback+0x36>
		usbBuf[usbPtr] = 0;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <CDC_ReceiveCallback+0x64>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	001a      	movs	r2, r3
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <CDC_ReceiveCallback+0x68>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	5499      	strb	r1, [r3, r2]
		gotMessage = 1;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <CDC_ReceiveCallback+0x6c>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	701a      	strb	r2, [r3, #0]
}
 80003d4:	e011      	b.n	80003fa <CDC_ReceiveCallback+0x5a>
		memcpy(usbBuf + usbPtr, Buf, len);
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <CDC_ReceiveCallback+0x64>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	001a      	movs	r2, r3
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <CDC_ReceiveCallback+0x68>)
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	0018      	movs	r0, r3
 80003e6:	f008 fac1 	bl	800896c <memcpy>
		usbPtr += len;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <CDC_ReceiveCallback+0x64>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	18d3      	adds	r3, r2, r3
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b03      	ldr	r3, [pc, #12]	; (8000404 <CDC_ReceiveCallback+0x64>)
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000198 	.word	0x20000198
 8000408:	200003c4 	.word	0x200003c4
 800040c:	20000199 	.word	0x20000199

08000410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000414:	f000 fad2 	bl	80009bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000418:	f000 f90e 	bl	8000638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800041c:	f000 f998 	bl	8000750 <MX_GPIO_Init>
	MX_CAN_Init();
 8000420:	f000 f95e 	bl	80006e0 <MX_CAN_Init>
	MX_USB_DEVICE_Init();
 8000424:	f007 fd36 	bl	8007e94 <MX_USB_DEVICE_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	filter.FilterBank = 0;
 8000428:	4b79      	ldr	r3, [pc, #484]	; (8000610 <main+0x200>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800042e:	4b78      	ldr	r3, [pc, #480]	; (8000610 <main+0x200>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000434:	4b76      	ldr	r3, [pc, #472]	; (8000610 <main+0x200>)
 8000436:	2201      	movs	r2, #1
 8000438:	61da      	str	r2, [r3, #28]
	filter.FilterMaskIdHigh = 0x0000;
 800043a:	4b75      	ldr	r3, [pc, #468]	; (8000610 <main+0x200>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow = 0x0000;
 8000440:	4b73      	ldr	r3, [pc, #460]	; (8000610 <main+0x200>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000446:	4b72      	ldr	r3, [pc, #456]	; (8000610 <main+0x200>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
	filter.FilterActivation = ENABLE;
 800044c:	4b70      	ldr	r3, [pc, #448]	; (8000610 <main+0x200>)
 800044e:	2201      	movs	r2, #1
 8000450:	621a      	str	r2, [r3, #32]
	filter.SlaveStartFilterBank = 14;
 8000452:	4b6f      	ldr	r3, [pc, #444]	; (8000610 <main+0x200>)
 8000454:	220e      	movs	r2, #14
 8000456:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000458:	4a6d      	ldr	r2, [pc, #436]	; (8000610 <main+0x200>)
 800045a:	4b6e      	ldr	r3, [pc, #440]	; (8000614 <main+0x204>)
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fc0e 	bl	8000c80 <HAL_CAN_ConfigFilter>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <main+0x5c>
		Error_Handler();
 8000468:	f000 f9c8 	bl	80007fc <Error_Handler>

	if (HAL_CAN_Start(&hcan) != HAL_OK)
 800046c:	4b69      	ldr	r3, [pc, #420]	; (8000614 <main+0x204>)
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fcf8 	bl	8000e64 <HAL_CAN_Start>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <main+0x6c>
		Error_Handler();
 8000478:	f000 f9c0 	bl	80007fc <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800047c:	4b65      	ldr	r3, [pc, #404]	; (8000614 <main+0x204>)
 800047e:	2102      	movs	r1, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fe9c 	bl	80011be <HAL_CAN_ActivateNotification>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <main+0x7e>
			!= HAL_OK)
		Error_Handler();
 800048a:	f000 f9b7 	bl	80007fc <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK)
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	021a      	lsls	r2, r3, #8
 8000492:	4b60      	ldr	r3, [pc, #384]	; (8000614 <main+0x204>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fe91 	bl	80011be <HAL_CAN_ActivateNotification>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <main+0x94>
		Error_Handler();
 80004a0:	f000 f9ac 	bl	80007fc <Error_Handler>

	while (1) {
		if (ptr > 0) {
 80004a4:	4b5c      	ldr	r3, [pc, #368]	; (8000618 <main+0x208>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d020      	beq.n	80004ee <main+0xde>
			CDC_Transmit_FS(messages[ptr - 1].buf,
 80004ac:	4b5a      	ldr	r3, [pc, #360]	; (8000618 <main+0x208>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	0013      	movs	r3, r2
 80004b4:	00db      	lsls	r3, r3, #3
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	3318      	adds	r3, #24
 80004bc:	001a      	movs	r2, r3
 80004be:	4b57      	ldr	r3, [pc, #348]	; (800061c <main+0x20c>)
 80004c0:	18d3      	adds	r3, r2, r3
 80004c2:	1d18      	adds	r0, r3, #4
					messages[ptr - 1].header.DLC);
 80004c4:	4b54      	ldr	r3, [pc, #336]	; (8000618 <main+0x208>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	1e5a      	subs	r2, r3, #1
 80004ca:	4954      	ldr	r1, [pc, #336]	; (800061c <main+0x20c>)
 80004cc:	0013      	movs	r3, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	189b      	adds	r3, r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	18cb      	adds	r3, r1, r3
 80004d6:	3310      	adds	r3, #16
 80004d8:	681b      	ldr	r3, [r3, #0]
			CDC_Transmit_FS(messages[ptr - 1].buf,
 80004da:	b29b      	uxth	r3, r3
 80004dc:	0019      	movs	r1, r3
 80004de:	f007 fd65 	bl	8007fac <CDC_Transmit_FS>
			ptr--;
 80004e2:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <main+0x208>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b4b      	ldr	r3, [pc, #300]	; (8000618 <main+0x208>)
 80004ec:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - lastRx < 20)
 80004ee:	f000 fabf 	bl	8000a70 <HAL_GetTick>
 80004f2:	0002      	movs	r2, r0
 80004f4:	4b4a      	ldr	r3, [pc, #296]	; (8000620 <main+0x210>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	2b13      	cmp	r3, #19
 80004fc:	d806      	bhi.n	800050c <main+0xfc>
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, 0);
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <main+0x214>)
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	0018      	movs	r0, r3
 8000506:	f001 faef 	bl	8001ae8 <HAL_GPIO_WritePin>
 800050a:	e005      	b.n	8000518 <main+0x108>
		else
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, 1);
 800050c:	4b45      	ldr	r3, [pc, #276]	; (8000624 <main+0x214>)
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fae8 	bl	8001ae8 <HAL_GPIO_WritePin>

		if (gotMessage) {
 8000518:	4b43      	ldr	r3, [pc, #268]	; (8000628 <main+0x218>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d100      	bne.n	8000522 <main+0x112>
 8000520:	e070      	b.n	8000604 <main+0x1f4>
			gotMessage = 0;
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <main+0x218>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]

			switch (usbBuf[0]) {
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <main+0x21c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b31      	subs	r3, #49	; 0x31
 800052e:	2b07      	cmp	r3, #7
 8000530:	d8b8      	bhi.n	80004a4 <main+0x94>
 8000532:	009a      	lsls	r2, r3, #2
 8000534:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <main+0x220>)
 8000536:	18d3      	adds	r3, r2, r3
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	469f      	mov	pc, r3
			case '1':
				if (HAL_CAN_Start(&hcan) != HAL_OK)
 800053c:	4b35      	ldr	r3, [pc, #212]	; (8000614 <main+0x204>)
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fc90 	bl	8000e64 <HAL_CAN_Start>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <main+0x13c>
					Error_Handler();
 8000548:	f000 f958 	bl	80007fc <Error_Handler>
				if (HAL_CAN_ActivateNotification(&hcan,
 800054c:	4b31      	ldr	r3, [pc, #196]	; (8000614 <main+0x204>)
 800054e:	2102      	movs	r1, #2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fe34 	bl	80011be <HAL_CAN_ActivateNotification>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <main+0x14e>
				CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
					Error_Handler();
 800055a:	f000 f94f 	bl	80007fc <Error_Handler>
				if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK)
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	021a      	lsls	r2, r3, #8
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <main+0x204>)
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fe29 	bl	80011be <HAL_CAN_ActivateNotification>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d04b      	beq.n	8000608 <main+0x1f8>
					Error_Handler();
 8000570:	f000 f944 	bl	80007fc <Error_Handler>
				break;
 8000574:	e048      	b.n	8000608 <main+0x1f8>
			case '2':
				if (HAL_CAN_Stop(&hcan) != HAL_OK)
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <main+0x204>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fcb9 	bl	8000ef0 <HAL_CAN_Stop>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <main+0x176>
					Error_Handler();
 8000582:	f000 f93b 	bl	80007fc <Error_Handler>
			case '3':
				if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <main+0x200>)
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <main+0x204>)
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fb77 	bl	8000c80 <HAL_CAN_ConfigFilter>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d03a      	beq.n	800060c <main+0x1fc>
					Error_Handler();
 8000596:	f000 f931 	bl	80007fc <Error_Handler>
				break;
 800059a:	e037      	b.n	800060c <main+0x1fc>
			case '4':
				if (usbBuf[1] == 0)
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <main+0x21c>)
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <main+0x19c>
					filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <main+0x200>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
				else if (usbBuf[1] == 1)
					filter.FilterMode = CAN_FILTERMODE_IDLIST;
				else
					reportError(BAD_FORMAT);
				break;
 80005aa:	e030      	b.n	800060e <main+0x1fe>
				else if (usbBuf[1] == 1)
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x21c>)
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d103      	bne.n	80005bc <main+0x1ac>
					filter.FilterMode = CAN_FILTERMODE_IDLIST;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <main+0x200>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	619a      	str	r2, [r3, #24]
				break;
 80005ba:	e028      	b.n	800060e <main+0x1fe>
					reportError(BAD_FORMAT);
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff fe99 	bl	80002f4 <reportError>
				break;
 80005c2:	e024      	b.n	800060e <main+0x1fe>
			case '5':
				filter.FilterMaskIdLow = HexToInt(usbBuf + 1);
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <main+0x224>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff fe2a 	bl	8000220 <HexToInt>
 80005cc:	0002      	movs	r2, r0
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x200>)
 80005d0:	60da      	str	r2, [r3, #12]
				break;
 80005d2:	e01c      	b.n	800060e <main+0x1fe>
			case '6':
				filter.FilterMaskIdHigh = HexToInt(usbBuf + 1);
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <main+0x224>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff fe22 	bl	8000220 <HexToInt>
 80005dc:	0002      	movs	r2, r0
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <main+0x200>)
 80005e0:	609a      	str	r2, [r3, #8]
				break;
 80005e2:	e014      	b.n	800060e <main+0x1fe>
			case '7':
				filter.FilterIdLow = HexToInt(usbBuf + 1);
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <main+0x224>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe1a 	bl	8000220 <HexToInt>
 80005ec:	0002      	movs	r2, r0
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <main+0x200>)
 80005f0:	605a      	str	r2, [r3, #4]
				break;
 80005f2:	e00c      	b.n	800060e <main+0x1fe>
			case '8':
				filter.FilterIdHigh = HexToInt(usbBuf + 1);
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <main+0x224>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fe12 	bl	8000220 <HexToInt>
 80005fc:	0002      	movs	r2, r0
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <main+0x200>)
 8000600:	601a      	str	r2, [r3, #0]
				break;
 8000602:	e004      	b.n	800060e <main+0x1fe>

			}

		}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	e74d      	b.n	80004a4 <main+0x94>
				break;
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	e74b      	b.n	80004a4 <main+0x94>
				break;
 800060c:	46c0      	nop			; (mov r8, r8)
		if (ptr > 0) {
 800060e:	e749      	b.n	80004a4 <main+0x94>
 8000610:	200004ec 	.word	0x200004ec
 8000614:	200004c4 	.word	0x200004c4
 8000618:	2000019a 	.word	0x2000019a
 800061c:	20000514 	.word	0x20000514
 8000620:	2000019c 	.word	0x2000019c
 8000624:	48000400 	.word	0x48000400
 8000628:	20000199 	.word	0x20000199
 800062c:	200003c4 	.word	0x200003c4
 8000630:	08008aec 	.word	0x08008aec
 8000634:	200003c5 	.word	0x200003c5

08000638 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b099      	sub	sp, #100	; 0x64
 800063c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800063e:	242c      	movs	r4, #44	; 0x2c
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2334      	movs	r3, #52	; 0x34
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f008 f998 	bl	800897e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800064e:	231c      	movs	r3, #28
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f008 f990 	bl	800897e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800065e:	003b      	movs	r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f008 f989 	bl	800897e <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2220      	movs	r2, #32
 8000670:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2201      	movs	r2, #1
 8000676:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	f003 f8c1 	bl	8003808 <HAL_RCC_OscConfig>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x56>
		Error_Handler();
 800068a:	f000 f8b7 	bl	80007fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800068e:	211c      	movs	r1, #28
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2207      	movs	r2, #7
 8000694:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2203      	movs	r2, #3
 800069a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2101      	movs	r1, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f003 fc31 	bl	8003f14 <HAL_RCC_ClockConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x82>
		Error_Handler();
 80006b6:	f000 f8a1 	bl	80007fc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0292      	lsls	r2, r2, #10
 80006c0:	601a      	str	r2, [r3, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006c8:	003b      	movs	r3, r7
 80006ca:	0018      	movs	r0, r3
 80006cc:	f003 fd7e 	bl	80041cc <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa0>
		Error_Handler();
 80006d4:	f000 f892 	bl	80007fc <Error_Handler>
	}
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b019      	add	sp, #100	; 0x64
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_CAN_Init+0x68>)
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <MX_CAN_Init+0x6c>)
 80006e8:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_CAN_Init+0x68>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_CAN_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_CAN_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_CAN_Init+0x68>)
 80006fe:	22c0      	movs	r2, #192	; 0xc0
 8000700:	0312      	lsls	r2, r2, #12
 8000702:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_CAN_Init+0x68>)
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0352      	lsls	r2, r2, #13
 800070a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_CAN_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_CAN_Init+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_CAN_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_CAN_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_CAN_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_CAN_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_CAN_Init+0x68>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f9a6 	bl	8000a84 <HAL_CAN_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_CAN_Init+0x60>
		Error_Handler();
 800073c:	f000 f85e 	bl	80007fc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200004c4 	.word	0x200004c4
 800074c:	40006400 	.word	0x40006400

08000750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000756:	240c      	movs	r4, #12
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	2314      	movs	r3, #20
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f008 f90c 	bl	800897e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xa4>)
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xa4>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	03c9      	lsls	r1, r1, #15
 8000770:	430a      	orrs	r2, r1
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xa4>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	03db      	lsls	r3, r3, #15
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xa4>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xa4>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	02c9      	lsls	r1, r1, #11
 800078c:	430a      	orrs	r2, r1
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xa4>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	02db      	lsls	r3, r3, #11
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0xa4>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_GPIO_Init+0xa4>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_GPIO_Init+0xa4>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TX_LED_Pin | RX_LED_Pin, GPIO_PIN_RESET);
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	2103      	movs	r1, #3
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 f991 	bl	8001ae8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : TX_LED_Pin RX_LED_Pin */
	GPIO_InitStruct.Pin = TX_LED_Pin | RX_LED_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2203      	movs	r2, #3
 80007cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <MX_GPIO_Init+0xa8>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f001 f806 	bl	80017f8 <HAL_GPIO_Init>

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b009      	add	sp, #36	; 0x24
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400

080007fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0549      	lsls	r1, r1, #21
 8000830:	430a      	orrs	r2, r1
 8000832:	61da      	str	r2, [r3, #28]
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_MspInit+0x44>)
 8000836:	69da      	ldr	r2, [r3, #28]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	055b      	lsls	r3, r3, #21
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b08b      	sub	sp, #44	; 0x2c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	2414      	movs	r4, #20
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	2314      	movs	r3, #20
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f008 f88b 	bl	800897e <memset>
  if(hcan->Instance==CAN)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <HAL_CAN_MspInit+0xa0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d13a      	bne.n	80008e8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 8000874:	69da      	ldr	r2, [r3, #28]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0489      	lsls	r1, r1, #18
 800087c:	430a      	orrs	r2, r1
 800087e:	61da      	str	r2, [r3, #28]
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	049b      	lsls	r3, r3, #18
 8000888:	4013      	ands	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	02c9      	lsls	r1, r1, #11
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_CAN_MspInit+0xa4>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	02db      	lsls	r3, r3, #11
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	22c0      	movs	r2, #192	; 0xc0
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	0021      	movs	r1, r4
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2202      	movs	r2, #2
 80008b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2203      	movs	r2, #3
 80008c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2204      	movs	r2, #4
 80008ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_CAN_MspInit+0xa8>)
 80008d0:	0019      	movs	r1, r3
 80008d2:	0010      	movs	r0, r2
 80008d4:	f000 ff90 	bl	80017f8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	201e      	movs	r0, #30
 80008de:	f000 ff59 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80008e2:	201e      	movs	r0, #30
 80008e4:	f000 ff6b 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b00b      	add	sp, #44	; 0x2c
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	40006400 	.word	0x40006400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000400 	.word	0x48000400

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f894 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <CEC_CAN_IRQHandler+0x14>)
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fc6d 	bl	8001212 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200004c4 	.word	0x200004c4

08000944 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <USB_IRQHandler+0x14>)
 800094a:	0018      	movs	r0, r3
 800094c:	f001 fa20 	bl	8001d90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200013ec 	.word	0x200013ec

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0b      	ldr	r4, [pc, #44]	; (80009b4 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000992:	f7ff ffe3 	bl	800095c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000996:	f007 ffc5 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fd39 	bl	8000410 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   r0, =_estack
 80009a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80009ac:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 80009b0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009b4:	200016e0 	.word	0x200016e0

080009b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_COMP_IRQHandler>
	...

080009bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <HAL_Init+0x24>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_Init+0x24>)
 80009c6:	2110      	movs	r1, #16
 80009c8:	430a      	orrs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f809 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d2:	f7ff ff19 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x5c>)
 80009ee:	681c      	ldr	r4, [r3, #0]
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x60>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	0019      	movs	r1, r3
 80009f6:	23fa      	movs	r3, #250	; 0xfa
 80009f8:	0098      	lsls	r0, r3, #2
 80009fa:	f7ff fb85 	bl	8000108 <__udivsi3>
 80009fe:	0003      	movs	r3, r0
 8000a00:	0019      	movs	r1, r3
 8000a02:	0020      	movs	r0, r4
 8000a04:	f7ff fb80 	bl	8000108 <__udivsi3>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fee7 	bl	80017de <HAL_SYSTICK_Config>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00f      	b.n	8000a38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d80b      	bhi.n	8000a36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 feb4 	bl	8001794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_InitTick+0x64>)
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b003      	add	sp, #12
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	001a      	movs	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x20>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	18d2      	adds	r2, r2, r3
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_IncTick+0x20>)
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000754 	.word	0x20000754

08000a70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_GetTick+0x10>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000754 	.word	0x20000754

08000a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e0f0      	b.n	8000c78 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2220      	movs	r2, #32
 8000a9a:	5c9b      	ldrb	r3, [r3, r2]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fed3 	bl	8000850 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aba:	f7ff ffd9 	bl	8000a70 <HAL_GetTick>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac2:	e013      	b.n	8000aec <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac4:	f7ff ffd4 	bl	8000a70 <HAL_GetTick>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	d90c      	bls.n	8000aec <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	0292      	lsls	r2, r2, #10
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0c5      	b.n	8000c78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	d0e5      	beq.n	8000ac4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2102      	movs	r1, #2
 8000b04:	438a      	bics	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b08:	f7ff ffb2 	bl	8000a70 <HAL_GetTick>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b10:	e013      	b.n	8000b3a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b12:	f7ff ffad 	bl	8000a70 <HAL_GetTick>
 8000b16:	0002      	movs	r2, r0
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	2b0a      	cmp	r3, #10
 8000b1e:	d90c      	bls.n	8000b3a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	0292      	lsls	r2, r2, #10
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2220      	movs	r2, #32
 8000b32:	2105      	movs	r1, #5
 8000b34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e09e      	b.n	8000c78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2202      	movs	r2, #2
 8000b42:	4013      	ands	r3, r2
 8000b44:	d1e5      	bne.n	8000b12 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7e1b      	ldrb	r3, [r3, #24]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d108      	bne.n	8000b60 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e5b      	ldrb	r3, [r3, #25]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e007      	b.n	8000b9a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	438a      	bics	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7e9b      	ldrb	r3, [r3, #26]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d108      	bne.n	8000bb4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2120      	movs	r1, #32
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	438a      	bics	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7edb      	ldrb	r3, [r3, #27]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	438a      	bics	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2110      	movs	r1, #16
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7f1b      	ldrb	r3, [r3, #28]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2108      	movs	r1, #8
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2108      	movs	r1, #8
 8000c14:	438a      	bics	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f5b      	ldrb	r3, [r3, #29]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	438a      	bics	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	0011      	movs	r1, r2
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	1e5a      	subs	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2220      	movs	r2, #32
 8000c72:	2101      	movs	r1, #1
 8000c74:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b004      	add	sp, #16
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c90:	2013      	movs	r0, #19
 8000c92:	183b      	adds	r3, r7, r0
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	2120      	movs	r1, #32
 8000c98:	5c52      	ldrb	r2, [r2, r1]
 8000c9a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	18bb      	adds	r3, r7, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d004      	beq.n	8000cb0 <HAL_CAN_ConfigFilter+0x30>
 8000ca6:	18bb      	adds	r3, r7, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d000      	beq.n	8000cb0 <HAL_CAN_ConfigFilter+0x30>
 8000cae:	e0cd      	b.n	8000e4c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	58d3      	ldr	r3, [r2, r3]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	221f      	movs	r2, #31
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	2387      	movs	r3, #135	; 0x87
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	58d3      	ldr	r3, [r2, r3]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	2387      	movs	r3, #135	; 0x87
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d129      	bne.n	8000d4a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	2383      	movs	r3, #131	; 0x83
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58d3      	ldr	r3, [r2, r3]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	2383      	movs	r3, #131	; 0x83
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d20:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3248      	adds	r2, #72	; 0x48
 8000d26:	00d2      	lsls	r2, r2, #3
 8000d28:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	041b      	lsls	r3, r3, #16
 8000d36:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d3e:	6979      	ldr	r1, [r7, #20]
 8000d40:	3348      	adds	r3, #72	; 0x48
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	18cb      	adds	r3, r1, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d128      	bne.n	8000da4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	2383      	movs	r3, #131	; 0x83
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	58d2      	ldr	r2, [r2, r3]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	0011      	movs	r1, r2
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	2383      	movs	r3, #131	; 0x83
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d7a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3248      	adds	r2, #72	; 0x48
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d98:	6979      	ldr	r1, [r7, #20]
 8000d9a:	3348      	adds	r3, #72	; 0x48
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	18cb      	adds	r3, r1, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10c      	bne.n	8000dc6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	2381      	movs	r3, #129	; 0x81
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	58d3      	ldr	r3, [r2, r3]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	43d2      	mvns	r2, r2
 8000db8:	401a      	ands	r2, r3
 8000dba:	0011      	movs	r1, r2
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	2381      	movs	r3, #129	; 0x81
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	50d1      	str	r1, [r2, r3]
 8000dc4:	e00a      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	2381      	movs	r3, #129	; 0x81
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d2      	ldr	r2, [r2, r3]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2381      	movs	r3, #129	; 0x81
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10c      	bne.n	8000dfe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	2385      	movs	r3, #133	; 0x85
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	58d3      	ldr	r3, [r2, r3]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	43d2      	mvns	r2, r2
 8000df0:	401a      	ands	r2, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2385      	movs	r3, #133	; 0x85
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	50d1      	str	r1, [r2, r3]
 8000dfc:	e00a      	b.n	8000e14 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	2385      	movs	r3, #133	; 0x85
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	58d2      	ldr	r2, [r2, r3]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	2385      	movs	r3, #133	; 0x85
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10a      	bne.n	8000e32 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	2387      	movs	r3, #135	; 0x87
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	58d2      	ldr	r2, [r2, r3]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	0011      	movs	r1, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	2387      	movs	r3, #135	; 0x87
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	58d3      	ldr	r3, [r2, r3]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	0019      	movs	r1, r3
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	02d2      	lsls	r2, r2, #11
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
  }
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b006      	add	sp, #24
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d12f      	bne.n	8000ed8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e90:	f7ff fdee 	bl	8000a70 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e98:	e013      	b.n	8000ec2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e9a:	f7ff fde9 	bl	8000a70 <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b0a      	cmp	r3, #10
 8000ea6:	d90c      	bls.n	8000ec2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0292      	lsls	r2, r2, #10
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2105      	movs	r1, #5
 8000ebc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e012      	b.n	8000ee8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d1e5      	bne.n	8000e9a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	0312      	lsls	r2, r2, #12
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
  }
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d134      	bne.n	8000f6e <HAL_CAN_Stop+0x7e>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fdac 	bl	8000a70 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1c:	e013      	b.n	8000f46 <HAL_CAN_Stop+0x56>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f1e:	f7ff fda7 	bl	8000a70 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b0a      	cmp	r3, #10
 8000f2a:	d90c      	bls.n	8000f46 <HAL_CAN_Stop+0x56>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0292      	lsls	r2, r2, #10
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	2105      	movs	r1, #5
 8000f40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e01b      	b.n	8000f7e <HAL_CAN_Stop+0x8e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d0e5      	beq.n	8000f1e <HAL_CAN_Stop+0x2e>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	438a      	bics	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	2101      	movs	r1, #1
 8000f68:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Stop+0x8e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0352      	lsls	r2, r2, #13
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
  }
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f94:	2017      	movs	r0, #23
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	5c52      	ldrb	r2, [r2, r1]
 8000f9e:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	18bb      	adds	r3, r7, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d004      	beq.n	8000fb4 <HAL_CAN_GetRxMessage+0x2e>
 8000faa:	18bb      	adds	r3, r7, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d000      	beq.n	8000fb4 <HAL_CAN_GetRxMessage+0x2e>
 8000fb2:	e0f8      	b.n	80011a6 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d117      	bne.n	8000ff6 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	0392      	lsls	r2, r2, #14
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0ee      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d108      	bne.n	8000ff6 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	0392      	lsls	r2, r2, #14
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0df      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	321b      	adds	r2, #27
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	58d3      	ldr	r3, [r2, r3]
 8001002:	2204      	movs	r2, #4
 8001004:	401a      	ands	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10b      	bne.n	800102a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	321b      	adds	r2, #27
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	58d3      	ldr	r3, [r2, r3]
 800101e:	0d5b      	lsrs	r3, r3, #21
 8001020:	055b      	lsls	r3, r3, #21
 8001022:	0d5a      	lsrs	r2, r3, #21
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e00a      	b.n	8001040 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	321b      	adds	r2, #27
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	321b      	adds	r2, #27
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	58d3      	ldr	r3, [r2, r3]
 800104c:	2202      	movs	r2, #2
 800104e:	401a      	ands	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	331b      	adds	r3, #27
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	3304      	adds	r3, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	220f      	movs	r2, #15
 8001066:	401a      	ands	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	331b      	adds	r3, #27
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	18d3      	adds	r3, r2, r3
 8001078:	3304      	adds	r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	401a      	ands	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	331b      	adds	r3, #27
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	3304      	adds	r3, #4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	0c1a      	lsrs	r2, r3, #16
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	23dc      	movs	r3, #220	; 0xdc
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	188a      	adds	r2, r1, r2
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	23dc      	movs	r3, #220	; 0xdc
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	188a      	adds	r2, r1, r2
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0a1a      	lsrs	r2, r3, #8
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	23dc      	movs	r3, #220	; 0xdc
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	188a      	adds	r2, r1, r2
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0c1a      	lsrs	r2, r3, #16
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3302      	adds	r3, #2
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	23dc      	movs	r3, #220	; 0xdc
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	188a      	adds	r2, r1, r2
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0e1a      	lsrs	r2, r3, #24
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3303      	adds	r3, #3
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	23de      	movs	r3, #222	; 0xde
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	188a      	adds	r2, r1, r2
 800111a:	18d3      	adds	r3, r2, r3
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	23de      	movs	r3, #222	; 0xde
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	188a      	adds	r2, r1, r2
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0a1a      	lsrs	r2, r3, #8
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3305      	adds	r3, #5
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	23de      	movs	r3, #222	; 0xde
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	188a      	adds	r2, r1, r2
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0c1a      	lsrs	r2, r3, #16
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3306      	adds	r3, #6
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	23de      	movs	r3, #222	; 0xde
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	188a      	adds	r2, r1, r2
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0e1a      	lsrs	r2, r3, #24
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3307      	adds	r3, #7
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d108      	bne.n	8001192 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2120      	movs	r1, #32
 800118c:	430a      	orrs	r2, r1
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	e007      	b.n	80011a2 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2120      	movs	r1, #32
 800119e:	430a      	orrs	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	02d2      	lsls	r2, r2, #11
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
  }
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011c8:	200f      	movs	r0, #15
 80011ca:	183b      	adds	r3, r7, r0
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	2120      	movs	r1, #32
 80011d0:	5c52      	ldrb	r2, [r2, r1]
 80011d2:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d4:	0002      	movs	r2, r0
 80011d6:	18bb      	adds	r3, r7, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d003      	beq.n	80011e6 <HAL_CAN_ActivateNotification+0x28>
 80011de:	18bb      	adds	r3, r7, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d109      	bne.n	80011fa <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6959      	ldr	r1, [r3, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e007      	b.n	800120a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	02d2      	lsls	r2, r2, #11
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
  }
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b08a      	sub	sp, #40	; 0x28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	d100      	bne.n	8001258 <HAL_CAN_IRQHandler+0x46>
 8001256:	e084      	b.n	8001362 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	d024      	beq.n	80012aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2201      	movs	r2, #1
 8001266:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d004      	beq.n	800127a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f981 	bl	800157a <HAL_CAN_TxMailbox0CompleteCallback>
 8001278:	e017      	b.n	80012aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2204      	movs	r2, #4
 800127e:	4013      	ands	r3, r2
 8001280:	d005      	beq.n	800128e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	4313      	orrs	r3, r2
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	e00d      	b.n	80012aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2208      	movs	r2, #8
 8001292:	4013      	ands	r3, r2
 8001294:	d005      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	0152      	lsls	r2, r2, #5
 800129c:	4313      	orrs	r3, r2
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	e003      	b.n	80012aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 f980 	bl	80015aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	d028      	beq.n	8001306 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d004      	beq.n	80012d2 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f95d 	bl	800158a <HAL_CAN_TxMailbox1CompleteCallback>
 80012d0:	e019      	b.n	8001306 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	d005      	beq.n	80012e8 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0192      	lsls	r2, r2, #6
 80012e2:	4313      	orrs	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e00e      	b.n	8001306 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4013      	ands	r3, r2
 80012f0:	d005      	beq.n	80012fe <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	01d2      	lsls	r2, r2, #7
 80012f8:	4313      	orrs	r3, r2
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	e003      	b.n	8001306 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 f95a 	bl	80015ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	4013      	ands	r3, r2
 800130e:	d028      	beq.n	8001362 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	0252      	lsls	r2, r2, #9
 8001318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d004      	beq.n	800132e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f937 	bl	800159a <HAL_CAN_TxMailbox2CompleteCallback>
 800132c:	e019      	b.n	8001362 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	02db      	lsls	r3, r3, #11
 8001334:	4013      	ands	r3, r2
 8001336:	d005      	beq.n	8001344 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0212      	lsls	r2, r2, #8
 800133e:	4313      	orrs	r3, r2
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	e00e      	b.n	8001362 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	4013      	ands	r3, r2
 800134c:	d005      	beq.n	800135a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0252      	lsls	r2, r2, #9
 8001354:	4313      	orrs	r3, r2
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	e003      	b.n	8001362 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	0018      	movs	r0, r3
 800135e:	f000 f934 	bl	80015ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	2208      	movs	r2, #8
 8001366:	4013      	ands	r3, r2
 8001368:	d00c      	beq.n	8001384 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2210      	movs	r2, #16
 800136e:	4013      	ands	r3, r2
 8001370:	d008      	beq.n	8001384 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4313      	orrs	r3, r2
 800137a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2210      	movs	r2, #16
 8001382:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2204      	movs	r2, #4
 8001388:	4013      	ands	r3, r2
 800138a:	d00b      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2208      	movs	r2, #8
 8001390:	4013      	ands	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2208      	movs	r2, #8
 800139a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f91b 	bl	80015da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d009      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2203      	movs	r2, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	d003      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7fe ffb2 	bl	8000324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	4013      	ands	r3, r2
 80013c6:	d00c      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2210      	movs	r2, #16
 80013cc:	4013      	ands	r3, r2
 80013ce:	d008      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2210      	movs	r2, #16
 80013e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	2220      	movs	r2, #32
 80013e6:	4013      	ands	r3, r2
 80013e8:	d00b      	beq.n	8001402 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2208      	movs	r2, #8
 80013ee:	4013      	ands	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2208      	movs	r2, #8
 80013f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f000 f8fc 	bl	80015fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2210      	movs	r2, #16
 8001406:	4013      	ands	r3, r2
 8001408:	d009      	beq.n	800141e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 f8e6 	bl	80015ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800141e:	6a3a      	ldr	r2, [r7, #32]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d00b      	beq.n	8001440 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2210      	movs	r2, #16
 800142c:	4013      	ands	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2210      	movs	r2, #16
 8001436:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f8e5 	bl	800160a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001440:	6a3a      	ldr	r2, [r7, #32]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	025b      	lsls	r3, r3, #9
 8001446:	4013      	ands	r3, r2
 8001448:	d00b      	beq.n	8001462 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2208      	movs	r2, #8
 800144e:	4013      	ands	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2208      	movs	r2, #8
 8001458:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f8dc 	bl	800161a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_CAN_IRQHandler+0x25c>
 800146c:	e074      	b.n	8001558 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d100      	bne.n	8001478 <HAL_CAN_IRQHandler+0x266>
 8001476:	e06b      	b.n	8001550 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001478:	6a3a      	ldr	r2, [r7, #32]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4013      	ands	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001488:	d003      	beq.n	8001492 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	2201      	movs	r2, #1
 800148e:	4313      	orrs	r3, r2
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a2:	d003      	beq.n	80014ac <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	2202      	movs	r2, #2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014ac:	6a3a      	ldr	r2, [r7, #32]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4013      	ands	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2204      	movs	r2, #4
 80014ba:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	2204      	movs	r2, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014c6:	6a3a      	ldr	r2, [r7, #32]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d03f      	beq.n	8001550 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2270      	movs	r2, #112	; 0x70
 80014d4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014d6:	d03b      	beq.n	8001550 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2270      	movs	r2, #112	; 0x70
 80014dc:	4013      	ands	r3, r2
 80014de:	2b60      	cmp	r3, #96	; 0x60
 80014e0:	d027      	beq.n	8001532 <HAL_CAN_IRQHandler+0x320>
 80014e2:	d82c      	bhi.n	800153e <HAL_CAN_IRQHandler+0x32c>
 80014e4:	2b50      	cmp	r3, #80	; 0x50
 80014e6:	d01f      	beq.n	8001528 <HAL_CAN_IRQHandler+0x316>
 80014e8:	d829      	bhi.n	800153e <HAL_CAN_IRQHandler+0x32c>
 80014ea:	2b40      	cmp	r3, #64	; 0x40
 80014ec:	d017      	beq.n	800151e <HAL_CAN_IRQHandler+0x30c>
 80014ee:	d826      	bhi.n	800153e <HAL_CAN_IRQHandler+0x32c>
 80014f0:	2b30      	cmp	r3, #48	; 0x30
 80014f2:	d00f      	beq.n	8001514 <HAL_CAN_IRQHandler+0x302>
 80014f4:	d823      	bhi.n	800153e <HAL_CAN_IRQHandler+0x32c>
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d002      	beq.n	8001500 <HAL_CAN_IRQHandler+0x2ee>
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d005      	beq.n	800150a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014fe:	e01e      	b.n	800153e <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	2208      	movs	r2, #8
 8001504:	4313      	orrs	r3, r2
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001508:	e01a      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	2210      	movs	r2, #16
 800150e:	4313      	orrs	r3, r2
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001512:	e015      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2220      	movs	r2, #32
 8001518:	4313      	orrs	r3, r2
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800151c:	e010      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	2240      	movs	r2, #64	; 0x40
 8001522:	4313      	orrs	r3, r2
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001526:	e00b      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	4313      	orrs	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001530:	e006      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	0052      	lsls	r2, r2, #1
 8001538:	4313      	orrs	r3, r2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800153c:	e000      	b.n	8001540 <HAL_CAN_IRQHandler+0x32e>
            break;
 800153e:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2170      	movs	r1, #112	; 0x70
 800154c:	438a      	bics	r2, r1
 800154e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2204      	movs	r2, #4
 8001556:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0018      	movs	r0, r3
 800156e:	f000 f85c 	bl	800162a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b00a      	add	sp, #40	; 0x28
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b7f      	cmp	r3, #127	; 0x7f
 800164e:	d809      	bhi.n	8001664 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	231f      	movs	r3, #31
 8001658:	401a      	ands	r2, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_EnableIRQ+0x30>)
 800165c:	2101      	movs	r1, #1
 800165e:	4091      	lsls	r1, r2
 8001660:	000a      	movs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b7f      	cmp	r3, #127	; 0x7f
 8001684:	d828      	bhi.n	80016d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001686:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <__NVIC_SetPriority+0xd4>)
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	33c0      	adds	r3, #192	; 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	589b      	ldr	r3, [r3, r2]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	0011      	movs	r1, r2
 800169c:	2203      	movs	r2, #3
 800169e:	400a      	ands	r2, r1
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	21ff      	movs	r1, #255	; 0xff
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	401a      	ands	r2, r3
 80016ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	401a      	ands	r2, r3
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	2303      	movs	r3, #3
 80016be:	4003      	ands	r3, r0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <__NVIC_SetPriority+0xd4>)
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	430a      	orrs	r2, r1
 80016d0:	33c0      	adds	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016d6:	e031      	b.n	800173c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <__NVIC_SetPriority+0xd8>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0019      	movs	r1, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	400b      	ands	r3, r1
 80016e4:	3b08      	subs	r3, #8
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3306      	adds	r3, #6
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1dfa      	adds	r2, r7, #7
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	0011      	movs	r1, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	401a      	ands	r2, r3
 8001708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	401a      	ands	r2, r3
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	2303      	movs	r3, #3
 800171a:	4003      	ands	r3, r0
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <__NVIC_SetPriority+0xd8>)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	001c      	movs	r4, r3
 8001728:	230f      	movs	r3, #15
 800172a:	4023      	ands	r3, r4
 800172c:	3b08      	subs	r3, #8
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	430a      	orrs	r2, r1
 8001732:	3306      	adds	r3, #6
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	18c3      	adds	r3, r0, r3
 8001738:	3304      	adds	r3, #4
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b003      	add	sp, #12
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	045b      	lsls	r3, r3, #17
 800175c:	429a      	cmp	r2, r3
 800175e:	d301      	bcc.n	8001764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001760:	2301      	movs	r3, #1
 8001762:	e010      	b.n	8001786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <SysTick_Config+0x44>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	3a01      	subs	r2, #1
 800176a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176c:	2301      	movs	r3, #1
 800176e:	425b      	negs	r3, r3
 8001770:	2103      	movs	r1, #3
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff7c 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x44>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x44>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	210f      	movs	r1, #15
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	0002      	movs	r2, r0
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff33 	bl	800163c <__NVIC_EnableIRQ>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffaf 	bl	800174c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e155      	b.n	8001ab4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e146      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e0a0      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	4b54      	ldr	r3, [pc, #336]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	589b      	ldr	r3, [r3, r2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	2390      	movs	r3, #144	; 0x90
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1e2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1de>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	035b      	lsls	r3, r3, #13
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ca>
 8001ac0:	e6a2      	b.n	8001808 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	0008      	movs	r0, r1
 8001af2:	0011      	movs	r1, r2
 8001af4:	1cbb      	adds	r3, r7, #2
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	1c7b      	adds	r3, r7, #1
 8001afc:	1c0a      	adds	r2, r1, #0
 8001afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	1c7b      	adds	r3, r7, #1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b08:	1cbb      	adds	r3, r7, #2
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af06      	add	r7, sp, #24
 8001b2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0ff      	b.n	8001d36 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a81      	ldr	r2, [pc, #516]	; (8001d40 <HAL_PCD_Init+0x21c>)
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	23aa      	movs	r3, #170	; 0xaa
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	2100      	movs	r1, #0
 8001b4a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f006 fb8a 	bl	8008268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_PCD_Init+0x21c>)
 8001b58:	2103      	movs	r1, #3
 8001b5a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f002 fc47 	bl	80043f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b66:	230f      	movs	r3, #15
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e058      	b.n	8001c22 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b70:	200f      	movs	r0, #15
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	18cb      	adds	r3, r1, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	0013      	movs	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	189b      	adds	r3, r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	183a      	adds	r2, r7, r0
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ba0:	0004      	movs	r4, r0
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b298      	uxth	r0, r3
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	0013      	movs	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	18cb      	adds	r3, r1, r3
 8001bb8:	3336      	adds	r3, #54	; 0x36
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	189b      	adds	r3, r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	18cb      	adds	r3, r1, r3
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	0013      	movs	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	189b      	adds	r3, r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	18cb      	adds	r3, r1, r3
 8001be6:	3338      	adds	r3, #56	; 0x38
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	18cb      	adds	r3, r1, r3
 8001bfc:	333c      	adds	r3, #60	; 0x3c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	0013      	movs	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	189b      	adds	r3, r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	18cb      	adds	r3, r1, r3
 8001c12:	3340      	adds	r3, #64	; 0x40
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	3201      	adds	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	210f      	movs	r1, #15
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d39f      	bcc.n	8001b70 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e056      	b.n	8001ce6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c38:	240f      	movs	r4, #15
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	236a      	movs	r3, #106	; 0x6a
 8001c42:	33ff      	adds	r3, #255	; 0xff
 8001c44:	0019      	movs	r1, r3
 8001c46:	0013      	movs	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	18c3      	adds	r3, r0, r3
 8001c50:	185b      	adds	r3, r3, r1
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	23b4      	movs	r3, #180	; 0xb4
 8001c5e:	0059      	lsls	r1, r3, #1
 8001c60:	0013      	movs	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	18c3      	adds	r3, r0, r3
 8001c6a:	185b      	adds	r3, r3, r1
 8001c6c:	193a      	adds	r2, r7, r4
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	236c      	movs	r3, #108	; 0x6c
 8001c7a:	33ff      	adds	r3, #255	; 0xff
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	18c3      	adds	r3, r0, r3
 8001c88:	185b      	adds	r3, r3, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	23bc      	movs	r3, #188	; 0xbc
 8001c96:	0059      	lsls	r1, r3, #1
 8001c98:	0013      	movs	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	18c3      	adds	r3, r0, r3
 8001ca2:	185b      	adds	r3, r3, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	23be      	movs	r3, #190	; 0xbe
 8001cb0:	0059      	lsls	r1, r3, #1
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	189b      	adds	r3, r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	18c3      	adds	r3, r0, r3
 8001cbc:	185b      	adds	r3, r3, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	0059      	lsls	r1, r3, #1
 8001ccc:	0013      	movs	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	189b      	adds	r3, r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	18c3      	adds	r3, r0, r3
 8001cd6:	185b      	adds	r3, r3, r1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	3201      	adds	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d3a1      	bcc.n	8001c38 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	466a      	mov	r2, sp
 8001cfc:	0011      	movs	r1, r2
 8001cfe:	001a      	movs	r2, r3
 8001d00:	3210      	adds	r2, #16
 8001d02:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d04:	c170      	stmia	r1!, {r4, r5, r6}
 8001d06:	ca30      	ldmia	r2!, {r4, r5}
 8001d08:	c130      	stmia	r1!, {r4, r5}
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f002 fb8a 	bl	8004428 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_PCD_Init+0x21c>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d103      	bne.n	8001d34 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f001 fd34 	bl	800379c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b005      	add	sp, #20
 8001d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	000002a9 	.word	0x000002a9

08001d44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	23aa      	movs	r3, #170	; 0xaa
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_Start+0x18>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e014      	b.n	8001d86 <HAL_PCD_Start+0x42>
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	23aa      	movs	r3, #170	; 0xaa
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	2101      	movs	r1, #1
 8001d64:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f002 fb2c 	bl	80043c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f004 fa87 	bl	8006288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	23aa      	movs	r3, #170	; 0xaa
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	2100      	movs	r1, #0
 8001d82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f004 fa89 	bl	80062b4 <USB_ReadInterrupts>
 8001da2:	0002      	movs	r2, r0
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	401a      	ands	r2, r3
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d103      	bne.n	8001dba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 fbbb 	bl	8002530 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f004 fa78 	bl	80062b4 <USB_ReadInterrupts>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d114      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2244      	movs	r2, #68	; 0x44
 8001dda:	5a9b      	ldrh	r3, [r3, r2]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	49a2      	ldr	r1, [pc, #648]	; (800206c <HAL_PCD_IRQHandler+0x2dc>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	b291      	uxth	r1, r2
 8001de8:	2244      	movs	r2, #68	; 0x44
 8001dea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f006 fac5 	bl	800837e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2100      	movs	r1, #0
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 f945 	bl	8002088 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f004 fa56 	bl	80062b4 <USB_ReadInterrupts>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	01db      	lsls	r3, r3, #7
 8001e0e:	401a      	ands	r2, r3
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10b      	bne.n	8001e30 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2244      	movs	r2, #68	; 0x44
 8001e1e:	5a9b      	ldrh	r3, [r3, r2]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4992      	ldr	r1, [pc, #584]	; (8002070 <HAL_PCD_IRQHandler+0x2e0>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	b291      	uxth	r1, r2
 8001e2c:	2244      	movs	r2, #68	; 0x44
 8001e2e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f004 fa3d 	bl	80062b4 <USB_ReadInterrupts>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	401a      	ands	r2, r3
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d10b      	bne.n	8001e62 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2244      	movs	r2, #68	; 0x44
 8001e50:	5a9b      	ldrh	r3, [r3, r2]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4986      	ldr	r1, [pc, #536]	; (8002074 <HAL_PCD_IRQHandler+0x2e4>)
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	b291      	uxth	r1, r2
 8001e5e:	2244      	movs	r2, #68	; 0x44
 8001e60:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f004 fa24 	bl	80062b4 <USB_ReadInterrupts>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	015b      	lsls	r3, r3, #5
 8001e72:	401a      	ands	r2, r3
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d137      	bne.n	8001eec <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	5a9b      	ldrh	r3, [r3, r2]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	b291      	uxth	r1, r2
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	5a9b      	ldrh	r3, [r3, r2]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	b291      	uxth	r1, r2
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	23b8      	movs	r3, #184	; 0xb8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d109      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	23b8      	movs	r3, #184	; 0xb8
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f001 fc92 	bl	80037f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f006 fa96 	bl	8008400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2244      	movs	r2, #68	; 0x44
 8001eda:	5a9b      	ldrh	r3, [r3, r2]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4965      	ldr	r1, [pc, #404]	; (8002078 <HAL_PCD_IRQHandler+0x2e8>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	b291      	uxth	r1, r2
 8001ee8:	2244      	movs	r2, #68	; 0x44
 8001eea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f004 f9df 	bl	80062b4 <USB_ReadInterrupts>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	401a      	ands	r2, r3
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d127      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	5a9b      	ldrh	r3, [r3, r2]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2108      	movs	r1, #8
 8001f16:	430a      	orrs	r2, r1
 8001f18:	b291      	uxth	r1, r2
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2244      	movs	r2, #68	; 0x44
 8001f24:	5a9b      	ldrh	r3, [r3, r2]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4953      	ldr	r1, [pc, #332]	; (800207c <HAL_PCD_IRQHandler+0x2ec>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	b291      	uxth	r1, r2
 8001f32:	2244      	movs	r2, #68	; 0x44
 8001f34:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	5a9b      	ldrh	r3, [r3, r2]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2104      	movs	r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	b291      	uxth	r1, r2
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f006 fa39 	bl	80083c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f004 f9aa 	bl	80062b4 <USB_ReadInterrupts>
 8001f60:	0003      	movs	r3, r0
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b80      	cmp	r3, #128	; 0x80
 8001f68:	d145      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2244      	movs	r2, #68	; 0x44
 8001f70:	5a9b      	ldrh	r3, [r3, r2]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	438a      	bics	r2, r1
 8001f7c:	b291      	uxth	r1, r2
 8001f7e:	2244      	movs	r2, #68	; 0x44
 8001f80:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	23b8      	movs	r3, #184	; 0xb8
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12f      	bne.n	8001fee <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2240      	movs	r2, #64	; 0x40
 8001f94:	5a9b      	ldrh	r3, [r3, r2]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	b291      	uxth	r1, r2
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	5a9b      	ldrh	r3, [r3, r2]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	b291      	uxth	r1, r2
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	23b8      	movs	r3, #184	; 0xb8
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2254      	movs	r2, #84	; 0x54
 8001fce:	5a9b      	ldrh	r3, [r3, r2]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	223c      	movs	r2, #60	; 0x3c
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	23b9      	movs	r3, #185	; 0xb9
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f001 fc02 	bl	80037f0 <HAL_PCDEx_LPM_Callback>
 8001fec:	e003      	b.n	8001ff6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f006 f9e9 	bl	80083c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f004 f95a 	bl	80062b4 <USB_ReadInterrupts>
 8002000:	0002      	movs	r2, r0
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	401a      	ands	r2, r3
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d10f      	bne.n	8002030 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2244      	movs	r2, #68	; 0x44
 8002016:	5a9b      	ldrh	r3, [r3, r2]
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4918      	ldr	r1, [pc, #96]	; (8002080 <HAL_PCD_IRQHandler+0x2f0>)
 8002020:	400a      	ands	r2, r1
 8002022:	b291      	uxth	r1, r2
 8002024:	2244      	movs	r2, #68	; 0x44
 8002026:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f006 f998 	bl	8008360 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0018      	movs	r0, r3
 8002036:	f004 f93d 	bl	80062b4 <USB_ReadInterrupts>
 800203a:	0002      	movs	r2, r0
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	401a      	ands	r2, r3
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	429a      	cmp	r2, r3
 8002048:	d10b      	bne.n	8002062 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2244      	movs	r2, #68	; 0x44
 8002050:	5a9b      	ldrh	r3, [r3, r2]
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_PCD_IRQHandler+0x2f4>)
 800205a:	400a      	ands	r2, r1
 800205c:	b291      	uxth	r1, r2
 800205e:	2244      	movs	r2, #68	; 0x44
 8002060:	5299      	strh	r1, [r3, r2]
  }
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	fffffbff 	.word	0xfffffbff
 8002070:	ffffbfff 	.word	0xffffbfff
 8002074:	ffffdfff 	.word	0xffffdfff
 8002078:	ffffefff 	.word	0xffffefff
 800207c:	fffff7ff 	.word	0xfffff7ff
 8002080:	fffffdff 	.word	0xfffffdff
 8002084:	fffffeff 	.word	0xfffffeff

08002088 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	000a      	movs	r2, r1
 8002092:	1cfb      	adds	r3, r7, #3
 8002094:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	23aa      	movs	r3, #170	; 0xaa
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_SetAddress+0x1e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e017      	b.n	80020d6 <HAL_PCD_SetAddress+0x4e>
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	23aa      	movs	r3, #170	; 0xaa
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	2101      	movs	r1, #1
 80020ae:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1cfa      	adds	r2, r7, #3
 80020b4:	2124      	movs	r1, #36	; 0x24
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	1cfb      	adds	r3, r7, #3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	0019      	movs	r1, r3
 80020c4:	0010      	movs	r0, r2
 80020c6:	f004 f8cb 	bl	8006260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	23aa      	movs	r3, #170	; 0xaa
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	2100      	movs	r1, #0
 80020d2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	000c      	movs	r4, r1
 80020e8:	0010      	movs	r0, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	1cfb      	adds	r3, r7, #3
 80020ee:	1c22      	adds	r2, r4, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	003b      	movs	r3, r7
 80020f4:	1c02      	adds	r2, r0, #0
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	1cbb      	adds	r3, r7, #2
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020fe:	230b      	movs	r3, #11
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002106:	1cfb      	adds	r3, r7, #3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b25b      	sxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0f      	bge.n	8002130 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	1cfb      	adds	r3, r7, #3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2207      	movs	r2, #7
 8002116:	4013      	ands	r3, r2
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	0013      	movs	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	189b      	adds	r3, r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00f      	b.n	8002150 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002130:	1cfb      	adds	r3, r7, #3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2207      	movs	r2, #7
 8002136:	401a      	ands	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	189b      	adds	r3, r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	3369      	adds	r3, #105	; 0x69
 8002142:	33ff      	adds	r3, #255	; 0xff
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	18d3      	adds	r3, r2, r3
 8002148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002150:	1cfb      	adds	r3, r7, #3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2207      	movs	r2, #7
 8002156:	4013      	ands	r3, r2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800215e:	003b      	movs	r3, r7
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1cba      	adds	r2, r7, #2
 800216a:	7812      	ldrb	r2, [r2, #0]
 800216c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002180:	1cbb      	adds	r3, r7, #2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d102      	bne.n	800218e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	23aa      	movs	r3, #170	; 0xaa
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_PCD_EP_Open+0xc0>
 800219a:	2302      	movs	r3, #2
 800219c:	e013      	b.n	80021c6 <HAL_PCD_EP_Open+0xe8>
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	23aa      	movs	r3, #170	; 0xaa
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	2101      	movs	r1, #1
 80021a6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f002 f965 	bl	8004480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	23aa      	movs	r3, #170	; 0xaa
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	2100      	movs	r1, #0
 80021be:	54d1      	strb	r1, [r2, r3]

  return ret;
 80021c0:	230b      	movs	r3, #11
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b005      	add	sp, #20
 80021cc:	bd90      	pop	{r4, r7, pc}

080021ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	000a      	movs	r2, r1
 80021d8:	1cfb      	adds	r3, r7, #3
 80021da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021dc:	1cfb      	adds	r3, r7, #3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da0f      	bge.n	8002206 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	1cfb      	adds	r3, r7, #3
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2207      	movs	r2, #7
 80021ec:	4013      	ands	r3, r2
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	0013      	movs	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	189b      	adds	r3, r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	18d3      	adds	r3, r2, r3
 80021fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	705a      	strb	r2, [r3, #1]
 8002204:	e00f      	b.n	8002226 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002206:	1cfb      	adds	r3, r7, #3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	401a      	ands	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	189b      	adds	r3, r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	3369      	adds	r3, #105	; 0x69
 8002218:	33ff      	adds	r3, #255	; 0xff
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	18d3      	adds	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002226:	1cfb      	adds	r3, r7, #3
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4013      	ands	r3, r2
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	23aa      	movs	r3, #170	; 0xaa
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_PCD_EP_Close+0x76>
 8002240:	2302      	movs	r3, #2
 8002242:	e011      	b.n	8002268 <HAL_PCD_EP_Close+0x9a>
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	23aa      	movs	r3, #170	; 0xaa
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	2101      	movs	r1, #1
 800224c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	0011      	movs	r1, r2
 8002256:	0018      	movs	r0, r3
 8002258:	f002 fc86 	bl	8004b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	23aa      	movs	r3, #170	; 0xaa
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	2100      	movs	r1, #0
 8002264:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b004      	add	sp, #16
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	200b      	movs	r0, #11
 800227e:	183b      	adds	r3, r7, r0
 8002280:	1c0a      	adds	r2, r1, #0
 8002282:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002284:	0001      	movs	r1, r0
 8002286:	187b      	adds	r3, r7, r1
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2207      	movs	r2, #7
 800228c:	401a      	ands	r2, r3
 800228e:	0013      	movs	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	189b      	adds	r3, r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3369      	adds	r3, #105	; 0x69
 8002298:	33ff      	adds	r3, #255	; 0xff
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2207      	movs	r2, #7
 80022be:	4013      	ands	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2207      	movs	r2, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	d107      	bne.n	80022e0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f002 fe05 	bl	8004ee8 <USB_EPStartXfer>
 80022de:	e006      	b.n	80022ee <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f002 fdfd 	bl	8004ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b006      	add	sp, #24
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	000a      	movs	r2, r1
 8002302:	1cfb      	adds	r3, r7, #3
 8002304:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002306:	1cfb      	adds	r3, r7, #3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2207      	movs	r2, #7
 800230c:	401a      	ands	r2, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	23c2      	movs	r3, #194	; 0xc2
 8002312:	0059      	lsls	r1, r3, #1
 8002314:	0013      	movs	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	189b      	adds	r3, r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	18c3      	adds	r3, r0, r3
 800231e:	185b      	adds	r3, r3, r1
 8002320:	681b      	ldr	r3, [r3, #0]
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	200b      	movs	r0, #11
 8002338:	183b      	adds	r3, r7, r0
 800233a:	1c0a      	adds	r2, r1, #0
 800233c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233e:	183b      	adds	r3, r7, r0
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	0013      	movs	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	189b      	adds	r3, r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2224      	movs	r2, #36	; 0x24
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800237c:	183b      	adds	r3, r7, r0
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2207      	movs	r2, #7
 8002382:	4013      	ands	r3, r2
 8002384:	b2da      	uxtb	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238a:	183b      	adds	r3, r7, r0
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2207      	movs	r2, #7
 8002390:	4013      	ands	r3, r2
 8002392:	d107      	bne.n	80023a4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f002 fda3 	bl	8004ee8 <USB_EPStartXfer>
 80023a2:	e006      	b.n	80023b2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fd9b 	bl	8004ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	000a      	movs	r2, r1
 80023c6:	1cfb      	adds	r3, r7, #3
 80023c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ca:	1cfb      	adds	r3, r7, #3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2207      	movs	r2, #7
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d901      	bls.n	80023de <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e046      	b.n	800246c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023de:	1cfb      	adds	r3, r7, #3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da0f      	bge.n	8002408 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e8:	1cfb      	adds	r3, r7, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2207      	movs	r2, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	0013      	movs	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	18d3      	adds	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e00d      	b.n	8002424 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002408:	1cfb      	adds	r3, r7, #3
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	0013      	movs	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	189b      	adds	r3, r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	3369      	adds	r3, #105	; 0x69
 8002416:	33ff      	adds	r3, #255	; 0xff
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242a:	1cfb      	adds	r3, r7, #3
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2207      	movs	r2, #7
 8002430:	4013      	ands	r3, r2
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	23aa      	movs	r3, #170	; 0xaa
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_PCD_EP_SetStall+0x8c>
 8002444:	2302      	movs	r3, #2
 8002446:	e011      	b.n	800246c <HAL_PCD_EP_SetStall+0xb0>
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	23aa      	movs	r3, #170	; 0xaa
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	2101      	movs	r1, #1
 8002450:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f003 fdfe 	bl	800605c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	23aa      	movs	r3, #170	; 0xaa
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	2100      	movs	r1, #0
 8002468:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	000a      	movs	r2, r1
 800247e:	1cfb      	adds	r3, r7, #3
 8002480:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002482:	1cfb      	adds	r3, r7, #3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	220f      	movs	r2, #15
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d901      	bls.n	8002496 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e048      	b.n	8002528 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002496:	1cfb      	adds	r3, r7, #3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	da0f      	bge.n	80024c0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	1cfb      	adds	r3, r7, #3
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2207      	movs	r2, #7
 80024a6:	4013      	ands	r3, r2
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	0013      	movs	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	705a      	strb	r2, [r3, #1]
 80024be:	e00f      	b.n	80024e0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	1cfb      	adds	r3, r7, #3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2207      	movs	r2, #7
 80024c6:	401a      	ands	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	3369      	adds	r3, #105	; 0x69
 80024d2:	33ff      	adds	r3, #255	; 0xff
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	1cfb      	adds	r3, r7, #3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2207      	movs	r2, #7
 80024ec:	4013      	ands	r3, r2
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	23aa      	movs	r3, #170	; 0xaa
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_PCD_EP_ClrStall+0x90>
 8002500:	2302      	movs	r3, #2
 8002502:	e011      	b.n	8002528 <HAL_PCD_EP_ClrStall+0xb4>
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	23aa      	movs	r3, #170	; 0xaa
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	2101      	movs	r1, #1
 800250c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f003 fdf0 	bl	80060fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	23aa      	movs	r3, #170	; 0xaa
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	2100      	movs	r1, #0
 8002524:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}

08002530 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b096      	sub	sp, #88	; 0x58
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002538:	f000 fbd8 	bl	8002cec <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2056      	movs	r0, #86	; 0x56
 8002542:	183b      	adds	r3, r7, r0
 8002544:	2144      	movs	r1, #68	; 0x44
 8002546:	5a52      	ldrh	r2, [r2, r1]
 8002548:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800254a:	183b      	adds	r3, r7, r0
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	2455      	movs	r4, #85	; 0x55
 8002552:	193b      	adds	r3, r7, r4
 8002554:	210f      	movs	r1, #15
 8002556:	400a      	ands	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800255a:	193b      	adds	r3, r7, r4
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d000      	beq.n	8002564 <PCD_EP_ISR_Handler+0x34>
 8002562:	e179      	b.n	8002858 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002564:	183b      	adds	r3, r7, r0
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2210      	movs	r2, #16
 800256a:	4013      	ands	r3, r2
 800256c:	d154      	bne.n	8002618 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	200e      	movs	r0, #14
 8002578:	183b      	adds	r3, r7, r0
 800257a:	49af      	ldr	r1, [pc, #700]	; (8002838 <PCD_EP_ISR_Handler+0x308>)
 800257c:	400a      	ands	r2, r1
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	183a      	adds	r2, r7, r0
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	49ac      	ldr	r1, [pc, #688]	; (800283c <PCD_EP_ISR_Handler+0x30c>)
 800258a:	430a      	orrs	r2, r1
 800258c:	b292      	uxth	r2, r2
 800258e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3328      	adds	r3, #40	; 0x28
 8002594:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2250      	movs	r2, #80	; 0x50
 800259c:	5a9b      	ldrh	r3, [r3, r2]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	001a      	movs	r2, r3
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	18d2      	adds	r2, r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	18d3      	adds	r3, r2, r3
 80025b0:	4aa3      	ldr	r2, [pc, #652]	; (8002840 <PCD_EP_ISR_Handler+0x310>)
 80025b2:	4694      	mov	ip, r2
 80025b4:	4463      	add	r3, ip
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	059b      	lsls	r3, r3, #22
 80025ba:	0d9a      	lsrs	r2, r3, #22
 80025bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	18d2      	adds	r2, r2, r3
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2100      	movs	r1, #0
 80025d2:	0018      	movs	r0, r3
 80025d4:	f005 fea6 	bl	8008324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	5c9b      	ldrb	r3, [r3, r2]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <PCD_EP_ISR_Handler+0xb8>
 80025e4:	f000 fb82 	bl	8002cec <PCD_EP_ISR_Handler+0x7bc>
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <PCD_EP_ISR_Handler+0xc4>
 80025f0:	f000 fb7c 	bl	8002cec <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	4252      	negs	r2, r2
 8002600:	4313      	orrs	r3, r2
 8002602:	b2da      	uxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b291      	uxth	r1, r2
 800260a:	224c      	movs	r2, #76	; 0x4c
 800260c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	2100      	movs	r1, #0
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	e369      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3369      	adds	r3, #105	; 0x69
 800261c:	33ff      	adds	r3, #255	; 0xff
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2152      	movs	r1, #82	; 0x52
 8002626:	187b      	adds	r3, r7, r1
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800262c:	187b      	adds	r3, r7, r1
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4013      	ands	r3, r2
 8002636:	d037      	beq.n	80026a8 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2250      	movs	r2, #80	; 0x50
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29b      	uxth	r3, r3
 8002642:	001a      	movs	r2, r3
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	18d2      	adds	r2, r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	4a7c      	ldr	r2, [pc, #496]	; (8002844 <PCD_EP_ISR_Handler+0x314>)
 8002654:	4694      	mov	ip, r2
 8002656:	4463      	add	r3, ip
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	059b      	lsls	r3, r3, #22
 800265c:	0d9a      	lsrs	r2, r3, #22
 800265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002660:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	22ac      	movs	r2, #172	; 0xac
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	1899      	adds	r1, r3, r2
 800266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002670:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002676:	b29b      	uxth	r3, r3
 8002678:	f003 fe6e 	bl	8006358 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29a      	uxth	r2, r3
 8002684:	2010      	movs	r0, #16
 8002686:	183b      	adds	r3, r7, r0
 8002688:	496f      	ldr	r1, [pc, #444]	; (8002848 <PCD_EP_ISR_Handler+0x318>)
 800268a:	400a      	ands	r2, r1
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	183a      	adds	r2, r7, r0
 8002694:	8812      	ldrh	r2, [r2, #0]
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	430a      	orrs	r2, r1
 800269a:	b292      	uxth	r2, r2
 800269c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f005 fe09 	bl	80082b8 <HAL_PCD_SetupStageCallback>
 80026a6:	e321      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a8:	2352      	movs	r3, #82	; 0x52
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	5e9b      	ldrsh	r3, [r3, r2]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db00      	blt.n	80026b6 <PCD_EP_ISR_Handler+0x186>
 80026b4:	e31a      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	201e      	movs	r0, #30
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	4961      	ldr	r1, [pc, #388]	; (8002848 <PCD_EP_ISR_Handler+0x318>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	183a      	adds	r2, r7, r0
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	430a      	orrs	r2, r1
 80026d4:	b292      	uxth	r2, r2
 80026d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2250      	movs	r2, #80	; 0x50
 80026de:	5a9b      	ldrh	r3, [r3, r2]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	001a      	movs	r2, r3
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	18d2      	adds	r2, r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	4a54      	ldr	r2, [pc, #336]	; (8002844 <PCD_EP_ISR_Handler+0x314>)
 80026f4:	4694      	mov	ip, r2
 80026f6:	4463      	add	r3, ip
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	059b      	lsls	r3, r3, #22
 80026fc:	0d9a      	lsrs	r2, r3, #22
 80026fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002700:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <PCD_EP_ISR_Handler+0x210>
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	6959      	ldr	r1, [r3, #20]
 800271a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002722:	b29b      	uxth	r3, r3
 8002724:	f003 fe18 	bl	8006358 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	18d2      	adds	r2, r2, r3
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2100      	movs	r1, #0
 800273a:	0018      	movs	r0, r3
 800273c:	f005 fdd1 	bl	80082e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	001a      	movs	r2, r3
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4013      	ands	r3, r2
 8002750:	d000      	beq.n	8002754 <PCD_EP_ISR_Handler+0x224>
 8002752:	e2cb      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2250      	movs	r2, #80	; 0x50
 8002760:	5a9b      	ldrh	r3, [r3, r2]
 8002762:	b29b      	uxth	r3, r3
 8002764:	001a      	movs	r2, r3
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	189b      	adds	r3, r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4a35      	ldr	r2, [pc, #212]	; (8002844 <PCD_EP_ISR_Handler+0x314>)
 8002770:	4694      	mov	ip, r2
 8002772:	4463      	add	r3, ip
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d110      	bne.n	80027a0 <PCD_EP_ISR_Handler+0x270>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4a31      	ldr	r2, [pc, #196]	; (800284c <PCD_EP_ISR_Handler+0x31c>)
 8002786:	4013      	ands	r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <PCD_EP_ISR_Handler+0x30c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	b29a      	uxth	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e02b      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2c8>
 80027a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b3e      	cmp	r3, #62	; 0x3e
 80027a6:	d812      	bhi.n	80027ce <PCD_EP_ISR_Handler+0x29e>
 80027a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d002      	beq.n	80027c0 <PCD_EP_ISR_Handler+0x290>
 80027ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027bc:	3301      	adds	r3, #1
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e014      	b.n	80027f8 <PCD_EP_ISR_Handler+0x2c8>
 80027ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	221f      	movs	r2, #31
 80027dc:	4013      	ands	r3, r2
 80027de:	d102      	bne.n	80027e6 <PCD_EP_ISR_Handler+0x2b6>
 80027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e2:	3b01      	subs	r3, #1
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	029b      	lsls	r3, r3, #10
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4a13      	ldr	r2, [pc, #76]	; (800283c <PCD_EP_ISR_Handler+0x30c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	2012      	movs	r0, #18
 8002802:	183b      	adds	r3, r7, r0
 8002804:	4912      	ldr	r1, [pc, #72]	; (8002850 <PCD_EP_ISR_Handler+0x320>)
 8002806:	400a      	ands	r2, r1
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	183b      	adds	r3, r7, r0
 800280c:	183a      	adds	r2, r7, r0
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	0149      	lsls	r1, r1, #5
 8002814:	404a      	eors	r2, r1
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	183b      	adds	r3, r7, r0
 800281a:	183a      	adds	r2, r7, r0
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0189      	lsls	r1, r1, #6
 8002822:	404a      	eors	r2, r1
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	183a      	adds	r2, r7, r0
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	4909      	ldr	r1, [pc, #36]	; (8002854 <PCD_EP_ISR_Handler+0x324>)
 8002830:	430a      	orrs	r2, r1
 8002832:	b292      	uxth	r2, r2
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	e259      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
 8002838:	ffff8f0f 	.word	0xffff8f0f
 800283c:	ffff8000 	.word	0xffff8000
 8002840:	00000402 	.word	0x00000402
 8002844:	00000406 	.word	0x00000406
 8002848:	00000f8f 	.word	0x00000f8f
 800284c:	ffff83ff 	.word	0xffff83ff
 8002850:	ffffbf8f 	.word	0xffffbf8f
 8002854:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	001a      	movs	r2, r3
 800285e:	2055      	movs	r0, #85	; 0x55
 8002860:	183b      	adds	r3, r7, r0
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	18d2      	adds	r2, r2, r3
 8002868:	2152      	movs	r1, #82	; 0x52
 800286a:	187b      	adds	r3, r7, r1
 800286c:	8812      	ldrh	r2, [r2, #0]
 800286e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2200      	movs	r2, #0
 8002874:	5e9b      	ldrsh	r3, [r3, r2]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db00      	blt.n	800287c <PCD_EP_ISR_Handler+0x34c>
 800287a:	e0fa      	b.n	8002a72 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	001a      	movs	r2, r3
 8002882:	183b      	adds	r3, r7, r0
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29a      	uxth	r2, r3
 800288e:	2450      	movs	r4, #80	; 0x50
 8002890:	193b      	adds	r3, r7, r4
 8002892:	49cf      	ldr	r1, [pc, #828]	; (8002bd0 <PCD_EP_ISR_Handler+0x6a0>)
 8002894:	400a      	ands	r2, r1
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	001a      	movs	r2, r3
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	193a      	adds	r2, r7, r4
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	430a      	orrs	r2, r1
 80028ae:	b292      	uxth	r2, r2
 80028b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	0013      	movs	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	3369      	adds	r3, #105	; 0x69
 80028c0:	33ff      	adds	r3, #255	; 0xff
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d125      	bne.n	800291c <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2250      	movs	r2, #80	; 0x50
 80028d6:	5a9b      	ldrh	r3, [r3, r2]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	001a      	movs	r2, r3
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	18d3      	adds	r3, r2, r3
 80028ea:	4aba      	ldr	r2, [pc, #744]	; (8002bd4 <PCD_EP_ISR_Handler+0x6a4>)
 80028ec:	4694      	mov	ip, r2
 80028ee:	4463      	add	r3, ip
 80028f0:	881a      	ldrh	r2, [r3, #0]
 80028f2:	2448      	movs	r4, #72	; 0x48
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	0592      	lsls	r2, r2, #22
 80028f8:	0d92      	lsrs	r2, r2, #22
 80028fa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <PCD_EP_ISR_Handler+0x3d6>
 8002904:	e08d      	b.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	6959      	ldr	r1, [r3, #20]
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	88da      	ldrh	r2, [r3, #6]
 8002912:	193b      	adds	r3, r7, r4
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f003 fd1f 	bl	8006358 <USB_ReadPMA>
 800291a:	e082      	b.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	78db      	ldrb	r3, [r3, #3]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d10c      	bne.n	800293e <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002924:	2348      	movs	r3, #72	; 0x48
 8002926:	18fc      	adds	r4, r7, r3
 8002928:	2352      	movs	r3, #82	; 0x52
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f9ee 	bl	8002d14 <HAL_PCD_EP_DB_Receive>
 8002938:	0003      	movs	r3, r0
 800293a:	8023      	strh	r3, [r4, #0]
 800293c:	e071      	b.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	001a      	movs	r2, r3
 8002944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	18d3      	adds	r3, r2, r3
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29a      	uxth	r2, r3
 8002950:	204a      	movs	r0, #74	; 0x4a
 8002952:	183b      	adds	r3, r7, r0
 8002954:	49a0      	ldr	r1, [pc, #640]	; (8002bd8 <PCD_EP_ISR_Handler+0x6a8>)
 8002956:	400a      	ands	r2, r1
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	001a      	movs	r2, r3
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	18d3      	adds	r3, r2, r3
 8002968:	183a      	adds	r2, r7, r0
 800296a:	8812      	ldrh	r2, [r2, #0]
 800296c:	499b      	ldr	r1, [pc, #620]	; (8002bdc <PCD_EP_ISR_Handler+0x6ac>)
 800296e:	430a      	orrs	r2, r1
 8002970:	b292      	uxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	001a      	movs	r2, r3
 800297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	001a      	movs	r2, r3
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	4013      	ands	r3, r2
 800298e:	d024      	beq.n	80029da <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2250      	movs	r2, #80	; 0x50
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29b      	uxth	r3, r3
 800299a:	001a      	movs	r2, r3
 800299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	18d2      	adds	r2, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	4a8d      	ldr	r2, [pc, #564]	; (8002be0 <PCD_EP_ISR_Handler+0x6b0>)
 80029ac:	4694      	mov	ip, r2
 80029ae:	4463      	add	r3, ip
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	2448      	movs	r4, #72	; 0x48
 80029b4:	193b      	adds	r3, r7, r4
 80029b6:	0592      	lsls	r2, r2, #22
 80029b8:	0d92      	lsrs	r2, r2, #22
 80029ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02e      	beq.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ca:	6959      	ldr	r1, [r3, #20]
 80029cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ce:	891a      	ldrh	r2, [r3, #8]
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	f003 fcc0 	bl	8006358 <USB_ReadPMA>
 80029d8:	e023      	b.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2250      	movs	r2, #80	; 0x50
 80029e0:	5a9b      	ldrh	r3, [r3, r2]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	001a      	movs	r2, r3
 80029e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	18d3      	adds	r3, r2, r3
 80029f4:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <PCD_EP_ISR_Handler+0x6a4>)
 80029f6:	4694      	mov	ip, r2
 80029f8:	4463      	add	r3, ip
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	2448      	movs	r4, #72	; 0x48
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	0592      	lsls	r2, r2, #22
 8002a02:	0d92      	lsrs	r2, r2, #22
 8002a04:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a14:	6959      	ldr	r1, [r3, #20]
 8002a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a18:	895a      	ldrh	r2, [r3, #10]
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	f003 fc9b 	bl	8006358 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	2148      	movs	r1, #72	; 0x48
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	18d2      	adds	r2, r2, r3
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <PCD_EP_ISR_Handler+0x524>
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f005 fc40 	bl	80082e2 <HAL_PCD_DataOutStageCallback>
 8002a62:	e006      	b.n	8002a72 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f002 fa3b 	bl	8004ee8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a72:	2452      	movs	r4, #82	; 0x52
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d100      	bne.n	8002a80 <PCD_EP_ISR_Handler+0x550>
 8002a7e:	e135      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a80:	2055      	movs	r0, #85	; 0x55
 8002a82:	183b      	adds	r3, r7, r0
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	0013      	movs	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	183b      	adds	r3, r7, r0
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2542      	movs	r5, #66	; 0x42
 8002aaa:	197b      	adds	r3, r7, r5
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <PCD_EP_ISR_Handler+0x6b4>)
 8002aae:	400a      	ands	r2, r1
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	183b      	adds	r3, r7, r0
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	18d3      	adds	r3, r2, r3
 8002ac0:	197a      	adds	r2, r7, r5
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	4948      	ldr	r1, [pc, #288]	; (8002be8 <PCD_EP_ISR_Handler+0x6b8>)
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d100      	bne.n	8002ad6 <PCD_EP_ISR_Handler+0x5a6>
 8002ad4:	e0ad      	b.n	8002c32 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d046      	beq.n	8002b74 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d125      	bne.n	8002b3a <PCD_EP_ISR_Handler+0x60a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2250      	movs	r2, #80	; 0x50
 8002afa:	5a9b      	ldrh	r3, [r3, r2]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	001a      	movs	r2, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00da      	lsls	r2, r3, #3
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	4a33      	ldr	r2, [pc, #204]	; (8002be0 <PCD_EP_ISR_Handler+0x6b0>)
 8002b12:	4694      	mov	ip, r2
 8002b14:	4463      	add	r3, ip
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4a33      	ldr	r2, [pc, #204]	; (8002bec <PCD_EP_ISR_Handler+0x6bc>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <PCD_EP_ISR_Handler+0x6b8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	e073      	b.n	8002c22 <PCD_EP_ISR_Handler+0x6f2>
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d16f      	bne.n	8002c22 <PCD_EP_ISR_Handler+0x6f2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2250      	movs	r2, #80	; 0x50
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	001a      	movs	r2, r3
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	18d3      	adds	r3, r2, r3
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <PCD_EP_ISR_Handler+0x6b0>)
 8002b66:	4694      	mov	ip, r2
 8002b68:	4463      	add	r3, ip
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e056      	b.n	8002c22 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d136      	bne.n	8002bf0 <PCD_EP_ISR_Handler+0x6c0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2250      	movs	r2, #80	; 0x50
 8002b8e:	5a9b      	ldrh	r3, [r3, r2]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	001a      	movs	r2, r3
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	00da      	lsls	r2, r3, #3
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	18d3      	adds	r3, r2, r3
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <PCD_EP_ISR_Handler+0x6a4>)
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	4463      	add	r3, ip
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <PCD_EP_ISR_Handler+0x6bc>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <PCD_EP_ISR_Handler+0x6b8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	e029      	b.n	8002c22 <PCD_EP_ISR_Handler+0x6f2>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	00000f8f 	.word	0x00000f8f
 8002bd4:	00000406 	.word	0x00000406
 8002bd8:	ffff8f8f 	.word	0xffff8f8f
 8002bdc:	ffff80c0 	.word	0xffff80c0
 8002be0:	00000402 	.word	0x00000402
 8002be4:	ffff8f0f 	.word	0xffff8f0f
 8002be8:	ffff8000 	.word	0xffff8000
 8002bec:	ffff83ff 	.word	0xffff83ff
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d114      	bne.n	8002c22 <PCD_EP_ISR_Handler+0x6f2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2250      	movs	r2, #80	; 0x50
 8002bfe:	5a9b      	ldrh	r3, [r3, r2]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	001a      	movs	r2, r3
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	00da      	lsls	r2, r3, #3
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	18d3      	adds	r3, r2, r3
 8002c14:	4a3d      	ldr	r2, [pc, #244]	; (8002d0c <PCD_EP_ISR_Handler+0x7dc>)
 8002c16:	4694      	mov	ip, r2
 8002c18:	4463      	add	r3, ip
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0011      	movs	r1, r2
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f005 fb7a 	bl	8008324 <HAL_PCD_DataInStageCallback>
 8002c30:	e05c      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d150      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x7ac>
 8002c3a:	2352      	movs	r3, #82	; 0x52
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	d149      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2250      	movs	r2, #80	; 0x50
 8002c4e:	5a9b      	ldrh	r3, [r3, r2]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	001a      	movs	r2, r3
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	18d2      	adds	r2, r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	18d3      	adds	r3, r2, r3
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <PCD_EP_ISR_Handler+0x7e0>)
 8002c64:	4694      	mov	ip, r2
 8002c66:	4463      	add	r3, ip
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	2140      	movs	r1, #64	; 0x40
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	0592      	lsls	r2, r2, #22
 8002c70:	0d92      	lsrs	r2, r2, #22
 8002c72:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d907      	bls.n	8002c90 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	1ad2      	subs	r2, r2, r3
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	619a      	str	r2, [r3, #24]
 8002c8e:	e002      	b.n	8002c96 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f005 fb3c 	bl	8008324 <HAL_PCD_DataInStageCallback>
 8002cac:	e01e      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	2140      	movs	r1, #64	; 0x40
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	18d2      	adds	r2, r2, r3
 8002cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	18d2      	adds	r2, r2, r3
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f002 f907 	bl	8004ee8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002cda:	e007      	b.n	8002cec <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002cdc:	2352      	movs	r3, #82	; 0x52
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f930 	bl	8002f4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2244      	movs	r2, #68	; 0x44
 8002cf2:	5a9b      	ldrh	r3, [r3, r2]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	da01      	bge.n	8002d00 <PCD_EP_ISR_Handler+0x7d0>
 8002cfc:	f7ff fc1e 	bl	800253c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b016      	add	sp, #88	; 0x58
 8002d08:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	00000406 	.word	0x00000406
 8002d10:	00000402 	.word	0x00000402

08002d14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	1dbb      	adds	r3, r7, #6
 8002d20:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d22:	1dbb      	adds	r3, r7, #6
 8002d24:	881a      	ldrh	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	01db      	lsls	r3, r3, #7
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d100      	bne.n	8002d30 <HAL_PCD_EP_DB_Receive+0x1c>
 8002d2e:	e07d      	b.n	8002e2c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2250      	movs	r2, #80	; 0x50
 8002d36:	5a9b      	ldrh	r3, [r3, r2]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	18d2      	adds	r2, r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_PCD_EP_DB_Receive+0x220>)
 8002d4c:	4694      	mov	ip, r2
 8002d4e:	4463      	add	r3, ip
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	211a      	movs	r1, #26
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	0592      	lsls	r2, r2, #22
 8002d58:	0d92      	lsrs	r2, r2, #22
 8002d5a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d307      	bcc.n	8002d78 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	619a      	str	r2, [r3, #24]
 8002d76:	e002      	b.n	8002d7e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d121      	bne.n	8002dca <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	2018      	movs	r0, #24
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	4966      	ldr	r1, [pc, #408]	; (8002f38 <HAL_PCD_EP_DB_Receive+0x224>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	183b      	adds	r3, r7, r0
 8002da4:	183a      	adds	r2, r7, r0
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0189      	lsls	r1, r1, #6
 8002dac:	404a      	eors	r2, r1
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	001a      	movs	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	18d3      	adds	r3, r2, r3
 8002dbe:	183a      	adds	r2, r7, r0
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	495e      	ldr	r1, [pc, #376]	; (8002f3c <HAL_PCD_EP_DB_Receive+0x228>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d01a      	beq.n	8002e0a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	001a      	movs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	2016      	movs	r0, #22
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	4955      	ldr	r1, [pc, #340]	; (8002f40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	001a      	movs	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	183a      	adds	r2, r7, r0
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	4950      	ldr	r1, [pc, #320]	; (8002f44 <HAL_PCD_EP_DB_Receive+0x230>)
 8002e04:	430a      	orrs	r2, r1
 8002e06:	b292      	uxth	r2, r2
 8002e08:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002e0a:	241a      	movs	r4, #26
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d100      	bne.n	8002e16 <HAL_PCD_EP_DB_Receive+0x102>
 8002e14:	e086      	b.n	8002f24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6959      	ldr	r1, [r3, #20]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	891a      	ldrh	r2, [r3, #8]
 8002e22:	193b      	adds	r3, r7, r4
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f003 fa97 	bl	8006358 <USB_ReadPMA>
 8002e2a:	e07b      	b.n	8002f24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2250      	movs	r2, #80	; 0x50
 8002e32:	5a9b      	ldrh	r3, [r3, r2]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	001a      	movs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	18d2      	adds	r2, r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	18d3      	adds	r3, r2, r3
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <HAL_PCD_EP_DB_Receive+0x234>)
 8002e48:	4694      	mov	ip, r2
 8002e4a:	4463      	add	r3, ip
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	211a      	movs	r1, #26
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	0592      	lsls	r2, r2, #22
 8002e54:	0d92      	lsrs	r2, r2, #22
 8002e56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d307      	bcc.n	8002e74 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	1ad2      	subs	r2, r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	619a      	str	r2, [r3, #24]
 8002e72:	e002      	b.n	8002e7a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d121      	bne.n	8002ec6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	001a      	movs	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	201e      	movs	r0, #30
 8002e96:	183b      	adds	r3, r7, r0
 8002e98:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_PCD_EP_DB_Receive+0x224>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	183a      	adds	r2, r7, r0
 8002ea2:	8812      	ldrh	r2, [r2, #0]
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	0189      	lsls	r1, r1, #6
 8002ea8:	404a      	eors	r2, r1
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	183a      	adds	r2, r7, r0
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	491f      	ldr	r1, [pc, #124]	; (8002f3c <HAL_PCD_EP_DB_Receive+0x228>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ec6:	1dbb      	adds	r3, r7, #6
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d11a      	bne.n	8002f06 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	201c      	movs	r0, #28
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	183a      	adds	r2, r7, r0
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	4911      	ldr	r1, [pc, #68]	; (8002f44 <HAL_PCD_EP_DB_Receive+0x230>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	b292      	uxth	r2, r2
 8002f04:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002f06:	241a      	movs	r4, #26
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6959      	ldr	r1, [r3, #20]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	895a      	ldrh	r2, [r3, #10]
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	f003 fa1a 	bl	8006358 <USB_ReadPMA>
    }
  }

  return count;
 8002f24:	231a      	movs	r3, #26
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	881b      	ldrh	r3, [r3, #0]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b009      	add	sp, #36	; 0x24
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	00000402 	.word	0x00000402
 8002f38:	ffffbf8f 	.word	0xffffbf8f
 8002f3c:	ffff8080 	.word	0xffff8080
 8002f40:	ffff8f8f 	.word	0xffff8f8f
 8002f44:	ffff80c0 	.word	0xffff80c0
 8002f48:	00000406 	.word	0x00000406

08002f4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0a2      	sub	sp, #136	; 0x88
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	1dbb      	adds	r3, r7, #6
 8002f58:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f5a:	1dbb      	adds	r3, r7, #6
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	4013      	ands	r3, r2
 8002f62:	d100      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002f64:	e1c8      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2250      	movs	r2, #80	; 0x50
 8002f6c:	5a9b      	ldrh	r3, [r3, r2]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	001a      	movs	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	18d2      	adds	r2, r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	18d3      	adds	r3, r2, r3
 8002f80:	4ad7      	ldr	r2, [pc, #860]	; (80032e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002f82:	4694      	mov	ip, r2
 8002f84:	4463      	add	r3, ip
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	214e      	movs	r1, #78	; 0x4e
 8002f8a:	187b      	adds	r3, r7, r1
 8002f8c:	0592      	lsls	r2, r2, #22
 8002f8e:	0d92      	lsrs	r2, r2, #22
 8002f90:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d907      	bls.n	8002fae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	e002      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d000      	beq.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x72>
 8002fbc:	e0b5      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d125      	bne.n	8003012 <HAL_PCD_EP_DB_Transmit+0xc6>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2250      	movs	r2, #80	; 0x50
 8002fd2:	5a9b      	ldrh	r3, [r3, r2]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	189b      	adds	r3, r3, r2
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00da      	lsls	r2, r3, #3
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	4abd      	ldr	r2, [pc, #756]	; (80032e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002fea:	4694      	mov	ip, r2
 8002fec:	4463      	add	r3, ip
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4abb      	ldr	r2, [pc, #748]	; (80032e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4ab8      	ldr	r2, [pc, #736]	; (80032e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	b29a      	uxth	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	e01b      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d117      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0xfe>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2250      	movs	r2, #80	; 0x50
 8003026:	5a9b      	ldrh	r3, [r3, r2]
 8003028:	b29b      	uxth	r3, r3
 800302a:	001a      	movs	r2, r3
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	189b      	adds	r3, r3, r2
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00da      	lsls	r2, r3, #3
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	18d3      	adds	r3, r2, r3
 800303c:	4aa8      	ldr	r2, [pc, #672]	; (80032e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 800303e:	4694      	mov	ip, r2
 8003040:	4463      	add	r3, ip
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d125      	bne.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x158>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2250      	movs	r2, #80	; 0x50
 8003064:	5a9b      	ldrh	r3, [r3, r2]
 8003066:	b29b      	uxth	r3, r3
 8003068:	001a      	movs	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	189b      	adds	r3, r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	00da      	lsls	r2, r3, #3
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	18d3      	adds	r3, r2, r3
 800307a:	4a9c      	ldr	r2, [pc, #624]	; (80032ec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800307c:	4694      	mov	ip, r2
 800307e:	4463      	add	r3, ip
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4a96      	ldr	r2, [pc, #600]	; (80032e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 800308a:	4013      	ands	r3, r2
 800308c:	b29a      	uxth	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4a93      	ldr	r2, [pc, #588]	; (80032e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	b29a      	uxth	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	e018      	b.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d114      	bne.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2250      	movs	r2, #80	; 0x50
 80030b2:	5a9b      	ldrh	r3, [r3, r2]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	001a      	movs	r2, r3
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	00da      	lsls	r2, r3, #3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	4a88      	ldr	r2, [pc, #544]	; (80032ec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80030ca:	4694      	mov	ip, r2
 80030cc:	4463      	add	r3, ip
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2200      	movs	r2, #0
 80030d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f005 f920 	bl	8008324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030e4:	1dbb      	adds	r3, r7, #6
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4013      	ands	r3, r2
 80030ee:	d100      	bne.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80030f0:	e2d4      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	001a      	movs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	18d3      	adds	r3, r2, r3
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29a      	uxth	r2, r3
 8003104:	2012      	movs	r0, #18
 8003106:	183b      	adds	r3, r7, r0
 8003108:	4979      	ldr	r1, [pc, #484]	; (80032f0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800310a:	400a      	ands	r2, r1
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	001a      	movs	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	18d3      	adds	r3, r2, r3
 800311c:	183a      	adds	r2, r7, r0
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	4974      	ldr	r1, [pc, #464]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003122:	430a      	orrs	r2, r1
 8003124:	b292      	uxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e2b8      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800312a:	1dbb      	adds	r3, r7, #6
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4013      	ands	r3, r2
 8003134:	d01a      	beq.n	800316c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	001a      	movs	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	18d3      	adds	r3, r2, r3
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29a      	uxth	r2, r3
 8003148:	2044      	movs	r0, #68	; 0x44
 800314a:	183b      	adds	r3, r7, r0
 800314c:	4968      	ldr	r1, [pc, #416]	; (80032f0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800314e:	400a      	ands	r2, r1
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	001a      	movs	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	18d3      	adds	r3, r2, r3
 8003160:	183a      	adds	r2, r7, r0
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	4963      	ldr	r1, [pc, #396]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003166:	430a      	orrs	r2, r1
 8003168:	b292      	uxth	r2, r2
 800316a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	5c9b      	ldrb	r3, [r3, r2]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d000      	beq.n	8003178 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003176:	e291      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	214e      	movs	r1, #78	; 0x4e
 800317e:	187b      	adds	r3, r7, r1
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	18d2      	adds	r2, r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	187b      	adds	r3, r7, r1
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	18d2      	adds	r2, r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d309      	bcc.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	621a      	str	r2, [r3, #32]
 80031b4:	e016      	b.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d108      	bne.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80031be:	234e      	movs	r3, #78	; 0x4e
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2224      	movs	r2, #36	; 0x24
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	e009      	b.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	2100      	movs	r1, #0
 80031d6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d150      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x342>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2250      	movs	r2, #80	; 0x50
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	001a      	movs	r2, r3
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	189b      	adds	r3, r3, r2
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	00da      	lsls	r2, r3, #3
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	18d3      	adds	r3, r2, r3
 800320e:	4a34      	ldr	r2, [pc, #208]	; (80032e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003210:	4694      	mov	ip, r2
 8003212:	4463      	add	r3, ip
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003218:	2b00      	cmp	r3, #0
 800321a:	d110      	bne.n	800323e <HAL_PCD_EP_DB_Transmit+0x2f2>
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003224:	4013      	ands	r3, r2
 8003226:	b29a      	uxth	r2, r3
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	801a      	strh	r2, [r3, #0]
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	b29a      	uxth	r2, r3
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	e044      	b.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003240:	2b3e      	cmp	r3, #62	; 0x3e
 8003242:	d810      	bhi.n	8003266 <HAL_PCD_EP_DB_Transmit+0x31a>
 8003244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
 800324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d002      	beq.n	8003258 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003254:	3301      	adds	r3, #1
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
 8003258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325a:	b29b      	uxth	r3, r3
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b29a      	uxth	r2, r3
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	801a      	strh	r2, [r3, #0]
 8003264:	e030      	b.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326e:	221f      	movs	r2, #31
 8003270:	4013      	ands	r3, r2
 8003272:	d102      	bne.n	800327a <HAL_PCD_EP_DB_Transmit+0x32e>
 8003274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003276:	3b01      	subs	r3, #1
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
 800327a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327c:	b29b      	uxth	r3, r3
 800327e:	029b      	lsls	r3, r3, #10
 8003280:	b29b      	uxth	r3, r3
 8003282:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	e01c      	b.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	785b      	ldrb	r3, [r3, #1]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d118      	bne.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2250      	movs	r2, #80	; 0x50
 80032a2:	5a9b      	ldrh	r3, [r3, r2]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	001a      	movs	r2, r3
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	643b      	str	r3, [r7, #64]	; 0x40
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	00da      	lsls	r2, r3, #3
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	18d3      	adds	r3, r2, r3
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80032ba:	4694      	mov	ip, r2
 80032bc:	4463      	add	r3, ip
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6959      	ldr	r1, [r3, #20]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	891a      	ldrh	r2, [r3, #8]
 80032d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f002 fffa 	bl	80062d0 <USB_WritePMA>
 80032dc:	e1de      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	00000402 	.word	0x00000402
 80032e4:	ffff83ff 	.word	0xffff83ff
 80032e8:	ffff8000 	.word	0xffff8000
 80032ec:	00000406 	.word	0x00000406
 80032f0:	ffff8f8f 	.word	0xffff8f8f
 80032f4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2250      	movs	r2, #80	; 0x50
 80032fe:	5a9b      	ldrh	r3, [r3, r2]
 8003300:	b29b      	uxth	r3, r3
 8003302:	001a      	movs	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	18d2      	adds	r2, r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	4aca      	ldr	r2, [pc, #808]	; (800363c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003314:	4694      	mov	ip, r2
 8003316:	4463      	add	r3, ip
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	214e      	movs	r1, #78	; 0x4e
 800331c:	187b      	adds	r3, r7, r1
 800331e:	0592      	lsls	r2, r2, #22
 8003320:	0d92      	lsrs	r2, r2, #22
 8003322:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	187b      	adds	r3, r7, r1
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d307      	bcc.n	8003340 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	187b      	adds	r3, r7, r1
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	1ad2      	subs	r2, r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	619a      	str	r2, [r3, #24]
 800333e:	e002      	b.n	8003346 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d000      	beq.n	8003350 <HAL_PCD_EP_DB_Transmit+0x404>
 800334e:	e0c0      	b.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d125      	bne.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x458>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2250      	movs	r2, #80	; 0x50
 8003364:	5a9b      	ldrh	r3, [r3, r2]
 8003366:	b29b      	uxth	r3, r3
 8003368:	001a      	movs	r2, r3
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	189b      	adds	r3, r3, r2
 800336e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	00da      	lsls	r2, r3, #3
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	4ab1      	ldr	r2, [pc, #708]	; (8003640 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800337c:	4694      	mov	ip, r2
 800337e:	4463      	add	r3, ip
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
 8003382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4aae      	ldr	r2, [pc, #696]	; (8003644 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800338a:	4013      	ands	r3, r2
 800338c:	b29a      	uxth	r2, r3
 800338e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4aab      	ldr	r2, [pc, #684]	; (8003648 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	b29a      	uxth	r2, r3
 800339e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	e01b      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x490>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d117      	bne.n	80033dc <HAL_PCD_EP_DB_Transmit+0x490>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	677b      	str	r3, [r7, #116]	; 0x74
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2250      	movs	r2, #80	; 0x50
 80033b8:	5a9b      	ldrh	r3, [r3, r2]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	001a      	movs	r2, r3
 80033be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	677b      	str	r3, [r7, #116]	; 0x74
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	00da      	lsls	r2, r3, #3
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	4a9c      	ldr	r2, [pc, #624]	; (8003640 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80033d0:	4694      	mov	ip, r2
 80033d2:	4463      	add	r3, ip
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
 80033d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d130      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x500>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	187a      	adds	r2, r7, r1
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2250      	movs	r2, #80	; 0x50
 80033fa:	5a9b      	ldrh	r3, [r3, r2]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	001a      	movs	r2, r3
 8003400:	187b      	adds	r3, r7, r1
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	189b      	adds	r3, r3, r2
 8003406:	187a      	adds	r2, r7, r1
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00da      	lsls	r2, r3, #3
 8003410:	187b      	adds	r3, r7, r1
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	4a89      	ldr	r2, [pc, #548]	; (800363c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003418:	4694      	mov	ip, r2
 800341a:	4463      	add	r3, ip
 800341c:	2184      	movs	r1, #132	; 0x84
 800341e:	187a      	adds	r2, r7, r1
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	187b      	adds	r3, r7, r1
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4a86      	ldr	r2, [pc, #536]	; (8003644 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800342c:	4013      	ands	r3, r2
 800342e:	b29a      	uxth	r2, r3
 8003430:	187b      	adds	r3, r7, r1
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	187b      	adds	r3, r7, r1
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4a82      	ldr	r2, [pc, #520]	; (8003648 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	187b      	adds	r3, r7, r1
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	e018      	b.n	800347e <HAL_PCD_EP_DB_Transmit+0x532>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d114      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x532>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2250      	movs	r2, #80	; 0x50
 800345a:	5a9b      	ldrh	r3, [r3, r2]
 800345c:	b29b      	uxth	r3, r3
 800345e:	001a      	movs	r2, r3
 8003460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003462:	189b      	adds	r3, r3, r2
 8003464:	67bb      	str	r3, [r7, #120]	; 0x78
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	00da      	lsls	r2, r3, #3
 800346c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346e:	18d3      	adds	r3, r2, r3
 8003470:	4a72      	ldr	r2, [pc, #456]	; (800363c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003472:	4694      	mov	ip, r2
 8003474:	4463      	add	r3, ip
 8003476:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003478:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800347a:	2200      	movs	r2, #0
 800347c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f004 ff4c 	bl	8008324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800348c:	1dbb      	adds	r3, r7, #6
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	4013      	ands	r3, r2
 8003496:	d000      	beq.n	800349a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003498:	e100      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	001a      	movs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	2046      	movs	r0, #70	; 0x46
 80034ae:	183b      	adds	r3, r7, r0
 80034b0:	4966      	ldr	r1, [pc, #408]	; (800364c <HAL_PCD_EP_DB_Transmit+0x700>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	001a      	movs	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	18d3      	adds	r3, r2, r3
 80034c4:	183a      	adds	r2, r7, r0
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	4961      	ldr	r1, [pc, #388]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x704>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	b292      	uxth	r2, r2
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	e0e4      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	01db      	lsls	r3, r3, #7
 80034da:	4013      	ands	r3, r2
 80034dc:	d11a      	bne.n	8003514 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	001a      	movs	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	18d3      	adds	r3, r2, r3
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	204c      	movs	r0, #76	; 0x4c
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	4955      	ldr	r1, [pc, #340]	; (800364c <HAL_PCD_EP_DB_Transmit+0x700>)
 80034f6:	400a      	ands	r2, r1
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	001a      	movs	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	183a      	adds	r2, r7, r0
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	4950      	ldr	r1, [pc, #320]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x704>)
 800350e:	430a      	orrs	r2, r1
 8003510:	b292      	uxth	r2, r2
 8003512:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	5c9b      	ldrb	r3, [r3, r2]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d000      	beq.n	8003520 <HAL_PCD_EP_DB_Transmit+0x5d4>
 800351e:	e0bd      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	214e      	movs	r1, #78	; 0x4e
 8003526:	187b      	adds	r3, r7, r1
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	18d2      	adds	r2, r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	187b      	adds	r3, r7, r1
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	18d2      	adds	r2, r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	429a      	cmp	r2, r3
 8003548:	d309      	bcc.n	800355e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003556:	1ad2      	subs	r2, r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	621a      	str	r2, [r3, #32]
 800355c:	e016      	b.n	800358c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003566:	234e      	movs	r3, #78	; 0x4e
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2224      	movs	r2, #36	; 0x24
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]
 8003576:	e009      	b.n	800358c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	2100      	movs	r1, #0
 800358a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	667b      	str	r3, [r7, #100]	; 0x64
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d15c      	bne.n	8003654 <HAL_PCD_EP_DB_Transmit+0x708>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2250      	movs	r2, #80	; 0x50
 80035a6:	5a9b      	ldrh	r3, [r3, r2]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	001a      	movs	r2, r3
 80035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00da      	lsls	r2, r3, #3
 80035b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	4a1f      	ldr	r2, [pc, #124]	; (800363c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80035be:	4694      	mov	ip, r2
 80035c0:	4463      	add	r3, ip
 80035c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d110      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x6a0>
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e04d      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x73c>
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	2b3e      	cmp	r3, #62	; 0x3e
 80035f0:	d810      	bhi.n	8003614 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	657b      	str	r3, [r7, #84]	; 0x54
 80035f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d002      	beq.n	8003606 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003602:	3301      	adds	r3, #1
 8003604:	657b      	str	r3, [r7, #84]	; 0x54
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	b29b      	uxth	r3, r3
 800360a:	029b      	lsls	r3, r3, #10
 800360c:	b29a      	uxth	r2, r3
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	e039      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	657b      	str	r3, [r7, #84]	; 0x54
 800361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361c:	221f      	movs	r2, #31
 800361e:	4013      	ands	r3, r2
 8003620:	d102      	bne.n	8003628 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	3b01      	subs	r3, #1
 8003626:	657b      	str	r3, [r7, #84]	; 0x54
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	b29b      	uxth	r3, r3
 800362c:	029b      	lsls	r3, r3, #10
 800362e:	b29b      	uxth	r3, r3
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	b29a      	uxth	r2, r3
 8003636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	e025      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x73c>
 800363c:	00000406 	.word	0x00000406
 8003640:	00000402 	.word	0x00000402
 8003644:	ffff83ff 	.word	0xffff83ff
 8003648:	ffff8000 	.word	0xffff8000
 800364c:	ffff8f8f 	.word	0xffff8f8f
 8003650:	ffffc080 	.word	0xffffc080
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d115      	bne.n	8003688 <HAL_PCD_EP_DB_Transmit+0x73c>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2250      	movs	r2, #80	; 0x50
 8003662:	5a9b      	ldrh	r3, [r3, r2]
 8003664:	b29b      	uxth	r3, r3
 8003666:	001a      	movs	r2, r3
 8003668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366a:	189b      	adds	r3, r3, r2
 800366c:	667b      	str	r3, [r7, #100]	; 0x64
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	00da      	lsls	r2, r3, #3
 8003674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003676:	18d3      	adds	r3, r2, r3
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800367a:	4694      	mov	ip, r2
 800367c:	4463      	add	r3, ip
 800367e:	663b      	str	r3, [r7, #96]	; 0x60
 8003680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003682:	b29a      	uxth	r2, r3
 8003684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003686:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6959      	ldr	r1, [r3, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	895a      	ldrh	r2, [r3, #10]
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	f002 fe1a 	bl	80062d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	001a      	movs	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	2010      	movs	r0, #16
 80036b0:	183b      	adds	r3, r7, r0
 80036b2:	4911      	ldr	r1, [pc, #68]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80036b4:	400a      	ands	r2, r1
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	183a      	adds	r2, r7, r0
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	2110      	movs	r1, #16
 80036c0:	404a      	eors	r2, r1
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	183a      	adds	r2, r7, r0
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	2120      	movs	r1, #32
 80036cc:	404a      	eors	r2, r1
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	001a      	movs	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	183a      	adds	r2, r7, r0
 80036e0:	8812      	ldrh	r2, [r2, #0]
 80036e2:	4906      	ldr	r1, [pc, #24]	; (80036fc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	b292      	uxth	r2, r2
 80036e8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b022      	add	sp, #136	; 0x88
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00000406 	.word	0x00000406
 80036f8:	ffff8fbf 	.word	0xffff8fbf
 80036fc:	ffff8080 	.word	0xffff8080

08003700 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	0008      	movs	r0, r1
 800370a:	0011      	movs	r1, r2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	240a      	movs	r4, #10
 8003710:	193b      	adds	r3, r7, r4
 8003712:	1c02      	adds	r2, r0, #0
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	2308      	movs	r3, #8
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	1c0a      	adds	r2, r1, #0
 800371c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800371e:	0021      	movs	r1, r4
 8003720:	187b      	adds	r3, r7, r1
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372e:	187b      	adds	r3, r7, r1
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2207      	movs	r2, #7
 8003734:	4013      	ands	r3, r2
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	0013      	movs	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	189b      	adds	r3, r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	18d3      	adds	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e00b      	b.n	8003760 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003748:	230a      	movs	r3, #10
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	0013      	movs	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	189b      	adds	r3, r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	3369      	adds	r3, #105	; 0x69
 8003758:	33ff      	adds	r3, #255	; 0xff
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003760:	2308      	movs	r3, #8
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	b29a      	uxth	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	80da      	strh	r2, [r3, #6]
 8003778:	e00b      	b.n	8003792 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2201      	movs	r2, #1
 800377e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	b29a      	uxth	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b29a      	uxth	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b007      	add	sp, #28
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	23ba      	movs	r3, #186	; 0xba
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	2101      	movs	r1, #1
 80037b2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	23b8      	movs	r3, #184	; 0xb8
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	2100      	movs	r1, #0
 80037bc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2254      	movs	r2, #84	; 0x54
 80037c2:	5a9b      	ldrh	r3, [r3, r2]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2201      	movs	r2, #1
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b299      	uxth	r1, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2254      	movs	r2, #84	; 0x54
 80037d0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2254      	movs	r2, #84	; 0x54
 80037d6:	5a9b      	ldrh	r3, [r3, r2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2202      	movs	r2, #2
 80037dc:	4313      	orrs	r3, r2
 80037de:	b299      	uxth	r1, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2254      	movs	r2, #84	; 0x54
 80037e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	000a      	movs	r2, r1
 80037fa:	1cfb      	adds	r3, r7, #3
 80037fc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b002      	add	sp, #8
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f000 fb76 	bl	8003f08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	d100      	bne.n	8003828 <HAL_RCC_OscConfig+0x20>
 8003826:	e08e      	b.n	8003946 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003828:	4bc5      	ldr	r3, [pc, #788]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	220c      	movs	r2, #12
 800382e:	4013      	ands	r3, r2
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00e      	beq.n	8003852 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003834:	4bc2      	ldr	r3, [pc, #776]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	220c      	movs	r2, #12
 800383a:	4013      	ands	r3, r2
 800383c:	2b08      	cmp	r3, #8
 800383e:	d117      	bne.n	8003870 <HAL_RCC_OscConfig+0x68>
 8003840:	4bbf      	ldr	r3, [pc, #764]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	23c0      	movs	r3, #192	; 0xc0
 8003846:	025b      	lsls	r3, r3, #9
 8003848:	401a      	ands	r2, r3
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	025b      	lsls	r3, r3, #9
 800384e:	429a      	cmp	r2, r3
 8003850:	d10e      	bne.n	8003870 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003852:	4bbb      	ldr	r3, [pc, #748]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	4013      	ands	r3, r2
 800385c:	d100      	bne.n	8003860 <HAL_RCC_OscConfig+0x58>
 800385e:	e071      	b.n	8003944 <HAL_RCC_OscConfig+0x13c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d000      	beq.n	800386a <HAL_RCC_OscConfig+0x62>
 8003868:	e06c      	b.n	8003944 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f000 fb4c 	bl	8003f08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x80>
 8003878:	4bb1      	ldr	r3, [pc, #708]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4bb0      	ldr	r3, [pc, #704]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	0249      	lsls	r1, r1, #9
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e02f      	b.n	80038e8 <HAL_RCC_OscConfig+0xe0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0xa2>
 8003890:	4bab      	ldr	r3, [pc, #684]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4baa      	ldr	r3, [pc, #680]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003896:	49ab      	ldr	r1, [pc, #684]	; (8003b44 <HAL_RCC_OscConfig+0x33c>)
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	4ba8      	ldr	r3, [pc, #672]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4ba7      	ldr	r3, [pc, #668]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038a2:	49a9      	ldr	r1, [pc, #676]	; (8003b48 <HAL_RCC_OscConfig+0x340>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e01e      	b.n	80038e8 <HAL_RCC_OscConfig+0xe0>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d10e      	bne.n	80038d0 <HAL_RCC_OscConfig+0xc8>
 80038b2:	4ba3      	ldr	r3, [pc, #652]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4ba2      	ldr	r3, [pc, #648]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	02c9      	lsls	r1, r1, #11
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	4b9f      	ldr	r3, [pc, #636]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b9e      	ldr	r3, [pc, #632]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	0249      	lsls	r1, r1, #9
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xe0>
 80038d0:	4b9b      	ldr	r3, [pc, #620]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b9a      	ldr	r3, [pc, #616]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038d6:	499b      	ldr	r1, [pc, #620]	; (8003b44 <HAL_RCC_OscConfig+0x33c>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	4b98      	ldr	r3, [pc, #608]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b97      	ldr	r3, [pc, #604]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80038e2:	4999      	ldr	r1, [pc, #612]	; (8003b48 <HAL_RCC_OscConfig+0x340>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d014      	beq.n	800391a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd f8be 	bl	8000a70 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fa:	f7fd f8b9 	bl	8000a70 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e2fd      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4013      	ands	r3, r2
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0xf2>
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fd f8a9 	bl	8000a70 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd f8a4 	bl	8000a70 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e2e8      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	4013      	ands	r3, r2
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x11c>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	d100      	bne.n	8003952 <HAL_RCC_OscConfig+0x14a>
 8003950:	e06c      	b.n	8003a2c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	220c      	movs	r2, #12
 8003958:	4013      	ands	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	220c      	movs	r2, #12
 8003962:	4013      	ands	r3, r2
 8003964:	2b08      	cmp	r3, #8
 8003966:	d11f      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1a0>
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	23c0      	movs	r3, #192	; 0xc0
 800396e:	025b      	lsls	r3, r3, #9
 8003970:	401a      	ands	r2, r3
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	429a      	cmp	r2, r3
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2202      	movs	r2, #2
 8003980:	4013      	ands	r3, r2
 8003982:	d005      	beq.n	8003990 <HAL_RCC_OscConfig+0x188>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e2bb      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22f8      	movs	r2, #248	; 0xf8
 8003996:	4393      	bics	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e041      	b.n	8003a2c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d024      	beq.n	80039fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd f858 	bl	8000a70 <HAL_GetTick>
 80039c0:	0003      	movs	r3, r0
 80039c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd f853 	bl	8000a70 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e297      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2202      	movs	r2, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d0f1      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e2:	4b57      	ldr	r3, [pc, #348]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	22f8      	movs	r2, #248	; 0xf8
 80039e8:	4393      	bics	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00da      	lsls	r2, r3, #3
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd f833 	bl	8000a70 <HAL_GetTick>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fd f82e 	bl	8000a70 <HAL_GetTick>
 8003a14:	0002      	movs	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e272      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2202      	movs	r2, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d1f1      	bne.n	8003a10 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4013      	ands	r3, r2
 8003a34:	d036      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d019      	beq.n	8003a72 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd f811 	bl	8000a70 <HAL_GetTick>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fd f80c 	bl	8000a70 <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e250      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d0f1      	beq.n	8003a54 <HAL_RCC_OscConfig+0x24c>
 8003a70:	e018      	b.n	8003aa4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	438a      	bics	r2, r1
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fc fff7 	bl	8000a70 <HAL_GetTick>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fc fff2 	bl	8000a70 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e236      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9a:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d1f1      	bne.n	8003a88 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2a8>
 8003aae:	e0b5      	b.n	8003c1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab0:	201f      	movs	r0, #31
 8003ab2:	183b      	adds	r3, r7, r0
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	055b      	lsls	r3, r3, #21
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d110      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0549      	lsls	r1, r1, #21
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	055b      	lsls	r3, r3, #21
 8003ada:	4013      	ands	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ae0:	183b      	adds	r3, r7, r0
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_OscConfig+0x344>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCC_OscConfig+0x344>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_RCC_OscConfig+0x344>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0049      	lsls	r1, r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b00:	f7fc ffb6 	bl	8000a70 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7fc ffb1 	bl	8000a70 <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	; 0x64
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1f5      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x344>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10f      	bne.n	8003b50 <HAL_RCC_OscConfig+0x348>
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <HAL_RCC_OscConfig+0x338>)
 8003b36:	2101      	movs	r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	621a      	str	r2, [r3, #32]
 8003b3c:	e036      	b.n	8003bac <HAL_RCC_OscConfig+0x3a4>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	fffbffff 	.word	0xfffbffff
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x36a>
 8003b58:	4bca      	ldr	r3, [pc, #808]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4bc9      	ldr	r3, [pc, #804]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	621a      	str	r2, [r3, #32]
 8003b64:	4bc7      	ldr	r3, [pc, #796]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	4bc6      	ldr	r3, [pc, #792]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	438a      	bics	r2, r1
 8003b6e:	621a      	str	r2, [r3, #32]
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x3a4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x38c>
 8003b7a:	4bc2      	ldr	r3, [pc, #776]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b7c:	6a1a      	ldr	r2, [r3, #32]
 8003b7e:	4bc1      	ldr	r3, [pc, #772]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b80:	2104      	movs	r1, #4
 8003b82:	430a      	orrs	r2, r1
 8003b84:	621a      	str	r2, [r3, #32]
 8003b86:	4bbf      	ldr	r3, [pc, #764]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	4bbe      	ldr	r3, [pc, #760]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	621a      	str	r2, [r3, #32]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x3a4>
 8003b94:	4bbb      	ldr	r3, [pc, #748]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	4bba      	ldr	r3, [pc, #744]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	621a      	str	r2, [r3, #32]
 8003ba0:	4bb8      	ldr	r3, [pc, #736]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	4bb7      	ldr	r3, [pc, #732]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003ba6:	2104      	movs	r1, #4
 8003ba8:	438a      	bics	r2, r1
 8003baa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d014      	beq.n	8003bde <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fc ff5c 	bl	8000a70 <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e009      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fc ff57 	bl	8000a70 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	4aaf      	ldr	r2, [pc, #700]	; (8003e88 <HAL_RCC_OscConfig+0x680>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e19a      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4bac      	ldr	r3, [pc, #688]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3b6>
 8003bdc:	e013      	b.n	8003c06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fc ff47 	bl	8000a70 <HAL_GetTick>
 8003be2:	0003      	movs	r3, r0
 8003be4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e009      	b.n	8003bfc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fc ff42 	bl	8000a70 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	4aa5      	ldr	r2, [pc, #660]	; (8003e88 <HAL_RCC_OscConfig+0x680>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e185      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	4ba1      	ldr	r3, [pc, #644]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	2202      	movs	r2, #2
 8003c02:	4013      	ands	r3, r2
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c06:	231f      	movs	r3, #31
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b9c      	ldr	r3, [pc, #624]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	4b9b      	ldr	r3, [pc, #620]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c16:	499d      	ldr	r1, [pc, #628]	; (8003e8c <HAL_RCC_OscConfig+0x684>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	4013      	ands	r3, r2
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d12a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c2e:	4b95      	ldr	r3, [pc, #596]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c32:	4b94      	ldr	r3, [pc, #592]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c34:	2104      	movs	r1, #4
 8003c36:	430a      	orrs	r2, r1
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c3a:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3e:	4b91      	ldr	r3, [pc, #580]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c40:	2101      	movs	r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fc ff13 	bl	8000a70 <HAL_GetTick>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c50:	f7fc ff0e 	bl	8000a70 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e152      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c62:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	2202      	movs	r2, #2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d0f1      	beq.n	8003c50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c6c:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	22f8      	movs	r2, #248	; 0xf8
 8003c72:	4393      	bics	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	00da      	lsls	r2, r3, #3
 8003c7c:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
 8003c82:	e034      	b.n	8003cee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	3305      	adds	r3, #5
 8003c8a:	d111      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c8c:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c92:	2104      	movs	r1, #4
 8003c94:	438a      	bics	r2, r1
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c98:	4b7a      	ldr	r3, [pc, #488]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	22f8      	movs	r2, #248	; 0xf8
 8003c9e:	4393      	bics	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	00da      	lsls	r2, r3, #3
 8003ca8:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003caa:	430a      	orrs	r2, r1
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
 8003cae:	e01e      	b.n	8003cee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cb0:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb4:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003cbc:	4b71      	ldr	r3, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	4b70      	ldr	r3, [pc, #448]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc8:	f7fc fed2 	bl	8000a70 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cd2:	f7fc fecd 	bl	8000a70 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e111      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ce4:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d1f1      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d05c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003cf8:	4b62      	ldr	r3, [pc, #392]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	220c      	movs	r2, #12
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d00e      	beq.n	8003d22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d04:	4b5f      	ldr	r3, [pc, #380]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	220c      	movs	r2, #12
 8003d0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d114      	bne.n	8003d3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d10:	4b5c      	ldr	r3, [pc, #368]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	23c0      	movs	r3, #192	; 0xc0
 8003d16:	025b      	lsls	r3, r3, #9
 8003d18:	401a      	ands	r2, r3
 8003d1a:	23c0      	movs	r3, #192	; 0xc0
 8003d1c:	025b      	lsls	r3, r3, #9
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003d22:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	025b      	lsls	r3, r3, #9
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_RCC_OscConfig+0x5a8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d03c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0e6      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003d42:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	0249      	lsls	r1, r1, #9
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fc fe8e 	bl	8000a70 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5a:	f7fc fe89 	bl	8000a70 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0cd      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	4013      	ands	r3, r2
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x552>
 8003d78:	e01b      	b.n	8003db2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003d7a:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003d80:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCC_OscConfig+0x688>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fc fe73 	bl	8000a70 <HAL_GetTick>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7fc fe6e 	bl	8000a70 <HAL_GetTick>
 8003d94:	0002      	movs	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b2      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003da2:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	4013      	ands	r3, r2
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x588>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003db0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d100      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5b4>
 8003dba:	e0a4      	b.n	8003f06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d100      	bne.n	8003dca <HAL_RCC_OscConfig+0x5c2>
 8003dc8:	e078      	b.n	8003ebc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d14c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003dd8:	492e      	ldr	r1, [pc, #184]	; (8003e94 <HAL_RCC_OscConfig+0x68c>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fc fe47 	bl	8000a70 <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fc fe42 	bl	8000a70 <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e086      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	049b      	lsls	r3, r3, #18
 8003e02:	4013      	ands	r3, r2
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e06:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e16:	430a      	orrs	r2, r1
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x690>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	0449      	lsls	r1, r1, #17
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fc fe15 	bl	8000a70 <HAL_GetTick>
 8003e46:	0003      	movs	r3, r0
 8003e48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fc fe10 	bl	8000a70 <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e054      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	049b      	lsls	r3, r3, #18
 8003e66:	4013      	ands	r3, r2
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x644>
 8003e6a:	e04c      	b.n	8003f06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <HAL_RCC_OscConfig+0x67c>)
 8003e72:	4908      	ldr	r1, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x68c>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fc fdfa 	bl	8000a70 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x6a6>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	40021000 	.word	0x40021000
 8003e88:	00001388 	.word	0x00001388
 8003e8c:	efffffff 	.word	0xefffffff
 8003e90:	fffeffff 	.word	0xfffeffff
 8003e94:	feffffff 	.word	0xfeffffff
 8003e98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fc fde8 	bl	8000a70 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e02c      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_RCC_OscConfig+0x708>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	049b      	lsls	r3, r3, #18
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x694>
 8003eba:	e024      	b.n	8003f06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e01f      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_RCC_OscConfig+0x708>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_OscConfig+0x708>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	23c0      	movs	r3, #192	; 0xc0
 8003ed8:	025b      	lsls	r3, r3, #9
 8003eda:	401a      	ands	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d10e      	bne.n	8003f02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	401a      	ands	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	23f0      	movs	r3, #240	; 0xf0
 8003ef6:	039b      	lsls	r3, r3, #14
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b008      	add	sp, #32
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000

08003f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0bf      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d911      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f48:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0a6      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	4013      	ands	r3, r2
 8003f62:	d015      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d006      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f6e:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003f74:	21e0      	movs	r1, #224	; 0xe0
 8003f76:	00c9      	lsls	r1, r1, #3
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	22f0      	movs	r2, #240	; 0xf0
 8003f82:	4393      	bics	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	4013      	ands	r3, r2
 8003f98:	d04c      	beq.n	8004034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	4013      	ands	r3, r2
 8003fac:	d120      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07a      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	049b      	lsls	r3, r3, #18
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d114      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e06e      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	025b      	lsls	r3, r3, #9
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e062      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e05b      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004004:	f7fc fd34 	bl	8000a70 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400c:	e009      	b.n	8004022 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400e:	f7fc fd2f 	bl	8000a70 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_RCC_ClockConfig+0x1a4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e042      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	220c      	movs	r2, #12
 8004028:	401a      	ands	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	429a      	cmp	r2, r3
 8004032:	d1ec      	bne.n	800400e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d211      	bcs.n	8004066 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4393      	bics	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <HAL_RCC_ClockConfig+0x19c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e020      	b.n	80040a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2204      	movs	r2, #4
 800406c:	4013      	ands	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_RCC_ClockConfig+0x1a8>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004084:	f000 f820 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004088:	0001      	movs	r1, r0
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x1a0>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	220f      	movs	r2, #15
 8004092:	4013      	ands	r3, r2
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1ac>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	000a      	movs	r2, r1
 800409a:	40da      	lsrs	r2, r3
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 800409e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040a0:	2003      	movs	r0, #3
 80040a2:	f7fc fc9f 	bl	80009e4 <HAL_InitTick>
  
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b004      	add	sp, #16
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40021000 	.word	0x40021000
 80040b8:	00001388 	.word	0x00001388
 80040bc:	fffff8ff 	.word	0xfffff8ff
 80040c0:	08008b0c 	.word	0x08008b0c
 80040c4:	20000000 	.word	0x20000000

080040c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b08f      	sub	sp, #60	; 0x3c
 80040cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80040ce:	2314      	movs	r3, #20
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_RCC_GetSysClockFreq+0xec>)
 80040d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040d6:	c313      	stmia	r3!, {r0, r1, r4}
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80040dc:	1d3b      	adds	r3, r7, #4
 80040de:	4a36      	ldr	r2, [pc, #216]	; (80041b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80040e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040e2:	c313      	stmia	r3!, {r0, r1, r4}
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	2300      	movs	r3, #0
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f0:	2300      	movs	r3, #0
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	220c      	movs	r2, #12
 8004106:	4013      	ands	r3, r2
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d047      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xd4>
 800410c:	d849      	bhi.n	80041a2 <HAL_RCC_GetSysClockFreq+0xda>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d002      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x50>
 8004112:	2b08      	cmp	r3, #8
 8004114:	d003      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x56>
 8004116:	e044      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800411c:	e044      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	0c9b      	lsrs	r3, r3, #18
 8004122:	220f      	movs	r2, #15
 8004124:	4013      	ands	r3, r2
 8004126:	2214      	movs	r2, #20
 8004128:	18ba      	adds	r2, r7, r2
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	220f      	movs	r2, #15
 8004134:	4013      	ands	r3, r2
 8004136:	1d3a      	adds	r2, r7, #4
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800413c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413e:	23c0      	movs	r3, #192	; 0xc0
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	401a      	ands	r2, r3
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	025b      	lsls	r3, r3, #9
 8004148:	429a      	cmp	r2, r3
 800414a:	d109      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800414c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800414e:	481c      	ldr	r0, [pc, #112]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004150:	f7fb ffda 	bl	8000108 <__udivsi3>
 8004154:	0003      	movs	r3, r0
 8004156:	001a      	movs	r2, r3
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	4353      	muls	r3, r2
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
 800415e:	e01a      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	025b      	lsls	r3, r3, #9
 8004166:	401a      	ands	r2, r3
 8004168:	23c0      	movs	r3, #192	; 0xc0
 800416a:	025b      	lsls	r3, r3, #9
 800416c:	429a      	cmp	r2, r3
 800416e:	d109      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004172:	4814      	ldr	r0, [pc, #80]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004174:	f7fb ffc8 	bl	8000108 <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	001a      	movs	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	4353      	muls	r3, r2
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
 8004182:	e008      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004186:	4810      	ldr	r0, [pc, #64]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004188:	f7fb ffbe 	bl	8000108 <__udivsi3>
 800418c:	0003      	movs	r3, r0
 800418e:	001a      	movs	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	4353      	muls	r3, r2
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800419a:	e005      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x100>)
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b00f      	add	sp, #60	; 0x3c
 80041b0:	bd90      	pop	{r4, r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	080089a8 	.word	0x080089a8
 80041b8:	080089b8 	.word	0x080089b8
 80041bc:	40021000 	.word	0x40021000
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	02dc6c00 	.word	0x02dc6c00
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	025b      	lsls	r3, r3, #9
 80041e4:	4013      	ands	r3, r2
 80041e6:	d100      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80041e8:	e08e      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2017      	movs	r0, #23
 80041ec:	183b      	adds	r3, r7, r0
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	055b      	lsls	r3, r3, #21
 80041fa:	4013      	ands	r3, r2
 80041fc:	d110      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041fe:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	0549      	lsls	r1, r1, #21
 8004208:	430a      	orrs	r2, r1
 800420a:	61da      	str	r2, [r3, #28]
 800420c:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	055b      	lsls	r3, r3, #21
 8004214:	4013      	ands	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	183b      	adds	r3, r7, r0
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d11a      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422c:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b5f      	ldr	r3, [pc, #380]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	0049      	lsls	r1, r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7fc fc19 	bl	8000a70 <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fc fc14 	bl	8000a70 <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0a6      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b56      	ldr	r3, [pc, #344]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4013      	ands	r3, r2
 8004260:	d0f0      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004262:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	23c0      	movs	r3, #192	; 0xc0
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d034      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	23c0      	movs	r3, #192	; 0xc0
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4013      	ands	r3, r2
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	429a      	cmp	r2, r3
 8004282:	d02c      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004284:	4b49      	ldr	r3, [pc, #292]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800428a:	4013      	ands	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0249      	lsls	r1, r1, #9
 8004298:	430a      	orrs	r2, r1
 800429a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042a2:	4945      	ldr	r1, [pc, #276]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fc fbdb 	bl	8000a70 <HAL_GetTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	e009      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fc fbd6 	bl	8000a70 <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e067      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	2202      	movs	r2, #2
 80042da:	4013      	ands	r3, r2
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	4b33      	ldr	r3, [pc, #204]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4a34      	ldr	r2, [pc, #208]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042f2:	2317      	movs	r3, #23
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004302:	492f      	ldr	r1, [pc, #188]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004304:	400a      	ands	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	4013      	ands	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	2203      	movs	r2, #3
 8004318:	4393      	bics	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	4b22      	ldr	r3, [pc, #136]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004322:	430a      	orrs	r2, r1
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2202      	movs	r2, #2
 800432c:	4013      	ands	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4a23      	ldr	r2, [pc, #140]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004340:	430a      	orrs	r2, r1
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2220      	movs	r2, #32
 800434a:	4013      	ands	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2210      	movs	r2, #16
 8004354:	4393      	bics	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800435e:	430a      	orrs	r2, r1
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	029b      	lsls	r3, r3, #10
 800436a:	4013      	ands	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	4393      	bics	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800437e:	430a      	orrs	r2, r1
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4013      	ands	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
 80043b4:	fffffcff 	.word	0xfffffcff
 80043b8:	fffeffff 	.word	0xfffeffff
 80043bc:	00001388 	.word	0x00001388
 80043c0:	efffffff 	.word	0xefffffff
 80043c4:	fffcffff 	.word	0xfffcffff

080043c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2244      	movs	r2, #68	; 0x44
 80043d4:	2100      	movs	r1, #0
 80043d6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <USB_EnableGlobalInt+0x28>)
 80043da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	b299      	uxth	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0000bf80 	.word	0x0000bf80

080043f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <USB_DisableGlobalInt+0x30>)
 80043fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2240      	movs	r2, #64	; 0x40
 8004404:	5a9b      	ldrh	r3, [r3, r2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	b292      	uxth	r2, r2
 800440c:	43d2      	mvns	r2, r2
 800440e:	b292      	uxth	r2, r2
 8004410:	4013      	ands	r3, r2
 8004412:	b299      	uxth	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b004      	add	sp, #16
 8004422:	bd80      	pop	{r7, pc}
 8004424:	0000bf80 	.word	0x0000bf80

08004428 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004428:	b084      	sub	sp, #16
 800442a:	b590      	push	{r4, r7, lr}
 800442c:	46c6      	mov	lr, r8
 800442e:	b500      	push	{lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	2004      	movs	r0, #4
 8004438:	2410      	movs	r4, #16
 800443a:	46a4      	mov	ip, r4
 800443c:	2408      	movs	r4, #8
 800443e:	46a0      	mov	r8, r4
 8004440:	44b8      	add	r8, r7
 8004442:	44c4      	add	ip, r8
 8004444:	4460      	add	r0, ip
 8004446:	6001      	str	r1, [r0, #0]
 8004448:	6042      	str	r2, [r0, #4]
 800444a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2240      	movs	r2, #64	; 0x40
 8004450:	2101      	movs	r1, #1
 8004452:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	2100      	movs	r1, #0
 800445a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2244      	movs	r2, #68	; 0x44
 8004460:	2100      	movs	r1, #0
 8004462:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2250      	movs	r2, #80	; 0x50
 8004468:	2100      	movs	r1, #0
 800446a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bc80      	pop	{r7}
 8004476:	46b8      	mov	r8, r7
 8004478:	bc90      	pop	{r4, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	b004      	add	sp, #16
 800447e:	4718      	bx	r3

08004480 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b09c      	sub	sp, #112	; 0x70
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800448a:	236f      	movs	r3, #111	; 0x6f
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	18d3      	adds	r3, r2, r3
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	236c      	movs	r3, #108	; 0x6c
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	49cf      	ldr	r1, [pc, #828]	; (80047e4 <USB_ActivateEndpoint+0x364>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	78db      	ldrb	r3, [r3, #3]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <USB_ActivateEndpoint+0x62>
 80044b2:	dc28      	bgt.n	8004506 <USB_ActivateEndpoint+0x86>
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d00e      	beq.n	80044d6 <USB_ActivateEndpoint+0x56>
 80044b8:	dc25      	bgt.n	8004506 <USB_ActivateEndpoint+0x86>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <USB_ActivateEndpoint+0x44>
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d018      	beq.n	80044f4 <USB_ActivateEndpoint+0x74>
 80044c2:	e020      	b.n	8004506 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044c4:	226c      	movs	r2, #108	; 0x6c
 80044c6:	18bb      	adds	r3, r7, r2
 80044c8:	18ba      	adds	r2, r7, r2
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	0089      	lsls	r1, r1, #2
 80044d0:	430a      	orrs	r2, r1
 80044d2:	801a      	strh	r2, [r3, #0]
      break;
 80044d4:	e01c      	b.n	8004510 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80044d6:	226c      	movs	r2, #108	; 0x6c
 80044d8:	18bb      	adds	r3, r7, r2
 80044da:	18ba      	adds	r2, r7, r2
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	801a      	strh	r2, [r3, #0]
      break;
 80044e0:	e016      	b.n	8004510 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044e2:	226c      	movs	r2, #108	; 0x6c
 80044e4:	18bb      	adds	r3, r7, r2
 80044e6:	18ba      	adds	r2, r7, r2
 80044e8:	8812      	ldrh	r2, [r2, #0]
 80044ea:	21c0      	movs	r1, #192	; 0xc0
 80044ec:	00c9      	lsls	r1, r1, #3
 80044ee:	430a      	orrs	r2, r1
 80044f0:	801a      	strh	r2, [r3, #0]
      break;
 80044f2:	e00d      	b.n	8004510 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044f4:	226c      	movs	r2, #108	; 0x6c
 80044f6:	18bb      	adds	r3, r7, r2
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	00c9      	lsls	r1, r1, #3
 8004500:	430a      	orrs	r2, r1
 8004502:	801a      	strh	r2, [r3, #0]
      break;
 8004504:	e004      	b.n	8004510 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004506:	236f      	movs	r3, #111	; 0x6f
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
      break;
 800450e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	18d3      	adds	r3, r2, r3
 800451a:	226c      	movs	r2, #108	; 0x6c
 800451c:	18ba      	adds	r2, r7, r2
 800451e:	8812      	ldrh	r2, [r2, #0]
 8004520:	49b1      	ldr	r1, [pc, #708]	; (80047e8 <USB_ActivateEndpoint+0x368>)
 8004522:	430a      	orrs	r2, r1
 8004524:	b292      	uxth	r2, r2
 8004526:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	b21b      	sxth	r3, r3
 8004538:	4aac      	ldr	r2, [pc, #688]	; (80047ec <USB_ActivateEndpoint+0x36c>)
 800453a:	4013      	ands	r3, r2
 800453c:	b21a      	sxth	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b21b      	sxth	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b21a      	sxth	r2, r3
 8004548:	2166      	movs	r1, #102	; 0x66
 800454a:	187b      	adds	r3, r7, r1
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	187a      	adds	r2, r7, r1
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	49a2      	ldr	r1, [pc, #648]	; (80047e8 <USB_ActivateEndpoint+0x368>)
 800455e:	430a      	orrs	r2, r1
 8004560:	b292      	uxth	r2, r2
 8004562:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	7b1b      	ldrb	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d000      	beq.n	800456e <USB_ActivateEndpoint+0xee>
 800456c:	e150      	b.n	8004810 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d100      	bne.n	8004578 <USB_ActivateEndpoint+0xf8>
 8004576:	e07a      	b.n	800466e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2250      	movs	r2, #80	; 0x50
 8004580:	5a9b      	ldrh	r3, [r3, r2]
 8004582:	b29b      	uxth	r3, r3
 8004584:	001a      	movs	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	189b      	adds	r3, r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	00da      	lsls	r2, r3, #3
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	18d3      	adds	r3, r2, r3
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	00d2      	lsls	r2, r2, #3
 800459a:	4694      	mov	ip, r2
 800459c:	4463      	add	r3, ip
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	88db      	ldrh	r3, [r3, #6]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	18db      	adds	r3, r3, r3
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	18d2      	adds	r2, r2, r3
 80045ba:	2112      	movs	r1, #18
 80045bc:	187b      	adds	r3, r7, r1
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	187b      	adds	r3, r7, r1
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2240      	movs	r2, #64	; 0x40
 80045c8:	4013      	ands	r3, r2
 80045ca:	d016      	beq.n	80045fa <USB_ActivateEndpoint+0x17a>
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	2010      	movs	r0, #16
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	4983      	ldr	r1, [pc, #524]	; (80047ec <USB_ActivateEndpoint+0x36c>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	18d3      	adds	r3, r2, r3
 80045ee:	183a      	adds	r2, r7, r0
 80045f0:	8812      	ldrh	r2, [r2, #0]
 80045f2:	497f      	ldr	r1, [pc, #508]	; (80047f0 <USB_ActivateEndpoint+0x370>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	b292      	uxth	r2, r2
 80045f8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d01d      	beq.n	800463e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	18d3      	adds	r3, r2, r3
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	200c      	movs	r0, #12
 8004612:	183b      	adds	r3, r7, r0
 8004614:	4977      	ldr	r1, [pc, #476]	; (80047f4 <USB_ActivateEndpoint+0x374>)
 8004616:	400a      	ands	r2, r1
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	183b      	adds	r3, r7, r0
 800461c:	183a      	adds	r2, r7, r0
 800461e:	8812      	ldrh	r2, [r2, #0]
 8004620:	2120      	movs	r1, #32
 8004622:	404a      	eors	r2, r1
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	183a      	adds	r2, r7, r0
 8004632:	8812      	ldrh	r2, [r2, #0]
 8004634:	496c      	ldr	r1, [pc, #432]	; (80047e8 <USB_ActivateEndpoint+0x368>)
 8004636:	430a      	orrs	r2, r1
 8004638:	b292      	uxth	r2, r2
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	e27a      	b.n	8004b34 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	18d3      	adds	r3, r2, r3
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29a      	uxth	r2, r3
 800464c:	200e      	movs	r0, #14
 800464e:	183b      	adds	r3, r7, r0
 8004650:	4968      	ldr	r1, [pc, #416]	; (80047f4 <USB_ActivateEndpoint+0x374>)
 8004652:	400a      	ands	r2, r1
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	18d3      	adds	r3, r2, r3
 8004660:	183a      	adds	r2, r7, r0
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	4960      	ldr	r1, [pc, #384]	; (80047e8 <USB_ActivateEndpoint+0x368>)
 8004666:	430a      	orrs	r2, r1
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e262      	b.n	8004b34 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2250      	movs	r2, #80	; 0x50
 8004676:	5a9b      	ldrh	r3, [r3, r2]
 8004678:	b29b      	uxth	r3, r3
 800467a:	001a      	movs	r2, r3
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	189b      	adds	r3, r3, r2
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	00da      	lsls	r2, r3, #3
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <USB_ActivateEndpoint+0x378>)
 800468e:	4694      	mov	ip, r2
 8004690:	4463      	add	r3, ip
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	88db      	ldrh	r3, [r3, #6]
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	18db      	adds	r3, r3, r3
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2250      	movs	r2, #80	; 0x50
 80046ac:	5a9b      	ldrh	r3, [r3, r2]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	001a      	movs	r2, r3
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	00da      	lsls	r2, r3, #3
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	18d3      	adds	r3, r2, r3
 80046c2:	4a4e      	ldr	r2, [pc, #312]	; (80047fc <USB_ActivateEndpoint+0x37c>)
 80046c4:	4694      	mov	ip, r2
 80046c6:	4463      	add	r3, ip
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d110      	bne.n	80046f4 <USB_ActivateEndpoint+0x274>
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	4a49      	ldr	r2, [pc, #292]	; (8004800 <USB_ActivateEndpoint+0x380>)
 80046da:	4013      	ands	r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4a46      	ldr	r2, [pc, #280]	; (8004804 <USB_ActivateEndpoint+0x384>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e02b      	b.n	800474c <USB_ActivateEndpoint+0x2cc>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b3e      	cmp	r3, #62	; 0x3e
 80046fa:	d812      	bhi.n	8004722 <USB_ActivateEndpoint+0x2a2>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	d002      	beq.n	8004714 <USB_ActivateEndpoint+0x294>
 800470e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004710:	3301      	adds	r3, #1
 8004712:	66bb      	str	r3, [r7, #104]	; 0x68
 8004714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004716:	b29b      	uxth	r3, r3
 8004718:	029b      	lsls	r3, r3, #10
 800471a:	b29a      	uxth	r2, r3
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e014      	b.n	800474c <USB_ActivateEndpoint+0x2cc>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	66bb      	str	r3, [r7, #104]	; 0x68
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	221f      	movs	r2, #31
 8004730:	4013      	ands	r3, r2
 8004732:	d102      	bne.n	800473a <USB_ActivateEndpoint+0x2ba>
 8004734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004736:	3b01      	subs	r3, #1
 8004738:	66bb      	str	r3, [r7, #104]	; 0x68
 800473a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29b      	uxth	r3, r3
 8004742:	4a30      	ldr	r2, [pc, #192]	; (8004804 <USB_ActivateEndpoint+0x384>)
 8004744:	4313      	orrs	r3, r2
 8004746:	b29a      	uxth	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	18d2      	adds	r2, r2, r3
 8004756:	2122      	movs	r1, #34	; 0x22
 8004758:	187b      	adds	r3, r7, r1
 800475a:	8812      	ldrh	r2, [r2, #0]
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	187b      	adds	r3, r7, r1
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	4013      	ands	r3, r2
 8004768:	d016      	beq.n	8004798 <USB_ActivateEndpoint+0x318>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	18d3      	adds	r3, r2, r3
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29a      	uxth	r2, r3
 8004778:	2020      	movs	r0, #32
 800477a:	183b      	adds	r3, r7, r0
 800477c:	491b      	ldr	r1, [pc, #108]	; (80047ec <USB_ActivateEndpoint+0x36c>)
 800477e:	400a      	ands	r2, r1
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	183a      	adds	r2, r7, r0
 800478e:	8812      	ldrh	r2, [r2, #0]
 8004790:	491d      	ldr	r1, [pc, #116]	; (8004808 <USB_ActivateEndpoint+0x388>)
 8004792:	430a      	orrs	r2, r1
 8004794:	b292      	uxth	r2, r2
 8004796:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	18d3      	adds	r3, r2, r3
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	201e      	movs	r0, #30
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	4918      	ldr	r1, [pc, #96]	; (800480c <USB_ActivateEndpoint+0x38c>)
 80047ac:	400a      	ands	r2, r1
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	183a      	adds	r2, r7, r0
 80047b4:	8812      	ldrh	r2, [r2, #0]
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	0149      	lsls	r1, r1, #5
 80047ba:	404a      	eors	r2, r1
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	183b      	adds	r3, r7, r0
 80047c0:	183a      	adds	r2, r7, r0
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	0189      	lsls	r1, r1, #6
 80047c8:	404a      	eors	r2, r1
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	183a      	adds	r2, r7, r0
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	4903      	ldr	r1, [pc, #12]	; (80047e8 <USB_ActivateEndpoint+0x368>)
 80047dc:	430a      	orrs	r2, r1
 80047de:	b292      	uxth	r2, r2
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e1a7      	b.n	8004b34 <USB_ActivateEndpoint+0x6b4>
 80047e4:	ffff898f 	.word	0xffff898f
 80047e8:	ffff8080 	.word	0xffff8080
 80047ec:	ffff8f8f 	.word	0xffff8f8f
 80047f0:	ffff80c0 	.word	0xffff80c0
 80047f4:	ffff8fbf 	.word	0xffff8fbf
 80047f8:	00000404 	.word	0x00000404
 80047fc:	00000406 	.word	0x00000406
 8004800:	ffff83ff 	.word	0xffff83ff
 8004804:	ffff8000 	.word	0xffff8000
 8004808:	ffffc080 	.word	0xffffc080
 800480c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d117      	bne.n	8004848 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29a      	uxth	r2, r3
 8004826:	2062      	movs	r0, #98	; 0x62
 8004828:	183b      	adds	r3, r7, r0
 800482a:	49c6      	ldr	r1, [pc, #792]	; (8004b44 <USB_ActivateEndpoint+0x6c4>)
 800482c:	400a      	ands	r2, r1
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	18d3      	adds	r3, r2, r3
 800483a:	183a      	adds	r2, r7, r0
 800483c:	8812      	ldrh	r2, [r2, #0]
 800483e:	49c2      	ldr	r1, [pc, #776]	; (8004b48 <USB_ActivateEndpoint+0x6c8>)
 8004840:	430a      	orrs	r2, r1
 8004842:	b292      	uxth	r2, r2
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e016      	b.n	8004876 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	18d3      	adds	r3, r2, r3
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29a      	uxth	r2, r3
 8004856:	2064      	movs	r0, #100	; 0x64
 8004858:	183b      	adds	r3, r7, r0
 800485a:	49bc      	ldr	r1, [pc, #752]	; (8004b4c <USB_ActivateEndpoint+0x6cc>)
 800485c:	400a      	ands	r2, r1
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	18d3      	adds	r3, r2, r3
 800486a:	183a      	adds	r2, r7, r0
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	49b8      	ldr	r1, [pc, #736]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 8004870:	430a      	orrs	r2, r1
 8004872:	b292      	uxth	r2, r2
 8004874:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2250      	movs	r2, #80	; 0x50
 800487e:	5a9b      	ldrh	r3, [r3, r2]
 8004880:	b29b      	uxth	r3, r3
 8004882:	001a      	movs	r2, r3
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	189b      	adds	r3, r3, r2
 8004888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00da      	lsls	r2, r3, #3
 8004890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	2280      	movs	r2, #128	; 0x80
 8004896:	00d2      	lsls	r2, r2, #3
 8004898:	4694      	mov	ip, r2
 800489a:	4463      	add	r3, ip
 800489c:	65bb      	str	r3, [r7, #88]	; 0x58
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	891b      	ldrh	r3, [r3, #8]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	18db      	adds	r3, r3, r3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	657b      	str	r3, [r7, #84]	; 0x54
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2250      	movs	r2, #80	; 0x50
 80048b6:	5a9b      	ldrh	r3, [r3, r2]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	001a      	movs	r2, r3
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	657b      	str	r3, [r7, #84]	; 0x54
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	00da      	lsls	r2, r3, #3
 80048c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ca:	18d3      	adds	r3, r2, r3
 80048cc:	4aa1      	ldr	r2, [pc, #644]	; (8004b54 <USB_ActivateEndpoint+0x6d4>)
 80048ce:	4694      	mov	ip, r2
 80048d0:	4463      	add	r3, ip
 80048d2:	653b      	str	r3, [r7, #80]	; 0x50
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	895b      	ldrh	r3, [r3, #10]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	18db      	adds	r3, r3, r3
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d000      	beq.n	80048ee <USB_ActivateEndpoint+0x46e>
 80048ec:	e087      	b.n	80049fe <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	18d2      	adds	r2, r2, r3
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	187b      	adds	r3, r7, r1
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	01db      	lsls	r3, r3, #7
 8004908:	4013      	ands	r3, r2
 800490a:	d016      	beq.n	800493a <USB_ActivateEndpoint+0x4ba>
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29a      	uxth	r2, r3
 800491a:	203e      	movs	r0, #62	; 0x3e
 800491c:	183b      	adds	r3, r7, r0
 800491e:	4989      	ldr	r1, [pc, #548]	; (8004b44 <USB_ActivateEndpoint+0x6c4>)
 8004920:	400a      	ands	r2, r1
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	183a      	adds	r2, r7, r0
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	4989      	ldr	r1, [pc, #548]	; (8004b58 <USB_ActivateEndpoint+0x6d8>)
 8004934:	430a      	orrs	r2, r1
 8004936:	b292      	uxth	r2, r2
 8004938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	213c      	movs	r1, #60	; 0x3c
 8004946:	187b      	adds	r3, r7, r1
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	187b      	adds	r3, r7, r1
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	4013      	ands	r3, r2
 8004954:	d016      	beq.n	8004984 <USB_ActivateEndpoint+0x504>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	18d3      	adds	r3, r2, r3
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29a      	uxth	r2, r3
 8004964:	203a      	movs	r0, #58	; 0x3a
 8004966:	183b      	adds	r3, r7, r0
 8004968:	4976      	ldr	r1, [pc, #472]	; (8004b44 <USB_ActivateEndpoint+0x6c4>)
 800496a:	400a      	ands	r2, r1
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	18d3      	adds	r3, r2, r3
 8004978:	183a      	adds	r2, r7, r0
 800497a:	8812      	ldrh	r2, [r2, #0]
 800497c:	4977      	ldr	r1, [pc, #476]	; (8004b5c <USB_ActivateEndpoint+0x6dc>)
 800497e:	430a      	orrs	r2, r1
 8004980:	b292      	uxth	r2, r2
 8004982:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	18d3      	adds	r3, r2, r3
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	2038      	movs	r0, #56	; 0x38
 8004994:	183b      	adds	r3, r7, r0
 8004996:	4972      	ldr	r1, [pc, #456]	; (8004b60 <USB_ActivateEndpoint+0x6e0>)
 8004998:	400a      	ands	r2, r1
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	183b      	adds	r3, r7, r0
 800499e:	183a      	adds	r2, r7, r0
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0149      	lsls	r1, r1, #5
 80049a6:	404a      	eors	r2, r1
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	183b      	adds	r3, r7, r0
 80049ac:	183a      	adds	r2, r7, r0
 80049ae:	8812      	ldrh	r2, [r2, #0]
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	0189      	lsls	r1, r1, #6
 80049b4:	404a      	eors	r2, r1
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	183a      	adds	r2, r7, r0
 80049c4:	8812      	ldrh	r2, [r2, #0]
 80049c6:	4962      	ldr	r1, [pc, #392]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 80049c8:	430a      	orrs	r2, r1
 80049ca:	b292      	uxth	r2, r2
 80049cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	18d3      	adds	r3, r2, r3
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	2036      	movs	r0, #54	; 0x36
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	4960      	ldr	r1, [pc, #384]	; (8004b64 <USB_ActivateEndpoint+0x6e4>)
 80049e2:	400a      	ands	r2, r1
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	18d3      	adds	r3, r2, r3
 80049f0:	183a      	adds	r2, r7, r0
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	4956      	ldr	r1, [pc, #344]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	b292      	uxth	r2, r2
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e09a      	b.n	8004b34 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	18d2      	adds	r2, r2, r3
 8004a08:	214e      	movs	r1, #78	; 0x4e
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	8812      	ldrh	r2, [r2, #0]
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	881a      	ldrh	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d016      	beq.n	8004a4a <USB_ActivateEndpoint+0x5ca>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	204c      	movs	r0, #76	; 0x4c
 8004a2c:	183b      	adds	r3, r7, r0
 8004a2e:	4945      	ldr	r1, [pc, #276]	; (8004b44 <USB_ActivateEndpoint+0x6c4>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	18d3      	adds	r3, r2, r3
 8004a3e:	183a      	adds	r2, r7, r0
 8004a40:	8812      	ldrh	r2, [r2, #0]
 8004a42:	4945      	ldr	r1, [pc, #276]	; (8004b58 <USB_ActivateEndpoint+0x6d8>)
 8004a44:	430a      	orrs	r2, r1
 8004a46:	b292      	uxth	r2, r2
 8004a48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	18d2      	adds	r2, r2, r3
 8004a54:	214a      	movs	r1, #74	; 0x4a
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	2240      	movs	r2, #64	; 0x40
 8004a62:	4013      	ands	r3, r2
 8004a64:	d016      	beq.n	8004a94 <USB_ActivateEndpoint+0x614>
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18d3      	adds	r3, r2, r3
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	2048      	movs	r0, #72	; 0x48
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	4932      	ldr	r1, [pc, #200]	; (8004b44 <USB_ActivateEndpoint+0x6c4>)
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	18d3      	adds	r3, r2, r3
 8004a88:	183a      	adds	r2, r7, r0
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	4933      	ldr	r1, [pc, #204]	; (8004b5c <USB_ActivateEndpoint+0x6dc>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	b292      	uxth	r2, r2
 8004a92:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	78db      	ldrb	r3, [r3, #3]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d01d      	beq.n	8004ad8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	18d3      	adds	r3, r2, r3
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	2044      	movs	r0, #68	; 0x44
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <USB_ActivateEndpoint+0x6e4>)
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	183b      	adds	r3, r7, r0
 8004ab6:	183a      	adds	r2, r7, r0
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	2120      	movs	r1, #32
 8004abc:	404a      	eors	r2, r1
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	183a      	adds	r2, r7, r0
 8004acc:	8812      	ldrh	r2, [r2, #0]
 8004ace:	4920      	ldr	r1, [pc, #128]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	e016      	b.n	8004b06 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	2046      	movs	r0, #70	; 0x46
 8004ae8:	183b      	adds	r3, r7, r0
 8004aea:	491e      	ldr	r1, [pc, #120]	; (8004b64 <USB_ActivateEndpoint+0x6e4>)
 8004aec:	400a      	ands	r2, r1
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	183a      	adds	r2, r7, r0
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	4914      	ldr	r1, [pc, #80]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	b292      	uxth	r2, r2
 8004b04:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	2042      	movs	r0, #66	; 0x42
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	4911      	ldr	r1, [pc, #68]	; (8004b60 <USB_ActivateEndpoint+0x6e0>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	183a      	adds	r2, r7, r0
 8004b2a:	8812      	ldrh	r2, [r2, #0]
 8004b2c:	4908      	ldr	r1, [pc, #32]	; (8004b50 <USB_ActivateEndpoint+0x6d0>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	b292      	uxth	r2, r2
 8004b32:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004b34:	236f      	movs	r3, #111	; 0x6f
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	781b      	ldrb	r3, [r3, #0]
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b01c      	add	sp, #112	; 0x70
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	ffff8f8f 	.word	0xffff8f8f
 8004b48:	ffff8180 	.word	0xffff8180
 8004b4c:	ffff8e8f 	.word	0xffff8e8f
 8004b50:	ffff8080 	.word	0xffff8080
 8004b54:	00000404 	.word	0x00000404
 8004b58:	ffffc080 	.word	0xffffc080
 8004b5c:	ffff80c0 	.word	0xffff80c0
 8004b60:	ffffbf8f 	.word	0xffffbf8f
 8004b64:	ffff8fbf 	.word	0xffff8fbf

08004b68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	; 0x30
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	7b1b      	ldrb	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d000      	beq.n	8004b7c <USB_DeactivateEndpoint+0x14>
 8004b7a:	e07e      	b.n	8004c7a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03c      	beq.n	8004bfe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	18d2      	adds	r2, r2, r3
 8004b8e:	210c      	movs	r1, #12
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	8812      	ldrh	r2, [r2, #0]
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d016      	beq.n	8004bce <USB_DeactivateEndpoint+0x66>
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	18d3      	adds	r3, r2, r3
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	200a      	movs	r0, #10
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	49c7      	ldr	r1, [pc, #796]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	18d3      	adds	r3, r2, r3
 8004bc2:	183a      	adds	r2, r7, r0
 8004bc4:	8812      	ldrh	r2, [r2, #0]
 8004bc6:	49c3      	ldr	r1, [pc, #780]	; (8004ed4 <USB_DeactivateEndpoint+0x36c>)
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	2008      	movs	r0, #8
 8004bde:	183b      	adds	r3, r7, r0
 8004be0:	49bd      	ldr	r1, [pc, #756]	; (8004ed8 <USB_DeactivateEndpoint+0x370>)
 8004be2:	400a      	ands	r2, r1
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	18d3      	adds	r3, r2, r3
 8004bf0:	183a      	adds	r2, r7, r0
 8004bf2:	8812      	ldrh	r2, [r2, #0]
 8004bf4:	49b9      	ldr	r1, [pc, #740]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	e163      	b.n	8004ec6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	18d2      	adds	r2, r2, r3
 8004c08:	2112      	movs	r1, #18
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	8812      	ldrh	r2, [r2, #0]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	187b      	adds	r3, r7, r1
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d016      	beq.n	8004c4a <USB_DeactivateEndpoint+0xe2>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	18d3      	adds	r3, r2, r3
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	2010      	movs	r0, #16
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	49a8      	ldr	r1, [pc, #672]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	18d3      	adds	r3, r2, r3
 8004c3e:	183a      	adds	r2, r7, r0
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	49a7      	ldr	r1, [pc, #668]	; (8004ee0 <USB_DeactivateEndpoint+0x378>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	b292      	uxth	r2, r2
 8004c48:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	18d3      	adds	r3, r2, r3
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	200e      	movs	r0, #14
 8004c5a:	183b      	adds	r3, r7, r0
 8004c5c:	49a1      	ldr	r1, [pc, #644]	; (8004ee4 <USB_DeactivateEndpoint+0x37c>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	18d3      	adds	r3, r2, r3
 8004c6c:	183a      	adds	r2, r7, r0
 8004c6e:	8812      	ldrh	r2, [r2, #0]
 8004c70:	499a      	ldr	r1, [pc, #616]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004c72:	430a      	orrs	r2, r1
 8004c74:	b292      	uxth	r2, r2
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e125      	b.n	8004ec6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d000      	beq.n	8004c84 <USB_DeactivateEndpoint+0x11c>
 8004c82:	e090      	b.n	8004da6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	18d2      	adds	r2, r2, r3
 8004c8e:	2120      	movs	r1, #32
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	8812      	ldrh	r2, [r2, #0]
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	881a      	ldrh	r2, [r3, #0]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	01db      	lsls	r3, r3, #7
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d016      	beq.n	8004cd0 <USB_DeactivateEndpoint+0x168>
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	18d3      	adds	r3, r2, r3
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	201e      	movs	r0, #30
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	4986      	ldr	r1, [pc, #536]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	183a      	adds	r2, r7, r0
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	4985      	ldr	r1, [pc, #532]	; (8004ee0 <USB_DeactivateEndpoint+0x378>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	b292      	uxth	r2, r2
 8004cce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	18d2      	adds	r2, r2, r3
 8004cda:	211c      	movs	r1, #28
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d016      	beq.n	8004d1a <USB_DeactivateEndpoint+0x1b2>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	18d3      	adds	r3, r2, r3
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	201a      	movs	r0, #26
 8004cfc:	183b      	adds	r3, r7, r0
 8004cfe:	4974      	ldr	r1, [pc, #464]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004d00:	400a      	ands	r2, r1
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	183a      	adds	r2, r7, r0
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	4970      	ldr	r1, [pc, #448]	; (8004ed4 <USB_DeactivateEndpoint+0x36c>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18d3      	adds	r3, r2, r3
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	2018      	movs	r0, #24
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	4968      	ldr	r1, [pc, #416]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	801a      	strh	r2, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	18d3      	adds	r3, r2, r3
 8004d3c:	183a      	adds	r2, r7, r0
 8004d3e:	8812      	ldrh	r2, [r2, #0]
 8004d40:	4964      	ldr	r1, [pc, #400]	; (8004ed4 <USB_DeactivateEndpoint+0x36c>)
 8004d42:	430a      	orrs	r2, r1
 8004d44:	b292      	uxth	r2, r2
 8004d46:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	2016      	movs	r0, #22
 8004d58:	183b      	adds	r3, r7, r0
 8004d5a:	4962      	ldr	r1, [pc, #392]	; (8004ee4 <USB_DeactivateEndpoint+0x37c>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	18d3      	adds	r3, r2, r3
 8004d6a:	183a      	adds	r2, r7, r0
 8004d6c:	8812      	ldrh	r2, [r2, #0]
 8004d6e:	495b      	ldr	r1, [pc, #364]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004d70:	430a      	orrs	r2, r1
 8004d72:	b292      	uxth	r2, r2
 8004d74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	2014      	movs	r0, #20
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	4953      	ldr	r1, [pc, #332]	; (8004ed8 <USB_DeactivateEndpoint+0x370>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	183a      	adds	r2, r7, r0
 8004d9a:	8812      	ldrh	r2, [r2, #0]
 8004d9c:	494f      	ldr	r1, [pc, #316]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	b292      	uxth	r2, r2
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e08f      	b.n	8004ec6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	18d2      	adds	r2, r2, r3
 8004db0:	212e      	movs	r1, #46	; 0x2e
 8004db2:	187b      	adds	r3, r7, r1
 8004db4:	8812      	ldrh	r2, [r2, #0]
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	187b      	adds	r3, r7, r1
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	01db      	lsls	r3, r3, #7
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d016      	beq.n	8004df2 <USB_DeactivateEndpoint+0x28a>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	18d3      	adds	r3, r2, r3
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	202c      	movs	r0, #44	; 0x2c
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	493e      	ldr	r1, [pc, #248]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	18d3      	adds	r3, r2, r3
 8004de6:	183a      	adds	r2, r7, r0
 8004de8:	8812      	ldrh	r2, [r2, #0]
 8004dea:	493d      	ldr	r1, [pc, #244]	; (8004ee0 <USB_DeactivateEndpoint+0x378>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	b292      	uxth	r2, r2
 8004df0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	18d2      	adds	r2, r2, r3
 8004dfc:	212a      	movs	r1, #42	; 0x2a
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	2240      	movs	r2, #64	; 0x40
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d016      	beq.n	8004e3c <USB_DeactivateEndpoint+0x2d4>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	2028      	movs	r0, #40	; 0x28
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	492b      	ldr	r1, [pc, #172]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	18d3      	adds	r3, r2, r3
 8004e30:	183a      	adds	r2, r7, r0
 8004e32:	8812      	ldrh	r2, [r2, #0]
 8004e34:	4927      	ldr	r1, [pc, #156]	; (8004ed4 <USB_DeactivateEndpoint+0x36c>)
 8004e36:	430a      	orrs	r2, r1
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	2026      	movs	r0, #38	; 0x26
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	4920      	ldr	r1, [pc, #128]	; (8004ed0 <USB_DeactivateEndpoint+0x368>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	183a      	adds	r2, r7, r0
 8004e60:	8812      	ldrh	r2, [r2, #0]
 8004e62:	491f      	ldr	r1, [pc, #124]	; (8004ee0 <USB_DeactivateEndpoint+0x378>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	b292      	uxth	r2, r2
 8004e68:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	2024      	movs	r0, #36	; 0x24
 8004e7a:	183b      	adds	r3, r7, r0
 8004e7c:	4916      	ldr	r1, [pc, #88]	; (8004ed8 <USB_DeactivateEndpoint+0x370>)
 8004e7e:	400a      	ands	r2, r1
 8004e80:	801a      	strh	r2, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	183a      	adds	r2, r7, r0
 8004e8e:	8812      	ldrh	r2, [r2, #0]
 8004e90:	4912      	ldr	r1, [pc, #72]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	b292      	uxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	2022      	movs	r0, #34	; 0x22
 8004ea8:	183b      	adds	r3, r7, r0
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <USB_DeactivateEndpoint+0x37c>)
 8004eac:	400a      	ands	r2, r1
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	183a      	adds	r2, r7, r0
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	4907      	ldr	r1, [pc, #28]	; (8004edc <USB_DeactivateEndpoint+0x374>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b00c      	add	sp, #48	; 0x30
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	ffff8f8f 	.word	0xffff8f8f
 8004ed4:	ffff80c0 	.word	0xffff80c0
 8004ed8:	ffff8fbf 	.word	0xffff8fbf
 8004edc:	ffff8080 	.word	0xffff8080
 8004ee0:	ffffc080 	.word	0xffffc080
 8004ee4:	ffffbf8f 	.word	0xffffbf8f

08004ee8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b0c3      	sub	sp, #268	; 0x10c
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <USB_EPStartXfer+0x16>
 8004efa:	f000 fcef 	bl	80058dc <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d905      	bls.n	8004f16 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	1d7a      	adds	r2, r7, #5
 8004f10:	32ff      	adds	r2, #255	; 0xff
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e004      	b.n	8004f20 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	1d7a      	adds	r2, r7, #5
 8004f1c:	32ff      	adds	r2, #255	; 0xff
 8004f1e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	7b1b      	ldrb	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d125      	bne.n	8004f74 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6959      	ldr	r1, [r3, #20]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	88da      	ldrh	r2, [r3, #6]
 8004f30:	1d7b      	adds	r3, r7, #5
 8004f32:	33ff      	adds	r3, #255	; 0xff
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f9c9 	bl	80062d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2250      	movs	r2, #80	; 0x50
 8004f46:	5a9b      	ldrh	r3, [r3, r2]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	00da      	lsls	r2, r3, #3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	18d3      	adds	r3, r2, r3
 8004f5c:	4acc      	ldr	r2, [pc, #816]	; (8005290 <USB_EPStartXfer+0x3a8>)
 8004f5e:	4694      	mov	ip, r2
 8004f60:	4463      	add	r3, ip
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	1d7b      	adds	r3, r7, #5
 8004f66:	33ff      	adds	r3, #255	; 0xff
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	f000 fc8f 	bl	8005892 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d000      	beq.n	8004f7e <USB_EPStartXfer+0x96>
 8004f7c:	e33a      	b.n	80055f4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d800      	bhi.n	8004f8c <USB_EPStartXfer+0xa4>
 8004f8a:	e2df      	b.n	800554c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	2056      	movs	r0, #86	; 0x56
 8004f9c:	183b      	adds	r3, r7, r0
 8004f9e:	49bd      	ldr	r1, [pc, #756]	; (8005294 <USB_EPStartXfer+0x3ac>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	18d3      	adds	r3, r2, r3
 8004fae:	183a      	adds	r2, r7, r0
 8004fb0:	8812      	ldrh	r2, [r2, #0]
 8004fb2:	49b9      	ldr	r1, [pc, #740]	; (8005298 <USB_EPStartXfer+0x3b0>)
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	1d7b      	adds	r3, r7, #5
 8004fc0:	33ff      	adds	r3, #255	; 0xff
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	18d3      	adds	r3, r2, r3
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	001a      	movs	r2, r3
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <USB_EPStartXfer+0xfa>
 8004fe0:	e162      	b.n	80052a8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d16a      	bne.n	80050c4 <USB_EPStartXfer+0x1dc>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2250      	movs	r2, #80	; 0x50
 8004ff6:	5a9b      	ldrh	r3, [r3, r2]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00da      	lsls	r2, r3, #3
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	18d3      	adds	r3, r2, r3
 800500c:	4aa3      	ldr	r2, [pc, #652]	; (800529c <USB_EPStartXfer+0x3b4>)
 800500e:	4694      	mov	ip, r2
 8005010:	4463      	add	r3, ip
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
 8005014:	1d7b      	adds	r3, r7, #5
 8005016:	33ff      	adds	r3, #255	; 0xff
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d110      	bne.n	8005040 <USB_EPStartXfer+0x158>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4a9e      	ldr	r2, [pc, #632]	; (80052a0 <USB_EPStartXfer+0x3b8>)
 8005026:	4013      	ands	r3, r2
 8005028:	b29a      	uxth	r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	4a9b      	ldr	r2, [pc, #620]	; (80052a4 <USB_EPStartXfer+0x3bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	e05c      	b.n	80050fa <USB_EPStartXfer+0x212>
 8005040:	1d7b      	adds	r3, r7, #5
 8005042:	33ff      	adds	r3, #255	; 0xff
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b3e      	cmp	r3, #62	; 0x3e
 8005048:	d81c      	bhi.n	8005084 <USB_EPStartXfer+0x19c>
 800504a:	1d7b      	adds	r3, r7, #5
 800504c:	33ff      	adds	r3, #255	; 0xff
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	1c7a      	adds	r2, r7, #1
 8005054:	32ff      	adds	r2, #255	; 0xff
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	1d7b      	adds	r3, r7, #5
 800505a:	33ff      	adds	r3, #255	; 0xff
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	4013      	ands	r3, r2
 8005062:	d006      	beq.n	8005072 <USB_EPStartXfer+0x18a>
 8005064:	1c7b      	adds	r3, r7, #1
 8005066:	33ff      	adds	r3, #255	; 0xff
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	1c7a      	adds	r2, r7, #1
 800506e:	32ff      	adds	r2, #255	; 0xff
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	1c7b      	adds	r3, r7, #1
 8005074:	33ff      	adds	r3, #255	; 0xff
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	029b      	lsls	r3, r3, #10
 800507c:	b29a      	uxth	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	e03a      	b.n	80050fa <USB_EPStartXfer+0x212>
 8005084:	1d7b      	adds	r3, r7, #5
 8005086:	33ff      	adds	r3, #255	; 0xff
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	1c7a      	adds	r2, r7, #1
 800508e:	32ff      	adds	r2, #255	; 0xff
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	1d7b      	adds	r3, r7, #5
 8005094:	33ff      	adds	r3, #255	; 0xff
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	221f      	movs	r2, #31
 800509a:	4013      	ands	r3, r2
 800509c:	d106      	bne.n	80050ac <USB_EPStartXfer+0x1c4>
 800509e:	1c7b      	adds	r3, r7, #1
 80050a0:	33ff      	adds	r3, #255	; 0xff
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	1c7a      	adds	r2, r7, #1
 80050a8:	32ff      	adds	r2, #255	; 0xff
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	1c7b      	adds	r3, r7, #1
 80050ae:	33ff      	adds	r3, #255	; 0xff
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4a7a      	ldr	r2, [pc, #488]	; (80052a4 <USB_EPStartXfer+0x3bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e01a      	b.n	80050fa <USB_EPStartXfer+0x212>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d116      	bne.n	80050fa <USB_EPStartXfer+0x212>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2250      	movs	r2, #80	; 0x50
 80050d0:	5a9b      	ldrh	r3, [r3, r2]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	001a      	movs	r2, r3
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	189b      	adds	r3, r3, r2
 80050da:	633b      	str	r3, [r7, #48]	; 0x30
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	00da      	lsls	r2, r3, #3
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	4a6d      	ldr	r2, [pc, #436]	; (800529c <USB_EPStartXfer+0x3b4>)
 80050e8:	4694      	mov	ip, r2
 80050ea:	4463      	add	r3, ip
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ee:	1d7b      	adds	r3, r7, #5
 80050f0:	33ff      	adds	r3, #255	; 0xff
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050fa:	2076      	movs	r0, #118	; 0x76
 80050fc:	183b      	adds	r3, r7, r0
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	8952      	ldrh	r2, [r2, #10]
 8005102:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	1d7b      	adds	r3, r7, #5
 800510a:	33ff      	adds	r3, #255	; 0xff
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b29c      	uxth	r4, r3
 8005110:	183b      	adds	r3, r7, r0
 8005112:	881a      	ldrh	r2, [r3, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	0023      	movs	r3, r4
 8005118:	f001 f8da 	bl	80062d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	1d7b      	adds	r3, r7, #5
 8005122:	33ff      	adds	r3, #255	; 0xff
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	18d2      	adds	r2, r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	429a      	cmp	r2, r3
 8005136:	d908      	bls.n	800514a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	1d7b      	adds	r3, r7, #5
 800513e:	33ff      	adds	r3, #255	; 0xff
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	1ad2      	subs	r2, r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	621a      	str	r2, [r3, #32]
 8005148:	e007      	b.n	800515a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	1d7a      	adds	r2, r7, #5
 8005150:	32ff      	adds	r2, #255	; 0xff
 8005152:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d166      	bne.n	8005230 <USB_EPStartXfer+0x348>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2250      	movs	r2, #80	; 0x50
 800516a:	5a9b      	ldrh	r3, [r3, r2]
 800516c:	b29b      	uxth	r3, r3
 800516e:	001a      	movs	r2, r3
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	189b      	adds	r3, r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	00da      	lsls	r2, r3, #3
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	18d3      	adds	r3, r2, r3
 8005180:	4a43      	ldr	r2, [pc, #268]	; (8005290 <USB_EPStartXfer+0x3a8>)
 8005182:	4694      	mov	ip, r2
 8005184:	4463      	add	r3, ip
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	1d7b      	adds	r3, r7, #5
 800518a:	33ff      	adds	r3, #255	; 0xff
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d110      	bne.n	80051b4 <USB_EPStartXfer+0x2cc>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	4a41      	ldr	r2, [pc, #260]	; (80052a0 <USB_EPStartXfer+0x3b8>)
 800519a:	4013      	ands	r3, r2
 800519c:	b29a      	uxth	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4a3e      	ldr	r2, [pc, #248]	; (80052a4 <USB_EPStartXfer+0x3bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e05a      	b.n	800526a <USB_EPStartXfer+0x382>
 80051b4:	1d7b      	adds	r3, r7, #5
 80051b6:	33ff      	adds	r3, #255	; 0xff
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b3e      	cmp	r3, #62	; 0x3e
 80051bc:	d81a      	bhi.n	80051f4 <USB_EPStartXfer+0x30c>
 80051be:	1d7b      	adds	r3, r7, #5
 80051c0:	33ff      	adds	r3, #255	; 0xff
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	21fc      	movs	r1, #252	; 0xfc
 80051c8:	187a      	adds	r2, r7, r1
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	1d7b      	adds	r3, r7, #5
 80051ce:	33ff      	adds	r3, #255	; 0xff
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	4013      	ands	r3, r2
 80051d6:	d004      	beq.n	80051e2 <USB_EPStartXfer+0x2fa>
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	187a      	adds	r2, r7, r1
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	23fc      	movs	r3, #252	; 0xfc
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e03a      	b.n	800526a <USB_EPStartXfer+0x382>
 80051f4:	1d7b      	adds	r3, r7, #5
 80051f6:	33ff      	adds	r3, #255	; 0xff
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	21fc      	movs	r1, #252	; 0xfc
 80051fe:	187a      	adds	r2, r7, r1
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	1d7b      	adds	r3, r7, #5
 8005204:	33ff      	adds	r3, #255	; 0xff
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	221f      	movs	r2, #31
 800520a:	4013      	ands	r3, r2
 800520c:	d104      	bne.n	8005218 <USB_EPStartXfer+0x330>
 800520e:	187b      	adds	r3, r7, r1
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	187a      	adds	r2, r7, r1
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	23fc      	movs	r3, #252	; 0xfc
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	b29b      	uxth	r3, r3
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <USB_EPStartXfer+0x3bc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	b29a      	uxth	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e01c      	b.n	800526a <USB_EPStartXfer+0x382>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d118      	bne.n	800526a <USB_EPStartXfer+0x382>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2250      	movs	r2, #80	; 0x50
 8005240:	5a9b      	ldrh	r3, [r3, r2]
 8005242:	b29b      	uxth	r3, r3
 8005244:	001a      	movs	r2, r3
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	189b      	adds	r3, r3, r2
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	00da      	lsls	r2, r3, #3
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <USB_EPStartXfer+0x3a8>)
 8005258:	4694      	mov	ip, r2
 800525a:	4463      	add	r3, ip
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	1d7b      	adds	r3, r7, #5
 8005260:	33ff      	adds	r3, #255	; 0xff
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b29a      	uxth	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800526a:	2076      	movs	r0, #118	; 0x76
 800526c:	183b      	adds	r3, r7, r0
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	8912      	ldrh	r2, [r2, #8]
 8005272:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6959      	ldr	r1, [r3, #20]
 8005278:	1d7b      	adds	r3, r7, #5
 800527a:	33ff      	adds	r3, #255	; 0xff
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29c      	uxth	r4, r3
 8005280:	183b      	adds	r3, r7, r0
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	0023      	movs	r3, r4
 8005288:	f001 f822 	bl	80062d0 <USB_WritePMA>
 800528c:	e301      	b.n	8005892 <USB_EPStartXfer+0x9aa>
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	00000402 	.word	0x00000402
 8005294:	ffff8f8f 	.word	0xffff8f8f
 8005298:	ffff8180 	.word	0xffff8180
 800529c:	00000406 	.word	0x00000406
 80052a0:	ffff83ff 	.word	0xffff83ff
 80052a4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d166      	bne.n	800537e <USB_EPStartXfer+0x496>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2250      	movs	r2, #80	; 0x50
 80052b8:	5a9b      	ldrh	r3, [r3, r2]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	001a      	movs	r2, r3
 80052be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	00da      	lsls	r2, r3, #3
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	4ac3      	ldr	r2, [pc, #780]	; (80055dc <USB_EPStartXfer+0x6f4>)
 80052d0:	4694      	mov	ip, r2
 80052d2:	4463      	add	r3, ip
 80052d4:	647b      	str	r3, [r7, #68]	; 0x44
 80052d6:	1d7b      	adds	r3, r7, #5
 80052d8:	33ff      	adds	r3, #255	; 0xff
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d110      	bne.n	8005302 <USB_EPStartXfer+0x41a>
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4abe      	ldr	r2, [pc, #760]	; (80055e0 <USB_EPStartXfer+0x6f8>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4abb      	ldr	r2, [pc, #748]	; (80055e4 <USB_EPStartXfer+0x6fc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e05a      	b.n	80053b8 <USB_EPStartXfer+0x4d0>
 8005302:	1d7b      	adds	r3, r7, #5
 8005304:	33ff      	adds	r3, #255	; 0xff
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b3e      	cmp	r3, #62	; 0x3e
 800530a:	d81a      	bhi.n	8005342 <USB_EPStartXfer+0x45a>
 800530c:	1d7b      	adds	r3, r7, #5
 800530e:	33ff      	adds	r3, #255	; 0xff
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	21f8      	movs	r1, #248	; 0xf8
 8005316:	187a      	adds	r2, r7, r1
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	1d7b      	adds	r3, r7, #5
 800531c:	33ff      	adds	r3, #255	; 0xff
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	d004      	beq.n	8005330 <USB_EPStartXfer+0x448>
 8005326:	187b      	adds	r3, r7, r1
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	187a      	adds	r2, r7, r1
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	23f8      	movs	r3, #248	; 0xf8
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	b29a      	uxth	r2, r3
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e03a      	b.n	80053b8 <USB_EPStartXfer+0x4d0>
 8005342:	1d7b      	adds	r3, r7, #5
 8005344:	33ff      	adds	r3, #255	; 0xff
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	21f8      	movs	r1, #248	; 0xf8
 800534c:	187a      	adds	r2, r7, r1
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	1d7b      	adds	r3, r7, #5
 8005352:	33ff      	adds	r3, #255	; 0xff
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	221f      	movs	r2, #31
 8005358:	4013      	ands	r3, r2
 800535a:	d104      	bne.n	8005366 <USB_EPStartXfer+0x47e>
 800535c:	187b      	adds	r3, r7, r1
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3b01      	subs	r3, #1
 8005362:	187a      	adds	r2, r7, r1
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	23f8      	movs	r3, #248	; 0xf8
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	b29b      	uxth	r3, r3
 8005372:	4a9c      	ldr	r2, [pc, #624]	; (80055e4 <USB_EPStartXfer+0x6fc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	b29a      	uxth	r2, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	e01c      	b.n	80053b8 <USB_EPStartXfer+0x4d0>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d118      	bne.n	80053b8 <USB_EPStartXfer+0x4d0>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	653b      	str	r3, [r7, #80]	; 0x50
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2250      	movs	r2, #80	; 0x50
 800538e:	5a9b      	ldrh	r3, [r3, r2]
 8005390:	b29b      	uxth	r3, r3
 8005392:	001a      	movs	r2, r3
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	189b      	adds	r3, r3, r2
 8005398:	653b      	str	r3, [r7, #80]	; 0x50
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00da      	lsls	r2, r3, #3
 80053a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a2:	18d3      	adds	r3, r2, r3
 80053a4:	4a8d      	ldr	r2, [pc, #564]	; (80055dc <USB_EPStartXfer+0x6f4>)
 80053a6:	4694      	mov	ip, r2
 80053a8:	4463      	add	r3, ip
 80053aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ac:	1d7b      	adds	r3, r7, #5
 80053ae:	33ff      	adds	r3, #255	; 0xff
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053b8:	2076      	movs	r0, #118	; 0x76
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	8912      	ldrh	r2, [r2, #8]
 80053c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	1d7b      	adds	r3, r7, #5
 80053c8:	33ff      	adds	r3, #255	; 0xff
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b29c      	uxth	r4, r3
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	0023      	movs	r3, r4
 80053d6:	f000 ff7b 	bl	80062d0 <USB_WritePMA>
            ep->xfer_buff += len;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	1d7b      	adds	r3, r7, #5
 80053e0:	33ff      	adds	r3, #255	; 0xff
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	18d2      	adds	r2, r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d908      	bls.n	8005408 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	1d7b      	adds	r3, r7, #5
 80053fc:	33ff      	adds	r3, #255	; 0xff
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	1ad2      	subs	r2, r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	621a      	str	r2, [r3, #32]
 8005406:	e007      	b.n	8005418 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	1d7a      	adds	r2, r7, #5
 800540e:	32ff      	adds	r2, #255	; 0xff
 8005410:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2200      	movs	r2, #0
 8005416:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	643b      	str	r3, [r7, #64]	; 0x40
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d166      	bne.n	80054f2 <USB_EPStartXfer+0x60a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	63bb      	str	r3, [r7, #56]	; 0x38
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2250      	movs	r2, #80	; 0x50
 800542c:	5a9b      	ldrh	r3, [r3, r2]
 800542e:	b29b      	uxth	r3, r3
 8005430:	001a      	movs	r2, r3
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	189b      	adds	r3, r3, r2
 8005436:	63bb      	str	r3, [r7, #56]	; 0x38
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	00da      	lsls	r2, r3, #3
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	18d3      	adds	r3, r2, r3
 8005442:	4a69      	ldr	r2, [pc, #420]	; (80055e8 <USB_EPStartXfer+0x700>)
 8005444:	4694      	mov	ip, r2
 8005446:	4463      	add	r3, ip
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	1d7b      	adds	r3, r7, #5
 800544c:	33ff      	adds	r3, #255	; 0xff
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d110      	bne.n	8005476 <USB_EPStartXfer+0x58e>
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4a61      	ldr	r2, [pc, #388]	; (80055e0 <USB_EPStartXfer+0x6f8>)
 800545c:	4013      	ands	r3, r2
 800545e:	b29a      	uxth	r2, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	4a5e      	ldr	r2, [pc, #376]	; (80055e4 <USB_EPStartXfer+0x6fc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	b29a      	uxth	r2, r3
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e058      	b.n	8005528 <USB_EPStartXfer+0x640>
 8005476:	1d7b      	adds	r3, r7, #5
 8005478:	33ff      	adds	r3, #255	; 0xff
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b3e      	cmp	r3, #62	; 0x3e
 800547e:	d81a      	bhi.n	80054b6 <USB_EPStartXfer+0x5ce>
 8005480:	1d7b      	adds	r3, r7, #5
 8005482:	33ff      	adds	r3, #255	; 0xff
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	21f4      	movs	r1, #244	; 0xf4
 800548a:	187a      	adds	r2, r7, r1
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	1d7b      	adds	r3, r7, #5
 8005490:	33ff      	adds	r3, #255	; 0xff
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	d004      	beq.n	80054a4 <USB_EPStartXfer+0x5bc>
 800549a:	187b      	adds	r3, r7, r1
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	187a      	adds	r2, r7, r1
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	23f4      	movs	r3, #244	; 0xf4
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e038      	b.n	8005528 <USB_EPStartXfer+0x640>
 80054b6:	1d7b      	adds	r3, r7, #5
 80054b8:	33ff      	adds	r3, #255	; 0xff
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	21f4      	movs	r1, #244	; 0xf4
 80054c0:	187a      	adds	r2, r7, r1
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	1d7b      	adds	r3, r7, #5
 80054c6:	33ff      	adds	r3, #255	; 0xff
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	221f      	movs	r2, #31
 80054cc:	4013      	ands	r3, r2
 80054ce:	d104      	bne.n	80054da <USB_EPStartXfer+0x5f2>
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	187a      	adds	r2, r7, r1
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	23f4      	movs	r3, #244	; 0xf4
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	029b      	lsls	r3, r3, #10
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	4a3f      	ldr	r2, [pc, #252]	; (80055e4 <USB_EPStartXfer+0x6fc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e01a      	b.n	8005528 <USB_EPStartXfer+0x640>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d116      	bne.n	8005528 <USB_EPStartXfer+0x640>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2250      	movs	r2, #80	; 0x50
 80054fe:	5a9b      	ldrh	r3, [r3, r2]
 8005500:	b29b      	uxth	r3, r3
 8005502:	001a      	movs	r2, r3
 8005504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005506:	189b      	adds	r3, r3, r2
 8005508:	643b      	str	r3, [r7, #64]	; 0x40
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	00da      	lsls	r2, r3, #3
 8005510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	4a34      	ldr	r2, [pc, #208]	; (80055e8 <USB_EPStartXfer+0x700>)
 8005516:	4694      	mov	ip, r2
 8005518:	4463      	add	r3, ip
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551c:	1d7b      	adds	r3, r7, #5
 800551e:	33ff      	adds	r3, #255	; 0xff
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	b29a      	uxth	r2, r3
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005528:	2076      	movs	r0, #118	; 0x76
 800552a:	183b      	adds	r3, r7, r0
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	8952      	ldrh	r2, [r2, #10]
 8005530:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6959      	ldr	r1, [r3, #20]
 8005536:	1d7b      	adds	r3, r7, #5
 8005538:	33ff      	adds	r3, #255	; 0xff
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b29c      	uxth	r4, r3
 800553e:	183b      	adds	r3, r7, r0
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	0023      	movs	r3, r4
 8005546:	f000 fec3 	bl	80062d0 <USB_WritePMA>
 800554a:	e1a2      	b.n	8005892 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	1d7a      	adds	r2, r7, #5
 8005552:	32ff      	adds	r2, #255	; 0xff
 8005554:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29a      	uxth	r2, r3
 8005564:	2062      	movs	r0, #98	; 0x62
 8005566:	183b      	adds	r3, r7, r0
 8005568:	4920      	ldr	r1, [pc, #128]	; (80055ec <USB_EPStartXfer+0x704>)
 800556a:	400a      	ands	r2, r1
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	18d3      	adds	r3, r2, r3
 8005578:	183a      	adds	r2, r7, r0
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	491c      	ldr	r1, [pc, #112]	; (80055f0 <USB_EPStartXfer+0x708>)
 800557e:	430a      	orrs	r2, r1
 8005580:	b292      	uxth	r2, r2
 8005582:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2250      	movs	r2, #80	; 0x50
 800558c:	5a9b      	ldrh	r3, [r3, r2]
 800558e:	b29b      	uxth	r3, r3
 8005590:	001a      	movs	r2, r3
 8005592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005594:	189b      	adds	r3, r3, r2
 8005596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00da      	lsls	r2, r3, #3
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <USB_EPStartXfer+0x6f4>)
 80055a4:	4694      	mov	ip, r2
 80055a6:	4463      	add	r3, ip
 80055a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055aa:	1d7b      	adds	r3, r7, #5
 80055ac:	33ff      	adds	r3, #255	; 0xff
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055b6:	2076      	movs	r0, #118	; 0x76
 80055b8:	183b      	adds	r3, r7, r0
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	8912      	ldrh	r2, [r2, #8]
 80055be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6959      	ldr	r1, [r3, #20]
 80055c4:	1d7b      	adds	r3, r7, #5
 80055c6:	33ff      	adds	r3, #255	; 0xff
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b29c      	uxth	r4, r3
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	0023      	movs	r3, r4
 80055d4:	f000 fe7c 	bl	80062d0 <USB_WritePMA>
 80055d8:	e15b      	b.n	8005892 <USB_EPStartXfer+0x9aa>
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	00000402 	.word	0x00000402
 80055e0:	ffff83ff 	.word	0xffff83ff
 80055e4:	ffff8000 	.word	0xffff8000
 80055e8:	00000406 	.word	0x00000406
 80055ec:	ffff8e8f 	.word	0xffff8e8f
 80055f0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6a1a      	ldr	r2, [r3, #32]
 80055f8:	1d7b      	adds	r3, r7, #5
 80055fa:	33ff      	adds	r3, #255	; 0xff
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	18d3      	adds	r3, r2, r3
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	001a      	movs	r2, r3
 8005614:	2340      	movs	r3, #64	; 0x40
 8005616:	4013      	ands	r3, r2
 8005618:	d100      	bne.n	800561c <USB_EPStartXfer+0x734>
 800561a:	e099      	b.n	8005750 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	673b      	str	r3, [r7, #112]	; 0x70
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d166      	bne.n	80056f6 <USB_EPStartXfer+0x80e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2250      	movs	r2, #80	; 0x50
 8005630:	5a9b      	ldrh	r3, [r3, r2]
 8005632:	b29b      	uxth	r3, r3
 8005634:	001a      	movs	r2, r3
 8005636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005638:	189b      	adds	r3, r3, r2
 800563a:	66bb      	str	r3, [r7, #104]	; 0x68
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	00da      	lsls	r2, r3, #3
 8005642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005644:	18d3      	adds	r3, r2, r3
 8005646:	4ad0      	ldr	r2, [pc, #832]	; (8005988 <USB_EPStartXfer+0xaa0>)
 8005648:	4694      	mov	ip, r2
 800564a:	4463      	add	r3, ip
 800564c:	667b      	str	r3, [r7, #100]	; 0x64
 800564e:	1d7b      	adds	r3, r7, #5
 8005650:	33ff      	adds	r3, #255	; 0xff
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <USB_EPStartXfer+0x792>
 8005658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	4acb      	ldr	r2, [pc, #812]	; (800598c <USB_EPStartXfer+0xaa4>)
 8005660:	4013      	ands	r3, r2
 8005662:	b29a      	uxth	r2, r3
 8005664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	4ac8      	ldr	r2, [pc, #800]	; (8005990 <USB_EPStartXfer+0xaa8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	b29a      	uxth	r2, r3
 8005674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e058      	b.n	800572c <USB_EPStartXfer+0x844>
 800567a:	1d7b      	adds	r3, r7, #5
 800567c:	33ff      	adds	r3, #255	; 0xff
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b3e      	cmp	r3, #62	; 0x3e
 8005682:	d81a      	bhi.n	80056ba <USB_EPStartXfer+0x7d2>
 8005684:	1d7b      	adds	r3, r7, #5
 8005686:	33ff      	adds	r3, #255	; 0xff
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	21f0      	movs	r1, #240	; 0xf0
 800568e:	187a      	adds	r2, r7, r1
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	1d7b      	adds	r3, r7, #5
 8005694:	33ff      	adds	r3, #255	; 0xff
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	4013      	ands	r3, r2
 800569c:	d004      	beq.n	80056a8 <USB_EPStartXfer+0x7c0>
 800569e:	187b      	adds	r3, r7, r1
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	187a      	adds	r2, r7, r1
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	23f0      	movs	r3, #240	; 0xf0
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e038      	b.n	800572c <USB_EPStartXfer+0x844>
 80056ba:	1d7b      	adds	r3, r7, #5
 80056bc:	33ff      	adds	r3, #255	; 0xff
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	21f0      	movs	r1, #240	; 0xf0
 80056c4:	187a      	adds	r2, r7, r1
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	1d7b      	adds	r3, r7, #5
 80056ca:	33ff      	adds	r3, #255	; 0xff
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	221f      	movs	r2, #31
 80056d0:	4013      	ands	r3, r2
 80056d2:	d104      	bne.n	80056de <USB_EPStartXfer+0x7f6>
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3b01      	subs	r3, #1
 80056da:	187a      	adds	r2, r7, r1
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	23f0      	movs	r3, #240	; 0xf0
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	029b      	lsls	r3, r3, #10
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4aa9      	ldr	r2, [pc, #676]	; (8005990 <USB_EPStartXfer+0xaa8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e01a      	b.n	800572c <USB_EPStartXfer+0x844>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d116      	bne.n	800572c <USB_EPStartXfer+0x844>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2250      	movs	r2, #80	; 0x50
 8005702:	5a9b      	ldrh	r3, [r3, r2]
 8005704:	b29b      	uxth	r3, r3
 8005706:	001a      	movs	r2, r3
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	189b      	adds	r3, r3, r2
 800570c:	673b      	str	r3, [r7, #112]	; 0x70
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	00da      	lsls	r2, r3, #3
 8005714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	4a9b      	ldr	r2, [pc, #620]	; (8005988 <USB_EPStartXfer+0xaa0>)
 800571a:	4694      	mov	ip, r2
 800571c:	4463      	add	r3, ip
 800571e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005720:	1d7b      	adds	r3, r7, #5
 8005722:	33ff      	adds	r3, #255	; 0xff
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	b29a      	uxth	r2, r3
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800572c:	2076      	movs	r0, #118	; 0x76
 800572e:	183b      	adds	r3, r7, r0
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	8952      	ldrh	r2, [r2, #10]
 8005734:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	1d7b      	adds	r3, r7, #5
 800573c:	33ff      	adds	r3, #255	; 0xff
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b29c      	uxth	r4, r3
 8005742:	183b      	adds	r3, r7, r0
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	0023      	movs	r3, r4
 800574a:	f000 fdc1 	bl	80062d0 <USB_WritePMA>
 800574e:	e0a0      	b.n	8005892 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d166      	bne.n	8005826 <USB_EPStartXfer+0x93e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2250      	movs	r2, #80	; 0x50
 8005760:	5a9b      	ldrh	r3, [r3, r2]
 8005762:	b29b      	uxth	r3, r3
 8005764:	001a      	movs	r2, r3
 8005766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005768:	189b      	adds	r3, r3, r2
 800576a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	00da      	lsls	r2, r3, #3
 8005772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	4a87      	ldr	r2, [pc, #540]	; (8005994 <USB_EPStartXfer+0xaac>)
 8005778:	4694      	mov	ip, r2
 800577a:	4463      	add	r3, ip
 800577c:	67bb      	str	r3, [r7, #120]	; 0x78
 800577e:	1d7b      	adds	r3, r7, #5
 8005780:	33ff      	adds	r3, #255	; 0xff
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <USB_EPStartXfer+0x8c2>
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	4a7f      	ldr	r2, [pc, #508]	; (800598c <USB_EPStartXfer+0xaa4>)
 8005790:	4013      	ands	r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	4a7c      	ldr	r2, [pc, #496]	; (8005990 <USB_EPStartXfer+0xaa8>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e062      	b.n	8005870 <USB_EPStartXfer+0x988>
 80057aa:	1d7b      	adds	r3, r7, #5
 80057ac:	33ff      	adds	r3, #255	; 0xff
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b3e      	cmp	r3, #62	; 0x3e
 80057b2:	d81a      	bhi.n	80057ea <USB_EPStartXfer+0x902>
 80057b4:	1d7b      	adds	r3, r7, #5
 80057b6:	33ff      	adds	r3, #255	; 0xff
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	21ec      	movs	r1, #236	; 0xec
 80057be:	187a      	adds	r2, r7, r1
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	1d7b      	adds	r3, r7, #5
 80057c4:	33ff      	adds	r3, #255	; 0xff
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	4013      	ands	r3, r2
 80057cc:	d004      	beq.n	80057d8 <USB_EPStartXfer+0x8f0>
 80057ce:	187b      	adds	r3, r7, r1
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	187a      	adds	r2, r7, r1
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	23ec      	movs	r3, #236	; 0xec
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	029b      	lsls	r3, r3, #10
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e042      	b.n	8005870 <USB_EPStartXfer+0x988>
 80057ea:	1d7b      	adds	r3, r7, #5
 80057ec:	33ff      	adds	r3, #255	; 0xff
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	21ec      	movs	r1, #236	; 0xec
 80057f4:	187a      	adds	r2, r7, r1
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	1d7b      	adds	r3, r7, #5
 80057fa:	33ff      	adds	r3, #255	; 0xff
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	221f      	movs	r2, #31
 8005800:	4013      	ands	r3, r2
 8005802:	d104      	bne.n	800580e <USB_EPStartXfer+0x926>
 8005804:	187b      	adds	r3, r7, r1
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	187a      	adds	r2, r7, r1
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	23ec      	movs	r3, #236	; 0xec
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	b29b      	uxth	r3, r3
 800581a:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <USB_EPStartXfer+0xaa8>)
 800581c:	4313      	orrs	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e024      	b.n	8005870 <USB_EPStartXfer+0x988>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d120      	bne.n	8005870 <USB_EPStartXfer+0x988>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2184      	movs	r1, #132	; 0x84
 8005832:	187a      	adds	r2, r7, r1
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2250      	movs	r2, #80	; 0x50
 800583a:	5a9b      	ldrh	r3, [r3, r2]
 800583c:	b29b      	uxth	r3, r3
 800583e:	001a      	movs	r2, r3
 8005840:	187b      	adds	r3, r7, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	189b      	adds	r3, r3, r2
 8005846:	187a      	adds	r2, r7, r1
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	00da      	lsls	r2, r3, #3
 8005850:	187b      	adds	r3, r7, r1
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	4a4f      	ldr	r2, [pc, #316]	; (8005994 <USB_EPStartXfer+0xaac>)
 8005858:	4694      	mov	ip, r2
 800585a:	4463      	add	r3, ip
 800585c:	2180      	movs	r1, #128	; 0x80
 800585e:	187a      	adds	r2, r7, r1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	1d7b      	adds	r3, r7, #5
 8005864:	33ff      	adds	r3, #255	; 0xff
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b29a      	uxth	r2, r3
 800586a:	187b      	adds	r3, r7, r1
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005870:	2076      	movs	r0, #118	; 0x76
 8005872:	183b      	adds	r3, r7, r0
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	8912      	ldrh	r2, [r2, #8]
 8005878:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6959      	ldr	r1, [r3, #20]
 800587e:	1d7b      	adds	r3, r7, #5
 8005880:	33ff      	adds	r3, #255	; 0xff
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b29c      	uxth	r4, r3
 8005886:	183b      	adds	r3, r7, r0
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	0023      	movs	r3, r4
 800588e:	f000 fd1f 	bl	80062d0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	200a      	movs	r0, #10
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	493c      	ldr	r1, [pc, #240]	; (8005998 <USB_EPStartXfer+0xab0>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	183b      	adds	r3, r7, r0
 80058ac:	183a      	adds	r2, r7, r0
 80058ae:	8812      	ldrh	r2, [r2, #0]
 80058b0:	2110      	movs	r1, #16
 80058b2:	404a      	eors	r2, r1
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	183a      	adds	r2, r7, r0
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	2120      	movs	r1, #32
 80058be:	404a      	eors	r2, r1
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	18d3      	adds	r3, r2, r3
 80058cc:	183a      	adds	r2, r7, r0
 80058ce:	8812      	ldrh	r2, [r2, #0]
 80058d0:	4932      	ldr	r1, [pc, #200]	; (800599c <USB_EPStartXfer+0xab4>)
 80058d2:	430a      	orrs	r2, r1
 80058d4:	b292      	uxth	r2, r2
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	f000 fbaf 	bl	800603a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d000      	beq.n	80058e6 <USB_EPStartXfer+0x9fe>
 80058e4:	e09e      	b.n	8005a24 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d90d      	bls.n	800590e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	1d7a      	adds	r2, r7, #5
 80058f8:	32ff      	adds	r2, #255	; 0xff
 80058fa:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	1d7b      	adds	r3, r7, #5
 8005902:	33ff      	adds	r3, #255	; 0xff
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	619a      	str	r2, [r3, #24]
 800590c:	e007      	b.n	800591e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	1d7a      	adds	r2, r7, #5
 8005914:	32ff      	adds	r2, #255	; 0xff
 8005916:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2190      	movs	r1, #144	; 0x90
 8005922:	187a      	adds	r2, r7, r1
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2250      	movs	r2, #80	; 0x50
 800592a:	5a9b      	ldrh	r3, [r3, r2]
 800592c:	b29b      	uxth	r3, r3
 800592e:	001a      	movs	r2, r3
 8005930:	187b      	adds	r3, r7, r1
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	189b      	adds	r3, r3, r2
 8005936:	187a      	adds	r2, r7, r1
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00da      	lsls	r2, r3, #3
 8005940:	187b      	adds	r3, r7, r1
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	18d3      	adds	r3, r2, r3
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <USB_EPStartXfer+0xaa0>)
 8005948:	4694      	mov	ip, r2
 800594a:	4463      	add	r3, ip
 800594c:	218c      	movs	r1, #140	; 0x8c
 800594e:	187a      	adds	r2, r7, r1
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	1d7b      	adds	r3, r7, #5
 8005954:	33ff      	adds	r3, #255	; 0xff
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d121      	bne.n	80059a0 <USB_EPStartXfer+0xab8>
 800595c:	187b      	adds	r3, r7, r1
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	4a09      	ldr	r2, [pc, #36]	; (800598c <USB_EPStartXfer+0xaa4>)
 8005966:	4013      	ands	r3, r2
 8005968:	b29a      	uxth	r2, r3
 800596a:	187b      	adds	r3, r7, r1
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	187b      	adds	r3, r7, r1
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	4a05      	ldr	r2, [pc, #20]	; (8005990 <USB_EPStartXfer+0xaa8>)
 800597a:	4313      	orrs	r3, r2
 800597c:	b29a      	uxth	r2, r3
 800597e:	187b      	adds	r3, r7, r1
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e334      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	00000406 	.word	0x00000406
 800598c:	ffff83ff 	.word	0xffff83ff
 8005990:	ffff8000 	.word	0xffff8000
 8005994:	00000402 	.word	0x00000402
 8005998:	ffff8fbf 	.word	0xffff8fbf
 800599c:	ffff8080 	.word	0xffff8080
 80059a0:	1d7b      	adds	r3, r7, #5
 80059a2:	33ff      	adds	r3, #255	; 0xff
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b3e      	cmp	r3, #62	; 0x3e
 80059a8:	d81c      	bhi.n	80059e4 <USB_EPStartXfer+0xafc>
 80059aa:	1d7b      	adds	r3, r7, #5
 80059ac:	33ff      	adds	r3, #255	; 0xff
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	21e8      	movs	r1, #232	; 0xe8
 80059b4:	187a      	adds	r2, r7, r1
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	1d7b      	adds	r3, r7, #5
 80059ba:	33ff      	adds	r3, #255	; 0xff
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	4013      	ands	r3, r2
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xae6>
 80059c4:	187b      	adds	r3, r7, r1
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	187a      	adds	r2, r7, r1
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	23e8      	movs	r3, #232	; 0xe8
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29a      	uxth	r2, r3
 80059da:	238c      	movs	r3, #140	; 0x8c
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e305      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
 80059e4:	1d7b      	adds	r3, r7, #5
 80059e6:	33ff      	adds	r3, #255	; 0xff
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	21e8      	movs	r1, #232	; 0xe8
 80059ee:	187a      	adds	r2, r7, r1
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	1d7b      	adds	r3, r7, #5
 80059f4:	33ff      	adds	r3, #255	; 0xff
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	221f      	movs	r2, #31
 80059fa:	4013      	ands	r3, r2
 80059fc:	d104      	bne.n	8005a08 <USB_EPStartXfer+0xb20>
 80059fe:	187b      	adds	r3, r7, r1
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	187a      	adds	r2, r7, r1
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	23e8      	movs	r3, #232	; 0xe8
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	029b      	lsls	r3, r3, #10
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	4aca      	ldr	r2, [pc, #808]	; (8005d40 <USB_EPStartXfer+0xe58>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	238c      	movs	r3, #140	; 0x8c
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e2e5      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	78db      	ldrb	r3, [r3, #3]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d000      	beq.n	8005a2e <USB_EPStartXfer+0xb46>
 8005a2c:	e16f      	b.n	8005d0e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d16f      	bne.n	8005b16 <USB_EPStartXfer+0xc2e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	21ac      	movs	r1, #172	; 0xac
 8005a3a:	187a      	adds	r2, r7, r1
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2250      	movs	r2, #80	; 0x50
 8005a42:	5a9b      	ldrh	r3, [r3, r2]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	001a      	movs	r2, r3
 8005a48:	187b      	adds	r3, r7, r1
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	187a      	adds	r2, r7, r1
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	00da      	lsls	r2, r3, #3
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	18d3      	adds	r3, r2, r3
 8005a5e:	4ab9      	ldr	r2, [pc, #740]	; (8005d44 <USB_EPStartXfer+0xe5c>)
 8005a60:	4694      	mov	ip, r2
 8005a62:	4463      	add	r3, ip
 8005a64:	21a8      	movs	r1, #168	; 0xa8
 8005a66:	187a      	adds	r2, r7, r1
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d114      	bne.n	8005a9c <USB_EPStartXfer+0xbb4>
 8005a72:	187b      	adds	r3, r7, r1
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4ab3      	ldr	r2, [pc, #716]	; (8005d48 <USB_EPStartXfer+0xe60>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4aac      	ldr	r2, [pc, #688]	; (8005d40 <USB_EPStartXfer+0xe58>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e060      	b.n	8005b5e <USB_EPStartXfer+0xc76>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa2:	d81a      	bhi.n	8005ada <USB_EPStartXfer+0xbf2>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	21e4      	movs	r1, #228	; 0xe4
 8005aac:	187a      	adds	r2, r7, r1
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <USB_EPStartXfer+0xbdc>
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	187a      	adds	r2, r7, r1
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	23e4      	movs	r3, #228	; 0xe4
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	23a8      	movs	r3, #168	; 0xa8
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e041      	b.n	8005b5e <USB_EPStartXfer+0xc76>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	21e4      	movs	r1, #228	; 0xe4
 8005ae2:	187a      	adds	r2, r7, r1
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	221f      	movs	r2, #31
 8005aec:	4013      	ands	r3, r2
 8005aee:	d104      	bne.n	8005afa <USB_EPStartXfer+0xc12>
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	187a      	adds	r2, r7, r1
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	23e4      	movs	r3, #228	; 0xe4
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	029b      	lsls	r3, r3, #10
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4a8e      	ldr	r2, [pc, #568]	; (8005d40 <USB_EPStartXfer+0xe58>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	23a8      	movs	r3, #168	; 0xa8
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e023      	b.n	8005b5e <USB_EPStartXfer+0xc76>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d11f      	bne.n	8005b5e <USB_EPStartXfer+0xc76>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	21b4      	movs	r1, #180	; 0xb4
 8005b22:	187a      	adds	r2, r7, r1
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2250      	movs	r2, #80	; 0x50
 8005b2a:	5a9b      	ldrh	r3, [r3, r2]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	187a      	adds	r2, r7, r1
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	00da      	lsls	r2, r3, #3
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	18d3      	adds	r3, r2, r3
 8005b46:	4a7f      	ldr	r2, [pc, #508]	; (8005d44 <USB_EPStartXfer+0xe5c>)
 8005b48:	4694      	mov	ip, r2
 8005b4a:	4463      	add	r3, ip
 8005b4c:	21b0      	movs	r1, #176	; 0xb0
 8005b4e:	187a      	adds	r2, r7, r1
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	22a4      	movs	r2, #164	; 0xa4
 8005b62:	18ba      	adds	r2, r7, r2
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d16f      	bne.n	8005c4e <USB_EPStartXfer+0xd66>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	219c      	movs	r1, #156	; 0x9c
 8005b72:	187a      	adds	r2, r7, r1
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2250      	movs	r2, #80	; 0x50
 8005b7a:	5a9b      	ldrh	r3, [r3, r2]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	001a      	movs	r2, r3
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	189b      	adds	r3, r3, r2
 8005b86:	187a      	adds	r2, r7, r1
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	00da      	lsls	r2, r3, #3
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	4a6d      	ldr	r2, [pc, #436]	; (8005d4c <USB_EPStartXfer+0xe64>)
 8005b98:	4694      	mov	ip, r2
 8005b9a:	4463      	add	r3, ip
 8005b9c:	2198      	movs	r1, #152	; 0x98
 8005b9e:	187a      	adds	r2, r7, r1
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d114      	bne.n	8005bd4 <USB_EPStartXfer+0xcec>
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4a65      	ldr	r2, [pc, #404]	; (8005d48 <USB_EPStartXfer+0xe60>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4a5e      	ldr	r2, [pc, #376]	; (8005d40 <USB_EPStartXfer+0xe58>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	187b      	adds	r3, r7, r1
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e05d      	b.n	8005c90 <USB_EPStartXfer+0xda8>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bda:	d81a      	bhi.n	8005c12 <USB_EPStartXfer+0xd2a>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	21e0      	movs	r1, #224	; 0xe0
 8005be4:	187a      	adds	r2, r7, r1
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <USB_EPStartXfer+0xd14>
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	187a      	adds	r2, r7, r1
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	23e0      	movs	r3, #224	; 0xe0
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	2398      	movs	r3, #152	; 0x98
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e03e      	b.n	8005c90 <USB_EPStartXfer+0xda8>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	21e0      	movs	r1, #224	; 0xe0
 8005c1a:	187a      	adds	r2, r7, r1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	221f      	movs	r2, #31
 8005c24:	4013      	ands	r3, r2
 8005c26:	d104      	bne.n	8005c32 <USB_EPStartXfer+0xd4a>
 8005c28:	187b      	adds	r3, r7, r1
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	187a      	adds	r2, r7, r1
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	23e0      	movs	r3, #224	; 0xe0
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	029b      	lsls	r3, r3, #10
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4a40      	ldr	r2, [pc, #256]	; (8005d40 <USB_EPStartXfer+0xe58>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	2398      	movs	r3, #152	; 0x98
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e020      	b.n	8005c90 <USB_EPStartXfer+0xda8>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d11c      	bne.n	8005c90 <USB_EPStartXfer+0xda8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2250      	movs	r2, #80	; 0x50
 8005c5a:	5a9b      	ldrh	r3, [r3, r2]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	001a      	movs	r2, r3
 8005c60:	21a4      	movs	r1, #164	; 0xa4
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	187a      	adds	r2, r7, r1
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	18d3      	adds	r3, r2, r3
 8005c78:	4a34      	ldr	r2, [pc, #208]	; (8005d4c <USB_EPStartXfer+0xe64>)
 8005c7a:	4694      	mov	ip, r2
 8005c7c:	4463      	add	r3, ip
 8005c7e:	21a0      	movs	r1, #160	; 0xa0
 8005c80:	187a      	adds	r2, r7, r1
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d100      	bne.n	8005c9a <USB_EPStartXfer+0xdb2>
 8005c98:	e1aa      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	18d2      	adds	r2, r2, r3
 8005ca4:	2196      	movs	r1, #150	; 0x96
 8005ca6:	187b      	adds	r3, r7, r1
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cac:	187b      	adds	r3, r7, r1
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	01db      	lsls	r3, r3, #7
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <USB_EPStartXfer+0xdda>
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2240      	movs	r2, #64	; 0x40
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d10d      	bne.n	8005cde <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cc2:	2196      	movs	r1, #150	; 0x96
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	01db      	lsls	r3, r3, #7
 8005ccc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cce:	d000      	beq.n	8005cd2 <USB_EPStartXfer+0xdea>
 8005cd0:	e18e      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cd2:	187b      	adds	r3, r7, r1
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d000      	beq.n	8005cde <USB_EPStartXfer+0xdf6>
 8005cdc:	e188      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	18d3      	adds	r3, r2, r3
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	2094      	movs	r0, #148	; 0x94
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	4917      	ldr	r1, [pc, #92]	; (8005d50 <USB_EPStartXfer+0xe68>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	18d3      	adds	r3, r2, r3
 8005d00:	183a      	adds	r2, r7, r0
 8005d02:	8812      	ldrh	r2, [r2, #0]
 8005d04:	4913      	ldr	r1, [pc, #76]	; (8005d54 <USB_EPStartXfer+0xe6c>)
 8005d06:	430a      	orrs	r2, r1
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e170      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	78db      	ldrb	r3, [r3, #3]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d000      	beq.n	8005d18 <USB_EPStartXfer+0xe30>
 8005d16:	e169      	b.n	8005fec <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d919      	bls.n	8005d58 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	1d7a      	adds	r2, r7, #5
 8005d2a:	32ff      	adds	r2, #255	; 0xff
 8005d2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	1d7b      	adds	r3, r7, #5
 8005d34:	33ff      	adds	r3, #255	; 0xff
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	619a      	str	r2, [r3, #24]
 8005d3e:	e013      	b.n	8005d68 <USB_EPStartXfer+0xe80>
 8005d40:	ffff8000 	.word	0xffff8000
 8005d44:	00000402 	.word	0x00000402
 8005d48:	ffff83ff 	.word	0xffff83ff
 8005d4c:	00000406 	.word	0x00000406
 8005d50:	ffff8f8f 	.word	0xffff8f8f
 8005d54:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	1d7a      	adds	r2, r7, #5
 8005d5e:	32ff      	adds	r2, #255	; 0xff
 8005d60:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2200      	movs	r2, #0
 8005d66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d000      	beq.n	8005d72 <USB_EPStartXfer+0xe8a>
 8005d70:	e075      	b.n	8005e5e <USB_EPStartXfer+0xf76>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	21cc      	movs	r1, #204	; 0xcc
 8005d76:	187a      	adds	r2, r7, r1
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2250      	movs	r2, #80	; 0x50
 8005d7e:	5a9b      	ldrh	r3, [r3, r2]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	001a      	movs	r2, r3
 8005d84:	187b      	adds	r3, r7, r1
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	187a      	adds	r2, r7, r1
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	00da      	lsls	r2, r3, #3
 8005d94:	187b      	adds	r3, r7, r1
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	4aaa      	ldr	r2, [pc, #680]	; (8006044 <USB_EPStartXfer+0x115c>)
 8005d9c:	4694      	mov	ip, r2
 8005d9e:	4463      	add	r3, ip
 8005da0:	21c8      	movs	r1, #200	; 0xc8
 8005da2:	187a      	adds	r2, r7, r1
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	1d7b      	adds	r3, r7, #5
 8005da8:	33ff      	adds	r3, #255	; 0xff
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d114      	bne.n	8005dda <USB_EPStartXfer+0xef2>
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4aa3      	ldr	r2, [pc, #652]	; (8006048 <USB_EPStartXfer+0x1160>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	187b      	adds	r3, r7, r1
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	187b      	adds	r3, r7, r1
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4a9f      	ldr	r2, [pc, #636]	; (800604c <USB_EPStartXfer+0x1164>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	187b      	adds	r3, r7, r1
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e066      	b.n	8005ea8 <USB_EPStartXfer+0xfc0>
 8005dda:	1d7b      	adds	r3, r7, #5
 8005ddc:	33ff      	adds	r3, #255	; 0xff
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b3e      	cmp	r3, #62	; 0x3e
 8005de2:	d81c      	bhi.n	8005e1e <USB_EPStartXfer+0xf36>
 8005de4:	1d7b      	adds	r3, r7, #5
 8005de6:	33ff      	adds	r3, #255	; 0xff
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	21dc      	movs	r1, #220	; 0xdc
 8005dee:	187a      	adds	r2, r7, r1
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	1d7b      	adds	r3, r7, #5
 8005df4:	33ff      	adds	r3, #255	; 0xff
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <USB_EPStartXfer+0xf20>
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3301      	adds	r3, #1
 8005e04:	187a      	adds	r2, r7, r1
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	23dc      	movs	r3, #220	; 0xdc
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	23c8      	movs	r3, #200	; 0xc8
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e044      	b.n	8005ea8 <USB_EPStartXfer+0xfc0>
 8005e1e:	1d7b      	adds	r3, r7, #5
 8005e20:	33ff      	adds	r3, #255	; 0xff
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	21dc      	movs	r1, #220	; 0xdc
 8005e28:	187a      	adds	r2, r7, r1
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	1d7b      	adds	r3, r7, #5
 8005e2e:	33ff      	adds	r3, #255	; 0xff
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	221f      	movs	r2, #31
 8005e34:	4013      	ands	r3, r2
 8005e36:	d104      	bne.n	8005e42 <USB_EPStartXfer+0xf5a>
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	187a      	adds	r2, r7, r1
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	23dc      	movs	r3, #220	; 0xdc
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	4a7f      	ldr	r2, [pc, #508]	; (800604c <USB_EPStartXfer+0x1164>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	23c8      	movs	r3, #200	; 0xc8
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e024      	b.n	8005ea8 <USB_EPStartXfer+0xfc0>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d120      	bne.n	8005ea8 <USB_EPStartXfer+0xfc0>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	21d4      	movs	r1, #212	; 0xd4
 8005e6a:	187a      	adds	r2, r7, r1
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2250      	movs	r2, #80	; 0x50
 8005e72:	5a9b      	ldrh	r3, [r3, r2]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	001a      	movs	r2, r3
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	189b      	adds	r3, r3, r2
 8005e7e:	187a      	adds	r2, r7, r1
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	00da      	lsls	r2, r3, #3
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	18d3      	adds	r3, r2, r3
 8005e8e:	4a6d      	ldr	r2, [pc, #436]	; (8006044 <USB_EPStartXfer+0x115c>)
 8005e90:	4694      	mov	ip, r2
 8005e92:	4463      	add	r3, ip
 8005e94:	21d0      	movs	r1, #208	; 0xd0
 8005e96:	187a      	adds	r2, r7, r1
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	1d7b      	adds	r3, r7, #5
 8005e9c:	33ff      	adds	r3, #255	; 0xff
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	187b      	adds	r3, r7, r1
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	22c4      	movs	r2, #196	; 0xc4
 8005eac:	18ba      	adds	r2, r7, r2
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d000      	beq.n	8005eba <USB_EPStartXfer+0xfd2>
 8005eb8:	e075      	b.n	8005fa6 <USB_EPStartXfer+0x10be>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	21bc      	movs	r1, #188	; 0xbc
 8005ebe:	187a      	adds	r2, r7, r1
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2250      	movs	r2, #80	; 0x50
 8005ec6:	5a9b      	ldrh	r3, [r3, r2]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	001a      	movs	r2, r3
 8005ecc:	187b      	adds	r3, r7, r1
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	189b      	adds	r3, r3, r2
 8005ed2:	187a      	adds	r2, r7, r1
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	00da      	lsls	r2, r3, #3
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	18d3      	adds	r3, r2, r3
 8005ee2:	4a5b      	ldr	r2, [pc, #364]	; (8006050 <USB_EPStartXfer+0x1168>)
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	4463      	add	r3, ip
 8005ee8:	21b8      	movs	r1, #184	; 0xb8
 8005eea:	187a      	adds	r2, r7, r1
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	1d7b      	adds	r3, r7, #5
 8005ef0:	33ff      	adds	r3, #255	; 0xff
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d114      	bne.n	8005f22 <USB_EPStartXfer+0x103a>
 8005ef8:	187b      	adds	r3, r7, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4a51      	ldr	r2, [pc, #324]	; (8006048 <USB_EPStartXfer+0x1160>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	4a4d      	ldr	r2, [pc, #308]	; (800604c <USB_EPStartXfer+0x1164>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e066      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
 8005f22:	1d7b      	adds	r3, r7, #5
 8005f24:	33ff      	adds	r3, #255	; 0xff
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2a:	d81c      	bhi.n	8005f66 <USB_EPStartXfer+0x107e>
 8005f2c:	1d7b      	adds	r3, r7, #5
 8005f2e:	33ff      	adds	r3, #255	; 0xff
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	21d8      	movs	r1, #216	; 0xd8
 8005f36:	187a      	adds	r2, r7, r1
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	1d7b      	adds	r3, r7, #5
 8005f3c:	33ff      	adds	r3, #255	; 0xff
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	4013      	ands	r3, r2
 8005f44:	d004      	beq.n	8005f50 <USB_EPStartXfer+0x1068>
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	187a      	adds	r2, r7, r1
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	23d8      	movs	r3, #216	; 0xd8
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	23b8      	movs	r3, #184	; 0xb8
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	e044      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
 8005f66:	1d7b      	adds	r3, r7, #5
 8005f68:	33ff      	adds	r3, #255	; 0xff
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	21d8      	movs	r1, #216	; 0xd8
 8005f70:	187a      	adds	r2, r7, r1
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	1d7b      	adds	r3, r7, #5
 8005f76:	33ff      	adds	r3, #255	; 0xff
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	221f      	movs	r2, #31
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d104      	bne.n	8005f8a <USB_EPStartXfer+0x10a2>
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	187a      	adds	r2, r7, r1
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	23d8      	movs	r3, #216	; 0xd8
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	029b      	lsls	r3, r3, #10
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4a2d      	ldr	r2, [pc, #180]	; (800604c <USB_EPStartXfer+0x1164>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	23b8      	movs	r3, #184	; 0xb8
 8005f9e:	18fb      	adds	r3, r7, r3
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e024      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d120      	bne.n	8005ff0 <USB_EPStartXfer+0x1108>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2250      	movs	r2, #80	; 0x50
 8005fb2:	5a9b      	ldrh	r3, [r3, r2]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	21c4      	movs	r1, #196	; 0xc4
 8005fba:	187b      	adds	r3, r7, r1
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	187a      	adds	r2, r7, r1
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	00da      	lsls	r2, r3, #3
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	18d3      	adds	r3, r2, r3
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <USB_EPStartXfer+0x1168>)
 8005fd2:	4694      	mov	ip, r2
 8005fd4:	4463      	add	r3, ip
 8005fd6:	21c0      	movs	r1, #192	; 0xc0
 8005fd8:	187a      	adds	r2, r7, r1
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	1d7b      	adds	r3, r7, #5
 8005fde:	33ff      	adds	r3, #255	; 0xff
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e001      	b.n	8005ff0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e025      	b.n	800603c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	18d3      	adds	r3, r2, r3
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	208a      	movs	r0, #138	; 0x8a
 8006000:	183b      	adds	r3, r7, r0
 8006002:	4914      	ldr	r1, [pc, #80]	; (8006054 <USB_EPStartXfer+0x116c>)
 8006004:	400a      	ands	r2, r1
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	183b      	adds	r3, r7, r0
 800600a:	183a      	adds	r2, r7, r0
 800600c:	8812      	ldrh	r2, [r2, #0]
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	0149      	lsls	r1, r1, #5
 8006012:	404a      	eors	r2, r1
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	183b      	adds	r3, r7, r0
 8006018:	183a      	adds	r2, r7, r0
 800601a:	8812      	ldrh	r2, [r2, #0]
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	0189      	lsls	r1, r1, #6
 8006020:	404a      	eors	r2, r1
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	18d3      	adds	r3, r2, r3
 800602e:	183a      	adds	r2, r7, r0
 8006030:	8812      	ldrh	r2, [r2, #0]
 8006032:	4909      	ldr	r1, [pc, #36]	; (8006058 <USB_EPStartXfer+0x1170>)
 8006034:	430a      	orrs	r2, r1
 8006036:	b292      	uxth	r2, r2
 8006038:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b043      	add	sp, #268	; 0x10c
 8006042:	bd90      	pop	{r4, r7, pc}
 8006044:	00000402 	.word	0x00000402
 8006048:	ffff83ff 	.word	0xffff83ff
 800604c:	ffff8000 	.word	0xffff8000
 8006050:	00000406 	.word	0x00000406
 8006054:	ffffbf8f 	.word	0xffffbf8f
 8006058:	ffff8080 	.word	0xffff8080

0800605c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01d      	beq.n	80060aa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	18d3      	adds	r3, r2, r3
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29a      	uxth	r2, r3
 800607c:	200c      	movs	r0, #12
 800607e:	183b      	adds	r3, r7, r0
 8006080:	491b      	ldr	r1, [pc, #108]	; (80060f0 <USB_EPSetStall+0x94>)
 8006082:	400a      	ands	r2, r1
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	183b      	adds	r3, r7, r0
 8006088:	183a      	adds	r2, r7, r0
 800608a:	8812      	ldrh	r2, [r2, #0]
 800608c:	2110      	movs	r1, #16
 800608e:	404a      	eors	r2, r1
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	18d3      	adds	r3, r2, r3
 800609c:	183a      	adds	r2, r7, r0
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	4914      	ldr	r1, [pc, #80]	; (80060f4 <USB_EPSetStall+0x98>)
 80060a2:	430a      	orrs	r2, r1
 80060a4:	b292      	uxth	r2, r2
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e01d      	b.n	80060e6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	18d3      	adds	r3, r2, r3
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	200e      	movs	r0, #14
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	490e      	ldr	r1, [pc, #56]	; (80060f8 <USB_EPSetStall+0x9c>)
 80060be:	400a      	ands	r2, r1
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	183b      	adds	r3, r7, r0
 80060c4:	183a      	adds	r2, r7, r0
 80060c6:	8812      	ldrh	r2, [r2, #0]
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	0149      	lsls	r1, r1, #5
 80060cc:	404a      	eors	r2, r1
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	18d3      	adds	r3, r2, r3
 80060da:	183a      	adds	r2, r7, r0
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	4905      	ldr	r1, [pc, #20]	; (80060f4 <USB_EPSetStall+0x98>)
 80060e0:	430a      	orrs	r2, r1
 80060e2:	b292      	uxth	r2, r2
 80060e4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b004      	add	sp, #16
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	ffff8fbf 	.word	0xffff8fbf
 80060f4:	ffff8080 	.word	0xffff8080
 80060f8:	ffffbf8f 	.word	0xffffbf8f

080060fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	7b1b      	ldrb	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d000      	beq.n	8006110 <USB_EPClearStall+0x14>
 800610e:	e095      	b.n	800623c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d046      	beq.n	80061a6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	2110      	movs	r1, #16
 8006124:	187b      	adds	r3, r7, r1
 8006126:	8812      	ldrh	r2, [r2, #0]
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	187b      	adds	r3, r7, r1
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2240      	movs	r2, #64	; 0x40
 8006130:	4013      	ands	r3, r2
 8006132:	d016      	beq.n	8006162 <USB_EPClearStall+0x66>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	18d3      	adds	r3, r2, r3
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	200e      	movs	r0, #14
 8006144:	183b      	adds	r3, r7, r0
 8006146:	4940      	ldr	r1, [pc, #256]	; (8006248 <USB_EPClearStall+0x14c>)
 8006148:	400a      	ands	r2, r1
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	18d3      	adds	r3, r2, r3
 8006156:	183a      	adds	r2, r7, r0
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	493c      	ldr	r1, [pc, #240]	; (800624c <USB_EPClearStall+0x150>)
 800615c:	430a      	orrs	r2, r1
 800615e:	b292      	uxth	r2, r2
 8006160:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d068      	beq.n	800623c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	18d3      	adds	r3, r2, r3
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29a      	uxth	r2, r3
 8006178:	200c      	movs	r0, #12
 800617a:	183b      	adds	r3, r7, r0
 800617c:	4934      	ldr	r1, [pc, #208]	; (8006250 <USB_EPClearStall+0x154>)
 800617e:	400a      	ands	r2, r1
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	183b      	adds	r3, r7, r0
 8006184:	183a      	adds	r2, r7, r0
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	2120      	movs	r1, #32
 800618a:	404a      	eors	r2, r1
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	18d3      	adds	r3, r2, r3
 8006198:	183a      	adds	r2, r7, r0
 800619a:	8812      	ldrh	r2, [r2, #0]
 800619c:	492d      	ldr	r1, [pc, #180]	; (8006254 <USB_EPClearStall+0x158>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	b292      	uxth	r2, r2
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e04a      	b.n	800623c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	18d2      	adds	r2, r2, r3
 80061b0:	2116      	movs	r1, #22
 80061b2:	187b      	adds	r3, r7, r1
 80061b4:	8812      	ldrh	r2, [r2, #0]
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	4013      	ands	r3, r2
 80061c2:	d016      	beq.n	80061f2 <USB_EPClearStall+0xf6>
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	18d3      	adds	r3, r2, r3
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	2014      	movs	r0, #20
 80061d4:	183b      	adds	r3, r7, r0
 80061d6:	491c      	ldr	r1, [pc, #112]	; (8006248 <USB_EPClearStall+0x14c>)
 80061d8:	400a      	ands	r2, r1
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	18d3      	adds	r3, r2, r3
 80061e6:	183a      	adds	r2, r7, r0
 80061e8:	8812      	ldrh	r2, [r2, #0]
 80061ea:	491b      	ldr	r1, [pc, #108]	; (8006258 <USB_EPClearStall+0x15c>)
 80061ec:	430a      	orrs	r2, r1
 80061ee:	b292      	uxth	r2, r2
 80061f0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	18d3      	adds	r3, r2, r3
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	2012      	movs	r0, #18
 8006202:	183b      	adds	r3, r7, r0
 8006204:	4915      	ldr	r1, [pc, #84]	; (800625c <USB_EPClearStall+0x160>)
 8006206:	400a      	ands	r2, r1
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	183b      	adds	r3, r7, r0
 800620c:	183a      	adds	r2, r7, r0
 800620e:	8812      	ldrh	r2, [r2, #0]
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	0149      	lsls	r1, r1, #5
 8006214:	404a      	eors	r2, r1
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	183b      	adds	r3, r7, r0
 800621a:	183a      	adds	r2, r7, r0
 800621c:	8812      	ldrh	r2, [r2, #0]
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	0189      	lsls	r1, r1, #6
 8006222:	404a      	eors	r2, r1
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	18d3      	adds	r3, r2, r3
 8006230:	183a      	adds	r2, r7, r0
 8006232:	8812      	ldrh	r2, [r2, #0]
 8006234:	4907      	ldr	r1, [pc, #28]	; (8006254 <USB_EPClearStall+0x158>)
 8006236:	430a      	orrs	r2, r1
 8006238:	b292      	uxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	0018      	movs	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	b006      	add	sp, #24
 8006244:	bd80      	pop	{r7, pc}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	ffff8f8f 	.word	0xffff8f8f
 800624c:	ffff80c0 	.word	0xffff80c0
 8006250:	ffff8fbf 	.word	0xffff8fbf
 8006254:	ffff8080 	.word	0xffff8080
 8006258:	ffffc080 	.word	0xffffc080
 800625c:	ffffbf8f 	.word	0xffffbf8f

08006260 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	000a      	movs	r2, r1
 800626a:	1cfb      	adds	r3, r7, #3
 800626c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800626e:	1cfb      	adds	r3, r7, #3
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	224c      	movs	r2, #76	; 0x4c
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2258      	movs	r2, #88	; 0x58
 8006294:	5a9b      	ldrh	r3, [r3, r2]
 8006296:	b29b      	uxth	r3, r3
 8006298:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <USB_DevConnect+0x28>)
 800629a:	4313      	orrs	r3, r2
 800629c:	b299      	uxth	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2258      	movs	r2, #88	; 0x58
 80062a2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b002      	add	sp, #8
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	ffff8000 	.word	0xffff8000

080062b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2244      	movs	r2, #68	; 0x44
 80062c0:	5a9b      	ldrh	r3, [r3, r2]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b004      	add	sp, #16
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	0019      	movs	r1, r3
 80062dc:	1dbb      	adds	r3, r7, #6
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	1c0a      	adds	r2, r1, #0
 80062e4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062f8:	1dbb      	adds	r3, r7, #6
 80062fa:	881a      	ldrh	r2, [r3, #0]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	18d3      	adds	r3, r2, r3
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	00d2      	lsls	r2, r2, #3
 8006304:	4694      	mov	ip, r2
 8006306:	4463      	add	r3, ip
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800630e:	e01b      	b.n	8006348 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	3301      	adds	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	b29b      	uxth	r3, r3
 8006326:	001a      	movs	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	b29a      	uxth	r2, r3
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	3302      	adds	r3, #2
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	3301      	adds	r3, #1
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	3b01      	subs	r3, #1
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e0      	bne.n	8006310 <USB_WritePMA+0x40>
  }
}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b00c      	add	sp, #48	; 0x30
 8006356:	bd80      	pop	{r7, pc}

08006358 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	0019      	movs	r1, r3
 8006364:	1dbb      	adds	r3, r7, #6
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	1c0a      	adds	r2, r1, #0
 800636c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	b29b      	uxth	r3, r3
 8006376:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006380:	1dbb      	adds	r3, r7, #6
 8006382:	881a      	ldrh	r2, [r3, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	00d2      	lsls	r2, r2, #3
 800638c:	4694      	mov	ip, r2
 800638e:	4463      	add	r3, ip
 8006390:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	e018      	b.n	80063ca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	3302      	adds	r3, #2
 80063a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3301      	adds	r3, #1
 80063b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	3b01      	subs	r3, #1
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e3      	bne.n	8006398 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	4013      	ands	r3, r2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	701a      	strb	r2, [r3, #0]
  }
}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b00a      	add	sp, #40	; 0x28
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	000a      	movs	r2, r1
 8006400:	1cfb      	adds	r3, r7, #3
 8006402:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006404:	230f      	movs	r3, #15
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7c1b      	ldrb	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	2181      	movs	r1, #129	; 0x81
 800641e:	f002 f896 	bl	800854e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006428:	2380      	movs	r3, #128	; 0x80
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	2101      	movs	r1, #1
 8006432:	f002 f88c 	bl	800854e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	23b6      	movs	r3, #182	; 0xb6
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	2101      	movs	r1, #1
 800643e:	50d1      	str	r1, [r2, r3]
 8006440:	e013      	b.n	800646a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2202      	movs	r2, #2
 8006448:	2181      	movs	r1, #129	; 0x81
 800644a:	f002 f880 	bl	800854e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	2202      	movs	r2, #2
 800645a:	2101      	movs	r1, #1
 800645c:	f002 f877 	bl	800854e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	23b6      	movs	r3, #182	; 0xb6
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	2101      	movs	r1, #1
 8006468:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	2308      	movs	r3, #8
 800646e:	2203      	movs	r2, #3
 8006470:	2182      	movs	r1, #130	; 0x82
 8006472:	f002 f86c 	bl	800854e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800647c:	2387      	movs	r3, #135	; 0x87
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	0018      	movs	r0, r3
 8006482:	f002 f9fd 	bl	8008880 <USBD_static_malloc>
 8006486:	0001      	movs	r1, r0
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	23ae      	movs	r3, #174	; 0xae
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	23ae      	movs	r3, #174	; 0xae
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	58d3      	ldr	r3, [r2, r3]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800649c:	230f      	movs	r3, #15
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e02c      	b.n	8006500 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	23ae      	movs	r3, #174	; 0xae
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	58d3      	ldr	r3, [r2, r3]
 80064ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	23af      	movs	r3, #175	; 0xaf
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	58d3      	ldr	r3, [r2, r3]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	2385      	movs	r3, #133	; 0x85
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	2100      	movs	r1, #0
 80064c4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	2386      	movs	r3, #134	; 0x86
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	2100      	movs	r1, #0
 80064ce:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7c1b      	ldrb	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	2381      	movs	r3, #129	; 0x81
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	58d2      	ldr	r2, [r2, r3]
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	2101      	movs	r1, #1
 80064e8:	f002 f97c 	bl	80087e4 <USBD_LL_PrepareReceive>
 80064ec:	e008      	b.n	8006500 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	2381      	movs	r3, #129	; 0x81
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	58d2      	ldr	r2, [r2, r3]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	2101      	movs	r1, #1
 80064fc:	f002 f972 	bl	80087e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006500:	230f      	movs	r3, #15
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	781b      	ldrb	r3, [r3, #0]
}
 8006506:	0018      	movs	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	b004      	add	sp, #16
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	000a      	movs	r2, r1
 8006518:	1cfb      	adds	r3, r7, #3
 800651a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800651c:	230f      	movs	r3, #15
 800651e:	18fb      	adds	r3, r7, r3
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2181      	movs	r1, #129	; 0x81
 8006528:	0018      	movs	r0, r3
 800652a:	f002 f847 	bl	80085bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2101      	movs	r1, #1
 8006538:	0018      	movs	r0, r3
 800653a:	f002 f83f 	bl	80085bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	23b6      	movs	r3, #182	; 0xb6
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	2100      	movs	r1, #0
 8006546:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2182      	movs	r1, #130	; 0x82
 800654c:	0018      	movs	r0, r3
 800654e:	f002 f835 	bl	80085bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	23ae      	movs	r3, #174	; 0xae
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	58d3      	ldr	r3, [r2, r3]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	23af      	movs	r3, #175	; 0xaf
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	23ae      	movs	r3, #174	; 0xae
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	58d3      	ldr	r3, [r2, r3]
 8006578:	0018      	movs	r0, r3
 800657a:	f002 f98d 	bl	8008898 <USBD_static_free>
    pdev->pClassData = NULL;
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	23ae      	movs	r3, #174	; 0xae
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	2100      	movs	r1, #0
 8006586:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8006588:	230f      	movs	r3, #15
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	781b      	ldrb	r3, [r3, #0]
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b004      	add	sp, #16
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	23ae      	movs	r3, #174	; 0xae
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	58d3      	ldr	r3, [r2, r3]
 80065aa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065ac:	230f      	movs	r3, #15
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80065b4:	230c      	movs	r3, #12
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	2200      	movs	r2, #0
 80065ba:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80065bc:	2317      	movs	r3, #23
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	001a      	movs	r2, r3
 80065ca:	2360      	movs	r3, #96	; 0x60
 80065cc:	4013      	ands	r3, r2
 80065ce:	d03d      	beq.n	800664c <USBD_CDC_Setup+0xb4>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d000      	beq.n	80065d6 <USBD_CDC_Setup+0x3e>
 80065d4:	e094      	b.n	8006700 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	88db      	ldrh	r3, [r3, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d02b      	beq.n	8006636 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da12      	bge.n	800660e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	23af      	movs	r3, #175	; 0xaf
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	58d3      	ldr	r3, [r2, r3]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80065f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	88d2      	ldrh	r2, [r2, #6]
 80065fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	88da      	ldrh	r2, [r3, #6]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0018      	movs	r0, r3
 8006608:	f001 fbb2 	bl	8007d70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800660c:	e083      	b.n	8006716 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	7859      	ldrb	r1, [r3, #1]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	b2d9      	uxtb	r1, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4a40      	ldr	r2, [pc, #256]	; (8006724 <USBD_CDC_Setup+0x18c>)
 8006624:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006626:	6939      	ldr	r1, [r7, #16]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	88da      	ldrh	r2, [r3, #6]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	0018      	movs	r0, r3
 8006630:	f001 fbd1 	bl	8007dd6 <USBD_CtlPrepareRx>
      break;
 8006634:	e06f      	b.n	8006716 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	23af      	movs	r3, #175	; 0xaf
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	58d3      	ldr	r3, [r2, r3]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	7850      	ldrb	r0, [r2, #1]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	4798      	blx	r3
      break;
 800664a:	e064      	b.n	8006716 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b0b      	cmp	r3, #11
 8006652:	d037      	beq.n	80066c4 <USBD_CDC_Setup+0x12c>
 8006654:	dc47      	bgt.n	80066e6 <USBD_CDC_Setup+0x14e>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <USBD_CDC_Setup+0xc8>
 800665a:	2b0a      	cmp	r3, #10
 800665c:	d019      	beq.n	8006692 <USBD_CDC_Setup+0xfa>
 800665e:	e042      	b.n	80066e6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	23a7      	movs	r3, #167	; 0xa7
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	5cd3      	ldrb	r3, [r2, r3]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d107      	bne.n	800667c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800666c:	230c      	movs	r3, #12
 800666e:	18f9      	adds	r1, r7, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	0018      	movs	r0, r3
 8006676:	f001 fb7b 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800667a:	e040      	b.n	80066fe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f001 faf6 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8006688:	2317      	movs	r3, #23
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2202      	movs	r2, #2
 800668e:	701a      	strb	r2, [r3, #0]
          break;
 8006690:	e035      	b.n	80066fe <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	23a7      	movs	r3, #167	; 0xa7
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	5cd3      	ldrb	r3, [r2, r3]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d107      	bne.n	80066ae <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800669e:	230f      	movs	r3, #15
 80066a0:	18f9      	adds	r1, r7, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	0018      	movs	r0, r3
 80066a8:	f001 fb62 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066ac:	e027      	b.n	80066fe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0011      	movs	r1, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f001 fadd 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80066ba:	2317      	movs	r3, #23
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
          break;
 80066c2:	e01c      	b.n	80066fe <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	23a7      	movs	r3, #167	; 0xa7
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	5cd3      	ldrb	r3, [r2, r3]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d015      	beq.n	80066fc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	0011      	movs	r1, r2
 80066d6:	0018      	movs	r0, r3
 80066d8:	f001 facc 	bl	8007c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80066dc:	2317      	movs	r3, #23
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	2202      	movs	r2, #2
 80066e2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80066e4:	e00a      	b.n	80066fc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0011      	movs	r1, r2
 80066ec:	0018      	movs	r0, r3
 80066ee:	f001 fac1 	bl	8007c74 <USBD_CtlError>
          ret = USBD_FAIL;
 80066f2:	2317      	movs	r3, #23
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	2202      	movs	r2, #2
 80066f8:	701a      	strb	r2, [r3, #0]
          break;
 80066fa:	e000      	b.n	80066fe <USBD_CDC_Setup+0x166>
          break;
 80066fc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80066fe:	e00a      	b.n	8006716 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0011      	movs	r1, r2
 8006706:	0018      	movs	r0, r3
 8006708:	f001 fab4 	bl	8007c74 <USBD_CtlError>
      ret = USBD_FAIL;
 800670c:	2317      	movs	r3, #23
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	2202      	movs	r2, #2
 8006712:	701a      	strb	r2, [r3, #0]
      break;
 8006714:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006716:	2317      	movs	r3, #23
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	781b      	ldrb	r3, [r3, #0]
}
 800671c:	0018      	movs	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	b006      	add	sp, #24
 8006722:	bd80      	pop	{r7, pc}
 8006724:	00000201 	.word	0x00000201

08006728 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	000a      	movs	r2, r1
 8006732:	1cfb      	adds	r3, r7, #3
 8006734:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	23ae      	movs	r3, #174	; 0xae
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	58d3      	ldr	r3, [r2, r3]
 800673e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	23b0      	movs	r3, #176	; 0xb0
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	58d3      	ldr	r3, [r2, r3]
 8006748:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	23ae      	movs	r3, #174	; 0xae
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	58d3      	ldr	r3, [r2, r3]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d03e      	beq.n	80067d4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006756:	1cfb      	adds	r3, r7, #3
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	0013      	movs	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	189b      	adds	r3, r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	18cb      	adds	r3, r1, r3
 8006766:	331c      	adds	r3, #28
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02b      	beq.n	80067c6 <USBD_CDC_DataIn+0x9e>
 800676e:	1cfb      	adds	r3, r7, #3
 8006770:	781a      	ldrb	r2, [r3, #0]
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	0013      	movs	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	189b      	adds	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	18cb      	adds	r3, r1, r3
 800677e:	331c      	adds	r3, #28
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	1cfb      	adds	r3, r7, #3
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	0013      	movs	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	189b      	adds	r3, r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	18cb      	adds	r3, r1, r3
 8006792:	3338      	adds	r3, #56	; 0x38
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	0019      	movs	r1, r3
 8006798:	f7f9 fd3c 	bl	8000214 <__aeabi_uidivmod>
 800679c:	1e0b      	subs	r3, r1, #0
 800679e:	d112      	bne.n	80067c6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067a0:	1cfb      	adds	r3, r7, #3
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	0013      	movs	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	18cb      	adds	r3, r1, r3
 80067b0:	331c      	adds	r3, #28
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067b6:	1cfb      	adds	r3, r7, #3
 80067b8:	7819      	ldrb	r1, [r3, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	2300      	movs	r3, #0
 80067be:	2200      	movs	r2, #0
 80067c0:	f001 ffd9 	bl	8008776 <USBD_LL_Transmit>
 80067c4:	e004      	b.n	80067d0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	2385      	movs	r3, #133	; 0x85
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	2100      	movs	r1, #0
 80067ce:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	0018      	movs	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	b004      	add	sp, #16
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	000a      	movs	r2, r1
 80067e8:	1cfb      	adds	r3, r7, #3
 80067ea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	23ae      	movs	r3, #174	; 0xae
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	58d3      	ldr	r3, [r2, r3]
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067f6:	1cfb      	adds	r3, r7, #3
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f002 f827 	bl	8008852 <USBD_LL_GetRxDataSize>
 8006804:	0001      	movs	r1, r0
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	2383      	movs	r3, #131	; 0x83
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	23ae      	movs	r3, #174	; 0xae
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	58d3      	ldr	r3, [r2, r3]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	23af      	movs	r3, #175	; 0xaf
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	58d3      	ldr	r3, [r2, r3]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68f9      	ldr	r1, [r7, #12]
 8006826:	2381      	movs	r3, #129	; 0x81
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	58c8      	ldr	r0, [r1, r3]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2183      	movs	r1, #131	; 0x83
 8006830:	0089      	lsls	r1, r1, #2
 8006832:	468c      	mov	ip, r1
 8006834:	4463      	add	r3, ip
 8006836:	0019      	movs	r1, r3
 8006838:	4790      	blx	r2

    return USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b004      	add	sp, #16
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	23ae      	movs	r3, #174	; 0xae
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	58d3      	ldr	r3, [r2, r3]
 8006858:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	23af      	movs	r3, #175	; 0xaf
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	58d3      	ldr	r3, [r2, r3]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d019      	beq.n	800689a <USBD_CDC_EP0_RxReady+0x52>
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	5cd3      	ldrb	r3, [r2, r3]
 800686e:	2bff      	cmp	r3, #255	; 0xff
 8006870:	d013      	beq.n	800689a <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	23af      	movs	r3, #175	; 0xaf
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	58d3      	ldr	r3, [r2, r3]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	2280      	movs	r2, #128	; 0x80
 8006880:	0092      	lsls	r2, r2, #2
 8006882:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006884:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4c06      	ldr	r4, [pc, #24]	; (80068a4 <USBD_CDC_EP0_RxReady+0x5c>)
 800688a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800688c:	b292      	uxth	r2, r2
 800688e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	21ff      	movs	r1, #255	; 0xff
 8006898:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b005      	add	sp, #20
 80068a2:	bd90      	pop	{r4, r7, pc}
 80068a4:	00000201 	.word	0x00000201

080068a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2243      	movs	r2, #67	; 0x43
 80068b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80068b6:	4b02      	ldr	r3, [pc, #8]	; (80068c0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000094 	.word	0x20000094

080068c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2243      	movs	r2, #67	; 0x43
 80068d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068d2:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80068d4:	0018      	movs	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	b002      	add	sp, #8
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000050 	.word	0x20000050

080068e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2243      	movs	r2, #67	; 0x43
 80068ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068ee:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80068f0:	0018      	movs	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b002      	add	sp, #8
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	200000d8 	.word	0x200000d8

080068fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	220a      	movs	r2, #10
 8006908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800690a:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b002      	add	sp, #8
 8006912:	bd80      	pop	{r7, pc}
 8006914:	2000000c 	.word	0x2000000c

08006918 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006922:	200f      	movs	r0, #15
 8006924:	183b      	adds	r3, r7, r0
 8006926:	2202      	movs	r2, #2
 8006928:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	23af      	movs	r3, #175	; 0xaf
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800693a:	183b      	adds	r3, r7, r0
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006940:	230f      	movs	r3, #15
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	781b      	ldrb	r3, [r3, #0]
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b004      	add	sp, #16
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	1dbb      	adds	r3, r7, #6
 800695a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	23ae      	movs	r3, #174	; 0xae
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	58d3      	ldr	r3, [r2, r3]
 8006964:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	2382      	movs	r3, #130	; 0x82
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	8819      	ldrh	r1, [r3, #0]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	2384      	movs	r3, #132	; 0x84
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	0018      	movs	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	b006      	add	sp, #24
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	23ae      	movs	r3, #174	; 0xae
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	58d3      	ldr	r3, [r2, r3]
 8006998:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	2381      	movs	r3, #129	; 0x81
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	23ae      	movs	r3, #174	; 0xae
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	58d3      	ldr	r3, [r2, r3]
 80069be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	23ae      	movs	r3, #174	; 0xae
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	58d3      	ldr	r3, [r2, r3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	2385      	movs	r3, #133	; 0x85
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	58d3      	ldr	r3, [r2, r3]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	2385      	movs	r3, #133	; 0x85
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	2101      	movs	r1, #1
 80069e0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	2384      	movs	r3, #132	; 0x84
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	58d2      	ldr	r2, [r2, r3]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	2382      	movs	r3, #130	; 0x82
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	2384      	movs	r3, #132	; 0x84
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	000a      	movs	r2, r1
 8006a04:	2181      	movs	r1, #129	; 0x81
 8006a06:	f001 feb6 	bl	8008776 <USBD_LL_Transmit>

      return USBD_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e002      	b.n	8006a14 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a12:	2302      	movs	r3, #2
  }
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	23ae      	movs	r3, #174	; 0xae
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	58d3      	ldr	r3, [r2, r3]
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	23ae      	movs	r3, #174	; 0xae
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	58d3      	ldr	r3, [r2, r3]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d019      	beq.n	8006a6e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7c1b      	ldrb	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	2381      	movs	r3, #129	; 0x81
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	58d2      	ldr	r2, [r2, r3]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	2101      	movs	r1, #1
 8006a52:	f001 fec7 	bl	80087e4 <USBD_LL_PrepareReceive>
 8006a56:	e008      	b.n	8006a6a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	2381      	movs	r3, #129	; 0x81
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	58d2      	ldr	r2, [r2, r3]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	2340      	movs	r3, #64	; 0x40
 8006a64:	2101      	movs	r1, #1
 8006a66:	f001 febd 	bl	80087e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006a6e:	2302      	movs	r3, #2
  }
}
 8006a70:	0018      	movs	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b004      	add	sp, #16
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	1dfb      	adds	r3, r7, #7
 8006a84:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e020      	b.n	8006ad2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	23ad      	movs	r3, #173	; 0xad
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	58d3      	ldr	r3, [r2, r3]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	23ad      	movs	r3, #173	; 0xad
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	23ac      	movs	r3, #172	; 0xac
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	23a7      	movs	r3, #167	; 0xa7
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	2101      	movs	r1, #1
 8006abe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1dfa      	adds	r2, r7, #7
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f001 fcb6 	bl	800843c <USBD_LL_Init>

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b004      	add	sp, #16
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006ae4:	200f      	movs	r0, #15
 8006ae6:	183b      	adds	r3, r7, r0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	23ad      	movs	r3, #173	; 0xad
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006afc:	183b      	adds	r3, r7, r0
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e003      	b.n	8006b0c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b04:	230f      	movs	r3, #15
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2202      	movs	r2, #2
 8006b0a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006b0c:	230f      	movs	r3, #15
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
}
 8006b12:	0018      	movs	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b004      	add	sp, #16
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	0018      	movs	r0, r3
 8006b26:	f001 fced 	bl	8008504 <USBD_LL_Start>

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b002      	add	sp, #8
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b002      	add	sp, #8
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b46:	b590      	push	{r4, r7, lr}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	000a      	movs	r2, r1
 8006b50:	1cfb      	adds	r3, r7, #3
 8006b52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b54:	240f      	movs	r4, #15
 8006b56:	193b      	adds	r3, r7, r4
 8006b58:	2202      	movs	r2, #2
 8006b5a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	23ad      	movs	r3, #173	; 0xad
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	58d3      	ldr	r3, [r2, r3]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00e      	beq.n	8006b86 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	23ad      	movs	r3, #173	; 0xad
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	58d3      	ldr	r3, [r2, r3]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1cfa      	adds	r2, r7, #3
 8006b74:	7811      	ldrb	r1, [r2, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	0010      	movs	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d102      	bne.n	8006b86 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006b80:	193b      	adds	r3, r7, r4
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006b86:	230f      	movs	r3, #15
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	781b      	ldrb	r3, [r3, #0]
}
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b005      	add	sp, #20
 8006b92:	bd90      	pop	{r4, r7, pc}

08006b94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	000a      	movs	r2, r1
 8006b9e:	1cfb      	adds	r3, r7, #3
 8006ba0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	23ad      	movs	r3, #173	; 0xad
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	58d3      	ldr	r3, [r2, r3]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	1cfa      	adds	r2, r7, #3
 8006bae:	7811      	ldrb	r1, [r2, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	0010      	movs	r0, r2
 8006bb4:	4798      	blx	r3

  return USBD_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	22aa      	movs	r2, #170	; 0xaa
 8006bce:	0092      	lsls	r2, r2, #2
 8006bd0:	4694      	mov	ip, r2
 8006bd2:	4463      	add	r3, ip
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f001 f810 	bl	8007bfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	23a5      	movs	r3, #165	; 0xa5
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	2101      	movs	r1, #1
 8006be6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <USBD_LL_SetupStage+0xb8>)
 8006bec:	5a9b      	ldrh	r3, [r3, r2]
 8006bee:	0019      	movs	r1, r3
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	23a6      	movs	r3, #166	; 0xa6
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	23aa      	movs	r3, #170	; 0xaa
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	5cd3      	ldrb	r3, [r2, r3]
 8006c00:	001a      	movs	r2, r3
 8006c02:	231f      	movs	r3, #31
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d019      	beq.n	8006c3e <USBD_LL_SetupStage+0x7e>
 8006c0a:	d822      	bhi.n	8006c52 <USBD_LL_SetupStage+0x92>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <USBD_LL_SetupStage+0x56>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d00a      	beq.n	8006c2a <USBD_LL_SetupStage+0x6a>
 8006c14:	e01d      	b.n	8006c52 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	22aa      	movs	r2, #170	; 0xaa
 8006c1a:	0092      	lsls	r2, r2, #2
 8006c1c:	189a      	adds	r2, r3, r2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0011      	movs	r1, r2
 8006c22:	0018      	movs	r0, r3
 8006c24:	f000 fa10 	bl	8007048 <USBD_StdDevReq>
      break;
 8006c28:	e020      	b.n	8006c6c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	22aa      	movs	r2, #170	; 0xaa
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	189a      	adds	r2, r3, r2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0011      	movs	r1, r2
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 fa78 	bl	800712c <USBD_StdItfReq>
      break;
 8006c3c:	e016      	b.n	8006c6c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	22aa      	movs	r2, #170	; 0xaa
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	189a      	adds	r2, r3, r2
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 fac5 	bl	80071da <USBD_StdEPReq>
      break;
 8006c50:	e00c      	b.n	8006c6c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	23aa      	movs	r3, #170	; 0xaa
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	227f      	movs	r2, #127	; 0x7f
 8006c5c:	4393      	bics	r3, r2
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0011      	movs	r1, r2
 8006c64:	0018      	movs	r0, r3
 8006c66:	f001 fcd4 	bl	8008612 <USBD_LL_StallEP>
      break;
 8006c6a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	0018      	movs	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b002      	add	sp, #8
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	000002ae 	.word	0x000002ae

08006c7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	200b      	movs	r0, #11
 8006c88:	183b      	adds	r3, r7, r0
 8006c8a:	1c0a      	adds	r2, r1, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c8e:	183b      	adds	r3, r7, r0
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d154      	bne.n	8006d40 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3355      	adds	r3, #85	; 0x55
 8006c9a:	33ff      	adds	r3, #255	; 0xff
 8006c9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	23a5      	movs	r3, #165	; 0xa5
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	58d3      	ldr	r3, [r2, r3]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d139      	bne.n	8006d1e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d919      	bls.n	8006cea <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d203      	bcs.n	8006cd8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	e002      	b.n	8006cde <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	f001 f89b 	bl	8007e1e <USBD_CtlContinueRx>
 8006ce8:	e045      	b.n	8006d76 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	23ad      	movs	r3, #173	; 0xad
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	58d3      	ldr	r3, [r2, r3]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00d      	beq.n	8006d14 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	23a7      	movs	r3, #167	; 0xa7
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d107      	bne.n	8006d14 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	23ad      	movs	r3, #173	; 0xad
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	58d3      	ldr	r3, [r2, r3]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	0010      	movs	r0, r2
 8006d12:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	0018      	movs	r0, r3
 8006d18:	f001 f894 	bl	8007e44 <USBD_CtlSendStatus>
 8006d1c:	e02b      	b.n	8006d76 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	23a5      	movs	r3, #165	; 0xa5
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	58d3      	ldr	r3, [r2, r3]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d125      	bne.n	8006d76 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	23a5      	movs	r3, #165	; 0xa5
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	2100      	movs	r1, #0
 8006d32:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2100      	movs	r1, #0
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f001 fc6a 	bl	8008612 <USBD_LL_StallEP>
 8006d3e:	e01a      	b.n	8006d76 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	23ad      	movs	r3, #173	; 0xad
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	58d3      	ldr	r3, [r2, r3]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d011      	beq.n	8006d72 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	23a7      	movs	r3, #167	; 0xa7
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d10b      	bne.n	8006d72 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	23ad      	movs	r3, #173	; 0xad
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	58d3      	ldr	r3, [r2, r3]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	220b      	movs	r2, #11
 8006d66:	18ba      	adds	r2, r7, r2
 8006d68:	7811      	ldrb	r1, [r2, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	0010      	movs	r0, r2
 8006d6e:	4798      	blx	r3
 8006d70:	e001      	b.n	8006d76 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	e000      	b.n	8006d78 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b006      	add	sp, #24
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	200b      	movs	r0, #11
 8006d8c:	183b      	adds	r3, r7, r0
 8006d8e:	1c0a      	adds	r2, r1, #0
 8006d90:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d92:	183b      	adds	r3, r7, r0
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d000      	beq.n	8006d9c <USBD_LL_DataInStage+0x1c>
 8006d9a:	e08e      	b.n	8006eba <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	23a5      	movs	r3, #165	; 0xa5
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	58d3      	ldr	r3, [r2, r3]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d164      	bne.n	8006e78 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d915      	bls.n	8006de6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 ffec 	bl	8007db0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	f001 fd00 	bl	80087e4 <USBD_LL_PrepareReceive>
 8006de4:	e059      	b.n	8006e9a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	0019      	movs	r1, r3
 8006df0:	0010      	movs	r0, r2
 8006df2:	f7f9 fa0f 	bl	8000214 <__aeabi_uidivmod>
 8006df6:	1e0b      	subs	r3, r1, #0
 8006df8:	d11f      	bne.n	8006e3a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d319      	bcc.n	8006e3a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	23a6      	movs	r3, #166	; 0xa6
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d211      	bcs.n	8006e3a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 ffc7 	bl	8007db0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	23a6      	movs	r3, #166	; 0xa6
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	2100      	movs	r1, #0
 8006e2a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	f001 fcd6 	bl	80087e4 <USBD_LL_PrepareReceive>
 8006e38:	e02f      	b.n	8006e9a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	23ad      	movs	r3, #173	; 0xad
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	58d3      	ldr	r3, [r2, r3]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00d      	beq.n	8006e64 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	23a7      	movs	r3, #167	; 0xa7
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d107      	bne.n	8006e64 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	23ad      	movs	r3, #173	; 0xad
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	58d3      	ldr	r3, [r2, r3]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	0010      	movs	r0, r2
 8006e62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f001 fbd2 	bl	8008612 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 fffb 	bl	8007e6c <USBD_CtlReceiveStatus>
 8006e76:	e010      	b.n	8006e9a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	23a5      	movs	r3, #165	; 0xa5
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	58d3      	ldr	r3, [r2, r3]
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d005      	beq.n	8006e90 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	23a5      	movs	r3, #165	; 0xa5
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	0018      	movs	r0, r3
 8006e96:	f001 fbbc 	bl	8008612 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	23a8      	movs	r3, #168	; 0xa8
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	5cd3      	ldrb	r3, [r2, r3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d124      	bne.n	8006ef0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7ff fe43 	bl	8006b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	23a8      	movs	r3, #168	; 0xa8
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	54d1      	strb	r1, [r2, r3]
 8006eb8:	e01a      	b.n	8006ef0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	23ad      	movs	r3, #173	; 0xad
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	58d3      	ldr	r3, [r2, r3]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d011      	beq.n	8006eec <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	23a7      	movs	r3, #167	; 0xa7
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d10b      	bne.n	8006eec <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	23ad      	movs	r3, #173	; 0xad
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	58d3      	ldr	r3, [r2, r3]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	220b      	movs	r2, #11
 8006ee0:	18ba      	adds	r2, r7, r2
 8006ee2:	7811      	ldrb	r1, [r2, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	0010      	movs	r0, r2
 8006ee8:	4798      	blx	r3
 8006eea:	e001      	b.n	8006ef0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eec:	2302      	movs	r3, #2
 8006eee:	e000      	b.n	8006ef2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b006      	add	sp, #24
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f001 fb20 	bl	800854e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	23ac      	movs	r3, #172	; 0xac
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	2101      	movs	r1, #1
 8006f16:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	23b2      	movs	r3, #178	; 0xb2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	2340      	movs	r3, #64	; 0x40
 8006f26:	2200      	movs	r2, #0
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	f001 fb10 	bl	800854e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2240      	movs	r2, #64	; 0x40
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	23a7      	movs	r3, #167	; 0xa7
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	2101      	movs	r1, #1
 8006f42:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	23a5      	movs	r3, #165	; 0xa5
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	23a9      	movs	r3, #169	; 0xa9
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	23ae      	movs	r3, #174	; 0xae
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	58d3      	ldr	r3, [r2, r3]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	23ad      	movs	r3, #173	; 0xad
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	58d3      	ldr	r3, [r2, r3]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b2d9      	uxtb	r1, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	4790      	blx	r2
  }

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b002      	add	sp, #8
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	000a      	movs	r2, r1
 8006f94:	1cfb      	adds	r3, r7, #3
 8006f96:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1cfa      	adds	r2, r7, #3
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b002      	add	sp, #8
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	23a7      	movs	r3, #167	; 0xa7
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	5cd1      	ldrb	r1, [r2, r3]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a06      	ldr	r2, [pc, #24]	; (8006fd8 <USBD_LL_Suspend+0x2c>)
 8006fc0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	23a7      	movs	r3, #167	; 0xa7
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	2104      	movs	r1, #4
 8006fca:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	0018      	movs	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b002      	add	sp, #8
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	0000029d 	.word	0x0000029d

08006fdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	23a7      	movs	r3, #167	; 0xa7
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	5cd3      	ldrb	r3, [r2, r3]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d106      	bne.n	8006ffe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a05      	ldr	r2, [pc, #20]	; (8007008 <USBD_LL_Resume+0x2c>)
 8006ff4:	5c99      	ldrb	r1, [r3, r2]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	23a7      	movs	r3, #167	; 0xa7
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	0000029d 	.word	0x0000029d

0800700c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	23a7      	movs	r3, #167	; 0xa7
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d10e      	bne.n	800703e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	23ad      	movs	r3, #173	; 0xad
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	58d3      	ldr	r3, [r2, r3]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	23ad      	movs	r3, #173	; 0xad
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	58d3      	ldr	r3, [r2, r3]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	0010      	movs	r0, r2
 800703c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	0018      	movs	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	230f      	movs	r3, #15
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	001a      	movs	r2, r3
 8007060:	2360      	movs	r3, #96	; 0x60
 8007062:	4013      	ands	r3, r2
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d004      	beq.n	8007072 <USBD_StdDevReq+0x2a>
 8007068:	d84f      	bhi.n	800710a <USBD_StdDevReq+0xc2>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBD_StdDevReq+0x3e>
 800706e:	2b20      	cmp	r3, #32
 8007070:	d14b      	bne.n	800710a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	23ad      	movs	r3, #173	; 0xad
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	58d3      	ldr	r3, [r2, r3]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	0010      	movs	r0, r2
 8007082:	4798      	blx	r3
      break;
 8007084:	e048      	b.n	8007118 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b09      	cmp	r3, #9
 800708c:	d835      	bhi.n	80070fa <USBD_StdDevReq+0xb2>
 800708e:	009a      	lsls	r2, r3, #2
 8007090:	4b25      	ldr	r3, [pc, #148]	; (8007128 <USBD_StdDevReq+0xe0>)
 8007092:	18d3      	adds	r3, r2, r3
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	0011      	movs	r1, r2
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 fa52 	bl	8007548 <USBD_GetDescriptor>
          break;
 80070a4:	e030      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0011      	movs	r1, r2
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fbfd 	bl	80078ac <USBD_SetAddress>
          break;
 80070b2:	e029      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	0011      	movs	r1, r2
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 fc4a 	bl	8007954 <USBD_SetConfig>
          break;
 80070c0:	e022      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	0011      	movs	r1, r2
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 fce7 	bl	8007a9c <USBD_GetConfig>
          break;
 80070ce:	e01b      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	0011      	movs	r1, r2
 80070d6:	0018      	movs	r0, r3
 80070d8:	f000 fd1b 	bl	8007b12 <USBD_GetStatus>
          break;
 80070dc:	e014      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	0011      	movs	r1, r2
 80070e4:	0018      	movs	r0, r3
 80070e6:	f000 fd4e 	bl	8007b86 <USBD_SetFeature>
          break;
 80070ea:	e00d      	b.n	8007108 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	0011      	movs	r1, r2
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 fd5d 	bl	8007bb2 <USBD_ClrFeature>
          break;
 80070f8:	e006      	b.n	8007108 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	0011      	movs	r1, r2
 8007100:	0018      	movs	r0, r3
 8007102:	f000 fdb7 	bl	8007c74 <USBD_CtlError>
          break;
 8007106:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007108:	e006      	b.n	8007118 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0011      	movs	r1, r2
 8007110:	0018      	movs	r0, r3
 8007112:	f000 fdaf 	bl	8007c74 <USBD_CtlError>
      break;
 8007116:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007118:	230f      	movs	r3, #15
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	781b      	ldrb	r3, [r3, #0]
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	08008b1c 	.word	0x08008b1c

0800712c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800712c:	b5b0      	push	{r4, r5, r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	230f      	movs	r3, #15
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	001a      	movs	r2, r3
 8007144:	2360      	movs	r3, #96	; 0x60
 8007146:	4013      	ands	r3, r2
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d004      	beq.n	8007156 <USBD_StdItfReq+0x2a>
 800714c:	d839      	bhi.n	80071c2 <USBD_StdItfReq+0x96>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <USBD_StdItfReq+0x2a>
 8007152:	2b20      	cmp	r3, #32
 8007154:	d135      	bne.n	80071c2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	23a7      	movs	r3, #167	; 0xa7
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	5cd3      	ldrb	r3, [r2, r3]
 800715e:	3b01      	subs	r3, #1
 8007160:	2b02      	cmp	r3, #2
 8007162:	d825      	bhi.n	80071b0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	889b      	ldrh	r3, [r3, #4]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d819      	bhi.n	80071a2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	23ad      	movs	r3, #173	; 0xad
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	58d3      	ldr	r3, [r2, r3]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	250f      	movs	r5, #15
 800717a:	197c      	adds	r4, r7, r5
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	0010      	movs	r0, r2
 8007182:	4798      	blx	r3
 8007184:	0003      	movs	r3, r0
 8007186:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d116      	bne.n	80071be <USBD_StdItfReq+0x92>
 8007190:	197b      	adds	r3, r7, r5
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d112      	bne.n	80071be <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0018      	movs	r0, r3
 800719c:	f000 fe52 	bl	8007e44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071a0:	e00d      	b.n	80071be <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	0011      	movs	r1, r2
 80071a8:	0018      	movs	r0, r3
 80071aa:	f000 fd63 	bl	8007c74 <USBD_CtlError>
          break;
 80071ae:	e006      	b.n	80071be <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	0011      	movs	r1, r2
 80071b6:	0018      	movs	r0, r3
 80071b8:	f000 fd5c 	bl	8007c74 <USBD_CtlError>
          break;
 80071bc:	e000      	b.n	80071c0 <USBD_StdItfReq+0x94>
          break;
 80071be:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80071c0:	e006      	b.n	80071d0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fd53 	bl	8007c74 <USBD_CtlError>
      break;
 80071ce:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b004      	add	sp, #16
 80071d8:	bdb0      	pop	{r4, r5, r7, pc}

080071da <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071da:	b5b0      	push	{r4, r5, r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071e4:	230f      	movs	r3, #15
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2200      	movs	r2, #0
 80071ea:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	889a      	ldrh	r2, [r3, #4]
 80071f0:	230e      	movs	r3, #14
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	001a      	movs	r2, r3
 80071fc:	2360      	movs	r3, #96	; 0x60
 80071fe:	4013      	ands	r3, r2
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	d006      	beq.n	8007212 <USBD_StdEPReq+0x38>
 8007204:	d900      	bls.n	8007208 <USBD_StdEPReq+0x2e>
 8007206:	e190      	b.n	800752a <USBD_StdEPReq+0x350>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <USBD_StdEPReq+0x4c>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d000      	beq.n	8007212 <USBD_StdEPReq+0x38>
 8007210:	e18b      	b.n	800752a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	23ad      	movs	r3, #173	; 0xad
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	58d3      	ldr	r3, [r2, r3]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	0010      	movs	r0, r2
 8007222:	4798      	blx	r3
      break;
 8007224:	e188      	b.n	8007538 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	001a      	movs	r2, r3
 800722c:	2360      	movs	r3, #96	; 0x60
 800722e:	4013      	ands	r3, r2
 8007230:	2b20      	cmp	r3, #32
 8007232:	d10f      	bne.n	8007254 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	23ad      	movs	r3, #173	; 0xad
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	58d3      	ldr	r3, [r2, r3]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	250f      	movs	r5, #15
 8007240:	197c      	adds	r4, r7, r5
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	0010      	movs	r0, r2
 8007248:	4798      	blx	r3
 800724a:	0003      	movs	r3, r0
 800724c:	7023      	strb	r3, [r4, #0]

        return ret;
 800724e:	197b      	adds	r3, r7, r5
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	e174      	b.n	800753e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d007      	beq.n	800726c <USBD_StdEPReq+0x92>
 800725c:	dd00      	ble.n	8007260 <USBD_StdEPReq+0x86>
 800725e:	e15c      	b.n	800751a <USBD_StdEPReq+0x340>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d100      	bne.n	8007266 <USBD_StdEPReq+0x8c>
 8007264:	e092      	b.n	800738c <USBD_StdEPReq+0x1b2>
 8007266:	2b01      	cmp	r3, #1
 8007268:	d04b      	beq.n	8007302 <USBD_StdEPReq+0x128>
 800726a:	e156      	b.n	800751a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	23a7      	movs	r3, #167	; 0xa7
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	5cd3      	ldrb	r3, [r2, r3]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d002      	beq.n	800727e <USBD_StdEPReq+0xa4>
 8007278:	2b03      	cmp	r3, #3
 800727a:	d01d      	beq.n	80072b8 <USBD_StdEPReq+0xde>
 800727c:	e039      	b.n	80072f2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800727e:	220e      	movs	r2, #14
 8007280:	18bb      	adds	r3, r7, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <USBD_StdEPReq+0xd0>
 8007288:	18bb      	adds	r3, r7, r2
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d00c      	beq.n	80072aa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007290:	18bb      	adds	r3, r7, r2
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0011      	movs	r1, r2
 8007298:	0018      	movs	r0, r3
 800729a:	f001 f9ba 	bl	8008612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	0018      	movs	r0, r3
 80072a4:	f001 f9b5 	bl	8008612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a8:	e02a      	b.n	8007300 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0011      	movs	r1, r2
 80072b0:	0018      	movs	r0, r3
 80072b2:	f000 fcdf 	bl	8007c74 <USBD_CtlError>
              break;
 80072b6:	e023      	b.n	8007300 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	885b      	ldrh	r3, [r3, #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d113      	bne.n	80072e8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80072c0:	220e      	movs	r2, #14
 80072c2:	18bb      	adds	r3, r7, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <USBD_StdEPReq+0x10e>
 80072ca:	18bb      	adds	r3, r7, r2
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d00a      	beq.n	80072e8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072da:	18bb      	adds	r3, r7, r2
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0011      	movs	r1, r2
 80072e2:	0018      	movs	r0, r3
 80072e4:	f001 f995 	bl	8008612 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 fdaa 	bl	8007e44 <USBD_CtlSendStatus>

              break;
 80072f0:	e006      	b.n	8007300 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	0011      	movs	r1, r2
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 fcbb 	bl	8007c74 <USBD_CtlError>
              break;
 80072fe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007300:	e112      	b.n	8007528 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	23a7      	movs	r3, #167	; 0xa7
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	5cd3      	ldrb	r3, [r2, r3]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d002      	beq.n	8007314 <USBD_StdEPReq+0x13a>
 800730e:	2b03      	cmp	r3, #3
 8007310:	d01d      	beq.n	800734e <USBD_StdEPReq+0x174>
 8007312:	e032      	b.n	800737a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007314:	220e      	movs	r2, #14
 8007316:	18bb      	adds	r3, r7, r2
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <USBD_StdEPReq+0x166>
 800731e:	18bb      	adds	r3, r7, r2
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d00c      	beq.n	8007340 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007326:	18bb      	adds	r3, r7, r2
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0011      	movs	r1, r2
 800732e:	0018      	movs	r0, r3
 8007330:	f001 f96f 	bl	8008612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	0018      	movs	r0, r3
 800733a:	f001 f96a 	bl	8008612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800733e:	e024      	b.n	800738a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	0011      	movs	r1, r2
 8007346:	0018      	movs	r0, r3
 8007348:	f000 fc94 	bl	8007c74 <USBD_CtlError>
              break;
 800734c:	e01d      	b.n	800738a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d118      	bne.n	8007388 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007356:	210e      	movs	r1, #14
 8007358:	187b      	adds	r3, r7, r1
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	227f      	movs	r2, #127	; 0x7f
 800735e:	4013      	ands	r3, r2
 8007360:	d006      	beq.n	8007370 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007362:	187b      	adds	r3, r7, r1
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0011      	movs	r1, r2
 800736a:	0018      	movs	r0, r3
 800736c:	f001 f97c 	bl	8008668 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0018      	movs	r0, r3
 8007374:	f000 fd66 	bl	8007e44 <USBD_CtlSendStatus>
              }
              break;
 8007378:	e006      	b.n	8007388 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f000 fc77 	bl	8007c74 <USBD_CtlError>
              break;
 8007386:	e000      	b.n	800738a <USBD_StdEPReq+0x1b0>
              break;
 8007388:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800738a:	e0cd      	b.n	8007528 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	23a7      	movs	r3, #167	; 0xa7
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d002      	beq.n	800739e <USBD_StdEPReq+0x1c4>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d03c      	beq.n	8007416 <USBD_StdEPReq+0x23c>
 800739c:	e0b5      	b.n	800750a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739e:	220e      	movs	r2, #14
 80073a0:	18bb      	adds	r3, r7, r2
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <USBD_StdEPReq+0x1e4>
 80073a8:	18bb      	adds	r3, r7, r2
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d006      	beq.n	80073be <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 fc5c 	bl	8007c74 <USBD_CtlError>
                break;
 80073bc:	e0ac      	b.n	8007518 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073be:	220e      	movs	r2, #14
 80073c0:	18bb      	adds	r3, r7, r2
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b25b      	sxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da0c      	bge.n	80073e4 <USBD_StdEPReq+0x20a>
 80073ca:	18bb      	adds	r3, r7, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	227f      	movs	r2, #127	; 0x7f
 80073d0:	401a      	ands	r2, r3
 80073d2:	0013      	movs	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	3310      	adds	r3, #16
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	3304      	adds	r3, #4
 80073e2:	e00d      	b.n	8007400 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073e4:	230e      	movs	r3, #14
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	227f      	movs	r2, #127	; 0x7f
 80073ec:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ee:	0013      	movs	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	3351      	adds	r3, #81	; 0x51
 80073f8:	33ff      	adds	r3, #255	; 0xff
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	18d3      	adds	r3, r2, r3
 80073fe:	3304      	adds	r3, #4
 8007400:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	0018      	movs	r0, r3
 8007410:	f000 fcae 	bl	8007d70 <USBD_CtlSendData>
              break;
 8007414:	e080      	b.n	8007518 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007416:	220e      	movs	r2, #14
 8007418:	18bb      	adds	r3, r7, r2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	b25b      	sxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	da14      	bge.n	800744c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007422:	18bb      	adds	r3, r7, r2
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	220f      	movs	r2, #15
 8007428:	401a      	ands	r2, r3
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	0013      	movs	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	189b      	adds	r3, r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	18cb      	adds	r3, r1, r3
 8007436:	3318      	adds	r3, #24
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d11e      	bne.n	800747c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f000 fc15 	bl	8007c74 <USBD_CtlError>
                  break;
 800744a:	e065      	b.n	8007518 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800744c:	230e      	movs	r3, #14
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	220f      	movs	r2, #15
 8007454:	401a      	ands	r2, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	23ac      	movs	r3, #172	; 0xac
 800745a:	0059      	lsls	r1, r3, #1
 800745c:	0013      	movs	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	189b      	adds	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	18c3      	adds	r3, r0, r3
 8007466:	185b      	adds	r3, r3, r1
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0011      	movs	r1, r2
 8007474:	0018      	movs	r0, r3
 8007476:	f000 fbfd 	bl	8007c74 <USBD_CtlError>
                  break;
 800747a:	e04d      	b.n	8007518 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747c:	220e      	movs	r2, #14
 800747e:	18bb      	adds	r3, r7, r2
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b25b      	sxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	da0c      	bge.n	80074a2 <USBD_StdEPReq+0x2c8>
 8007488:	18bb      	adds	r3, r7, r2
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	227f      	movs	r2, #127	; 0x7f
 800748e:	401a      	ands	r2, r3
 8007490:	0013      	movs	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	189b      	adds	r3, r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	3310      	adds	r3, #16
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	18d3      	adds	r3, r2, r3
 800749e:	3304      	adds	r3, #4
 80074a0:	e00d      	b.n	80074be <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074a2:	230e      	movs	r3, #14
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	227f      	movs	r2, #127	; 0x7f
 80074aa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ac:	0013      	movs	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	189b      	adds	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	3351      	adds	r3, #81	; 0x51
 80074b6:	33ff      	adds	r3, #255	; 0xff
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	3304      	adds	r3, #4
 80074be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074c0:	220e      	movs	r2, #14
 80074c2:	18bb      	adds	r3, r7, r2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <USBD_StdEPReq+0x2f8>
 80074ca:	18bb      	adds	r3, r7, r2
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d103      	bne.n	80074da <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e010      	b.n	80074fc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80074da:	230e      	movs	r3, #14
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	0011      	movs	r1, r2
 80074e4:	0018      	movs	r0, r3
 80074e6:	f001 f8ea 	bl	80086be <USBD_LL_IsStallEP>
 80074ea:	1e03      	subs	r3, r0, #0
 80074ec:	d003      	beq.n	80074f6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e002      	b.n	80074fc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fc34 	bl	8007d70 <USBD_CtlSendData>
              break;
 8007508:	e006      	b.n	8007518 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0011      	movs	r1, r2
 8007510:	0018      	movs	r0, r3
 8007512:	f000 fbaf 	bl	8007c74 <USBD_CtlError>
              break;
 8007516:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007518:	e006      	b.n	8007528 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	0011      	movs	r1, r2
 8007520:	0018      	movs	r0, r3
 8007522:	f000 fba7 	bl	8007c74 <USBD_CtlError>
          break;
 8007526:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007528:	e006      	b.n	8007538 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0011      	movs	r1, r2
 8007530:	0018      	movs	r0, r3
 8007532:	f000 fb9f 	bl	8007c74 <USBD_CtlError>
      break;
 8007536:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007538:	230f      	movs	r3, #15
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	781b      	ldrb	r3, [r3, #0]
}
 800753e:	0018      	movs	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	b004      	add	sp, #16
 8007544:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007548 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007552:	2308      	movs	r3, #8
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	2200      	movs	r2, #0
 8007558:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800755e:	230b      	movs	r3, #11
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	885b      	ldrh	r3, [r3, #2]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b07      	cmp	r3, #7
 8007570:	d900      	bls.n	8007574 <USBD_GetDescriptor+0x2c>
 8007572:	e159      	b.n	8007828 <USBD_GetDescriptor+0x2e0>
 8007574:	009a      	lsls	r2, r3, #2
 8007576:	4bcb      	ldr	r3, [pc, #812]	; (80078a4 <USBD_GetDescriptor+0x35c>)
 8007578:	18d3      	adds	r3, r2, r3
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	23ac      	movs	r3, #172	; 0xac
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	58d3      	ldr	r3, [r2, r3]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	2108      	movs	r1, #8
 800758e:	1879      	adds	r1, r7, r1
 8007590:	0010      	movs	r0, r2
 8007592:	4798      	blx	r3
 8007594:	0003      	movs	r3, r0
 8007596:	60fb      	str	r3, [r7, #12]
      break;
 8007598:	e153      	b.n	8007842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	7c1b      	ldrb	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10f      	bne.n	80075c2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	23ad      	movs	r3, #173	; 0xad
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	58d3      	ldr	r3, [r2, r3]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	2208      	movs	r2, #8
 80075ae:	18ba      	adds	r2, r7, r2
 80075b0:	0010      	movs	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	0003      	movs	r3, r0
 80075b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	2202      	movs	r2, #2
 80075be:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075c0:	e13f      	b.n	8007842 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	23ad      	movs	r3, #173	; 0xad
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	58d3      	ldr	r3, [r2, r3]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	2208      	movs	r2, #8
 80075ce:	18ba      	adds	r2, r7, r2
 80075d0:	0010      	movs	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	0003      	movs	r3, r0
 80075d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	2202      	movs	r2, #2
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	e12f      	b.n	8007842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	885b      	ldrh	r3, [r3, #2]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b05      	cmp	r3, #5
 80075ea:	d900      	bls.n	80075ee <USBD_GetDescriptor+0xa6>
 80075ec:	e0d0      	b.n	8007790 <USBD_GetDescriptor+0x248>
 80075ee:	009a      	lsls	r2, r3, #2
 80075f0:	4bad      	ldr	r3, [pc, #692]	; (80078a8 <USBD_GetDescriptor+0x360>)
 80075f2:	18d3      	adds	r3, r2, r3
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	23ac      	movs	r3, #172	; 0xac
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	58d3      	ldr	r3, [r2, r3]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00d      	beq.n	8007622 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	23ac      	movs	r3, #172	; 0xac
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	58d3      	ldr	r3, [r2, r3]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7c12      	ldrb	r2, [r2, #16]
 8007614:	2108      	movs	r1, #8
 8007616:	1879      	adds	r1, r7, r1
 8007618:	0010      	movs	r0, r2
 800761a:	4798      	blx	r3
 800761c:	0003      	movs	r3, r0
 800761e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007620:	e0c3      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0011      	movs	r1, r2
 8007628:	0018      	movs	r0, r3
 800762a:	f000 fb23 	bl	8007c74 <USBD_CtlError>
            err++;
 800762e:	210b      	movs	r1, #11
 8007630:	187b      	adds	r3, r7, r1
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	187b      	adds	r3, r7, r1
 8007636:	3201      	adds	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
          break;
 800763a:	e0b6      	b.n	80077aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	23ac      	movs	r3, #172	; 0xac
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	58d3      	ldr	r3, [r2, r3]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	23ac      	movs	r3, #172	; 0xac
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	58d3      	ldr	r3, [r2, r3]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	2108      	movs	r1, #8
 800765a:	1879      	adds	r1, r7, r1
 800765c:	0010      	movs	r0, r2
 800765e:	4798      	blx	r3
 8007660:	0003      	movs	r3, r0
 8007662:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007664:	e0a1      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	0011      	movs	r1, r2
 800766c:	0018      	movs	r0, r3
 800766e:	f000 fb01 	bl	8007c74 <USBD_CtlError>
            err++;
 8007672:	210b      	movs	r1, #11
 8007674:	187b      	adds	r3, r7, r1
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	187b      	adds	r3, r7, r1
 800767a:	3201      	adds	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
          break;
 800767e:	e094      	b.n	80077aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	23ac      	movs	r3, #172	; 0xac
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	58d3      	ldr	r3, [r2, r3]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00d      	beq.n	80076aa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	23ac      	movs	r3, #172	; 0xac
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	58d3      	ldr	r3, [r2, r3]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	2108      	movs	r1, #8
 800769e:	1879      	adds	r1, r7, r1
 80076a0:	0010      	movs	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	0003      	movs	r3, r0
 80076a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a8:	e07f      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f000 fadf 	bl	8007c74 <USBD_CtlError>
            err++;
 80076b6:	210b      	movs	r1, #11
 80076b8:	187b      	adds	r3, r7, r1
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	3201      	adds	r2, #1
 80076c0:	701a      	strb	r2, [r3, #0]
          break;
 80076c2:	e072      	b.n	80077aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	23ac      	movs	r3, #172	; 0xac
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	58d3      	ldr	r3, [r2, r3]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	23ac      	movs	r3, #172	; 0xac
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	58d3      	ldr	r3, [r2, r3]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	2108      	movs	r1, #8
 80076e2:	1879      	adds	r1, r7, r1
 80076e4:	0010      	movs	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	0003      	movs	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ec:	e05d      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	0011      	movs	r1, r2
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 fabd 	bl	8007c74 <USBD_CtlError>
            err++;
 80076fa:	210b      	movs	r1, #11
 80076fc:	187b      	adds	r3, r7, r1
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	187b      	adds	r3, r7, r1
 8007702:	3201      	adds	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
          break;
 8007706:	e050      	b.n	80077aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	23ac      	movs	r3, #172	; 0xac
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	58d3      	ldr	r3, [r2, r3]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	23ac      	movs	r3, #172	; 0xac
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	58d3      	ldr	r3, [r2, r3]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7c12      	ldrb	r2, [r2, #16]
 8007724:	2108      	movs	r1, #8
 8007726:	1879      	adds	r1, r7, r1
 8007728:	0010      	movs	r0, r2
 800772a:	4798      	blx	r3
 800772c:	0003      	movs	r3, r0
 800772e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007730:	e03b      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	0011      	movs	r1, r2
 8007738:	0018      	movs	r0, r3
 800773a:	f000 fa9b 	bl	8007c74 <USBD_CtlError>
            err++;
 800773e:	210b      	movs	r1, #11
 8007740:	187b      	adds	r3, r7, r1
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	187b      	adds	r3, r7, r1
 8007746:	3201      	adds	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]
          break;
 800774a:	e02e      	b.n	80077aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	23ac      	movs	r3, #172	; 0xac
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	58d3      	ldr	r3, [r2, r3]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	23ac      	movs	r3, #172	; 0xac
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	58d3      	ldr	r3, [r2, r3]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	2108      	movs	r1, #8
 800776a:	1879      	adds	r1, r7, r1
 800776c:	0010      	movs	r0, r2
 800776e:	4798      	blx	r3
 8007770:	0003      	movs	r3, r0
 8007772:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007774:	e019      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	0011      	movs	r1, r2
 800777c:	0018      	movs	r0, r3
 800777e:	f000 fa79 	bl	8007c74 <USBD_CtlError>
            err++;
 8007782:	210b      	movs	r1, #11
 8007784:	187b      	adds	r3, r7, r1
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	187b      	adds	r3, r7, r1
 800778a:	3201      	adds	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
          break;
 800778e:	e00c      	b.n	80077aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0011      	movs	r1, r2
 8007796:	0018      	movs	r0, r3
 8007798:	f000 fa6c 	bl	8007c74 <USBD_CtlError>
          err++;
 800779c:	210b      	movs	r1, #11
 800779e:	187b      	adds	r3, r7, r1
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	3201      	adds	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80077a8:	e04b      	b.n	8007842 <USBD_GetDescriptor+0x2fa>
 80077aa:	e04a      	b.n	8007842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7c1b      	ldrb	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10b      	bne.n	80077cc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	23ad      	movs	r3, #173	; 0xad
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	58d3      	ldr	r3, [r2, r3]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	2208      	movs	r2, #8
 80077c0:	18ba      	adds	r2, r7, r2
 80077c2:	0010      	movs	r0, r2
 80077c4:	4798      	blx	r3
 80077c6:	0003      	movs	r3, r0
 80077c8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077ca:	e03a      	b.n	8007842 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f000 fa4e 	bl	8007c74 <USBD_CtlError>
        err++;
 80077d8:	210b      	movs	r1, #11
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	187b      	adds	r3, r7, r1
 80077e0:	3201      	adds	r2, #1
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e02d      	b.n	8007842 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7c1b      	ldrb	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	23ad      	movs	r3, #173	; 0xad
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	58d3      	ldr	r3, [r2, r3]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	2208      	movs	r2, #8
 80077fa:	18ba      	adds	r2, r7, r2
 80077fc:	0010      	movs	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	0003      	movs	r3, r0
 8007802:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	2207      	movs	r2, #7
 800780a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800780c:	e019      	b.n	8007842 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	0011      	movs	r1, r2
 8007814:	0018      	movs	r0, r3
 8007816:	f000 fa2d 	bl	8007c74 <USBD_CtlError>
        err++;
 800781a:	210b      	movs	r1, #11
 800781c:	187b      	adds	r3, r7, r1
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	187b      	adds	r3, r7, r1
 8007822:	3201      	adds	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
      break;
 8007826:	e00c      	b.n	8007842 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	0011      	movs	r1, r2
 800782e:	0018      	movs	r0, r3
 8007830:	f000 fa20 	bl	8007c74 <USBD_CtlError>
      err++;
 8007834:	210b      	movs	r1, #11
 8007836:	187b      	adds	r3, r7, r1
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	187b      	adds	r3, r7, r1
 800783c:	3201      	adds	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]
      break;
 8007840:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007842:	230b      	movs	r3, #11
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d127      	bne.n	800789c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800784c:	2108      	movs	r1, #8
 800784e:	187b      	adds	r3, r7, r1
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d019      	beq.n	800788a <USBD_GetDescriptor+0x342>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	88db      	ldrh	r3, [r3, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d015      	beq.n	800788a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88da      	ldrh	r2, [r3, #6]
 8007862:	187b      	adds	r3, r7, r1
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	1c18      	adds	r0, r3, #0
 8007868:	1c11      	adds	r1, r2, #0
 800786a:	b28a      	uxth	r2, r1
 800786c:	b283      	uxth	r3, r0
 800786e:	429a      	cmp	r2, r3
 8007870:	d900      	bls.n	8007874 <USBD_GetDescriptor+0x32c>
 8007872:	1c01      	adds	r1, r0, #0
 8007874:	b28a      	uxth	r2, r1
 8007876:	2108      	movs	r1, #8
 8007878:	187b      	adds	r3, r7, r1
 800787a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800787c:	187b      	adds	r3, r7, r1
 800787e:	881a      	ldrh	r2, [r3, #0]
 8007880:	68f9      	ldr	r1, [r7, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0018      	movs	r0, r3
 8007886:	f000 fa73 	bl	8007d70 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	0018      	movs	r0, r3
 8007896:	f000 fad5 	bl	8007e44 <USBD_CtlSendStatus>
 800789a:	e000      	b.n	800789e <USBD_GetDescriptor+0x356>
    return;
 800789c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800789e:	46bd      	mov	sp, r7
 80078a0:	b004      	add	sp, #16
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	08008b44 	.word	0x08008b44
 80078a8:	08008b64 	.word	0x08008b64

080078ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d13d      	bne.n	800793a <USBD_SetAddress+0x8e>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d139      	bne.n	800793a <USBD_SetAddress+0x8e>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	2b7f      	cmp	r3, #127	; 0x7f
 80078cc:	d835      	bhi.n	800793a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	230f      	movs	r3, #15
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	217f      	movs	r1, #127	; 0x7f
 80078da:	400a      	ands	r2, r1
 80078dc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	23a7      	movs	r3, #167	; 0xa7
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	5cd3      	ldrb	r3, [r2, r3]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d106      	bne.n	80078f8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0011      	movs	r1, r2
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 f9bf 	bl	8007c74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	e027      	b.n	8007948 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	240f      	movs	r4, #15
 80078fc:	193a      	adds	r2, r7, r4
 80078fe:	4914      	ldr	r1, [pc, #80]	; (8007950 <USBD_SetAddress+0xa4>)
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007904:	193b      	adds	r3, r7, r4
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0011      	movs	r1, r2
 800790c:	0018      	movs	r0, r3
 800790e:	f000 ff07 	bl	8008720 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0018      	movs	r0, r3
 8007916:	f000 fa95 	bl	8007e44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800791a:	193b      	adds	r3, r7, r4
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	23a7      	movs	r3, #167	; 0xa7
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	2102      	movs	r1, #2
 800792a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	e00c      	b.n	8007948 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	23a7      	movs	r3, #167	; 0xa7
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	2101      	movs	r1, #1
 8007936:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007938:	e006      	b.n	8007948 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f000 f997 	bl	8007c74 <USBD_CtlError>
  }
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	46bd      	mov	sp, r7
 800794c:	b005      	add	sp, #20
 800794e:	bd90      	pop	{r4, r7, pc}
 8007950:	0000029e 	.word	0x0000029e

08007954 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	885b      	ldrh	r3, [r3, #2]
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4b4c      	ldr	r3, [pc, #304]	; (8007a98 <USBD_SetConfig+0x144>)
 8007966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007968:	4b4b      	ldr	r3, [pc, #300]	; (8007a98 <USBD_SetConfig+0x144>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d906      	bls.n	800797e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	0011      	movs	r1, r2
 8007976:	0018      	movs	r0, r3
 8007978:	f000 f97c 	bl	8007c74 <USBD_CtlError>
 800797c:	e088      	b.n	8007a90 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	23a7      	movs	r3, #167	; 0xa7
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	5cd3      	ldrb	r3, [r2, r3]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d002      	beq.n	8007990 <USBD_SetConfig+0x3c>
 800798a:	2b03      	cmp	r3, #3
 800798c:	d029      	beq.n	80079e2 <USBD_SetConfig+0x8e>
 800798e:	e071      	b.n	8007a74 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007990:	4b41      	ldr	r3, [pc, #260]	; (8007a98 <USBD_SetConfig+0x144>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01f      	beq.n	80079d8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007998:	4b3f      	ldr	r3, [pc, #252]	; (8007a98 <USBD_SetConfig+0x144>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	001a      	movs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	23a7      	movs	r3, #167	; 0xa7
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	2103      	movs	r1, #3
 80079aa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079ac:	4b3a      	ldr	r3, [pc, #232]	; (8007a98 <USBD_SetConfig+0x144>)
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	0011      	movs	r1, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7ff f8c6 	bl	8006b46 <USBD_SetClassConfig>
 80079ba:	0003      	movs	r3, r0
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d106      	bne.n	80079ce <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	0011      	movs	r1, r2
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 f954 	bl	8007c74 <USBD_CtlError>
            return;
 80079cc:	e060      	b.n	8007a90 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	0018      	movs	r0, r3
 80079d2:	f000 fa37 	bl	8007e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079d6:	e05b      	b.n	8007a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	0018      	movs	r0, r3
 80079dc:	f000 fa32 	bl	8007e44 <USBD_CtlSendStatus>
        break;
 80079e0:	e056      	b.n	8007a90 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079e2:	4b2d      	ldr	r3, [pc, #180]	; (8007a98 <USBD_SetConfig+0x144>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d115      	bne.n	8007a16 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	23a7      	movs	r3, #167	; 0xa7
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	2102      	movs	r1, #2
 80079f2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80079f4:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <USBD_SetConfig+0x144>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	001a      	movs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079fe:	4b26      	ldr	r3, [pc, #152]	; (8007a98 <USBD_SetConfig+0x144>)
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0011      	movs	r1, r2
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7ff f8c4 	bl	8006b94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f000 fa18 	bl	8007e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a14:	e03c      	b.n	8007a90 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <USBD_SetConfig+0x144>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d022      	beq.n	8007a6a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	0011      	movs	r1, r2
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff f8b0 	bl	8006b94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a34:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <USBD_SetConfig+0x144>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	001a      	movs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <USBD_SetConfig+0x144>)
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0011      	movs	r1, r2
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7ff f87d 	bl	8006b46 <USBD_SetClassConfig>
 8007a4c:	0003      	movs	r3, r0
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d106      	bne.n	8007a60 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	0011      	movs	r1, r2
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f000 f90b 	bl	8007c74 <USBD_CtlError>
            return;
 8007a5e:	e017      	b.n	8007a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	0018      	movs	r0, r3
 8007a64:	f000 f9ee 	bl	8007e44 <USBD_CtlSendStatus>
        break;
 8007a68:	e012      	b.n	8007a90 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f000 f9e9 	bl	8007e44 <USBD_CtlSendStatus>
        break;
 8007a72:	e00d      	b.n	8007a90 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0011      	movs	r1, r2
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 f8fa 	bl	8007c74 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a80:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <USBD_SetConfig+0x144>)
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff f883 	bl	8006b94 <USBD_ClrClassConfig>
        break;
 8007a8e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b002      	add	sp, #8
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	200001a0 	.word	0x200001a0

08007a9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	88db      	ldrh	r3, [r3, #6]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d006      	beq.n	8007abc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f000 f8dd 	bl	8007c74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007aba:	e026      	b.n	8007b0a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	23a7      	movs	r3, #167	; 0xa7
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	5cd3      	ldrb	r3, [r2, r3]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	dc02      	bgt.n	8007ace <USBD_GetConfig+0x32>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc03      	bgt.n	8007ad4 <USBD_GetConfig+0x38>
 8007acc:	e016      	b.n	8007afc <USBD_GetConfig+0x60>
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d00c      	beq.n	8007aec <USBD_GetConfig+0x50>
 8007ad2:	e013      	b.n	8007afc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3308      	adds	r3, #8
 8007ade:	0019      	movs	r1, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 f943 	bl	8007d70 <USBD_CtlSendData>
        break;
 8007aea:	e00e      	b.n	8007b0a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1d19      	adds	r1, r3, #4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 f93b 	bl	8007d70 <USBD_CtlSendData>
        break;
 8007afa:	e006      	b.n	8007b0a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	0011      	movs	r1, r2
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 f8b6 	bl	8007c74 <USBD_CtlError>
        break;
 8007b08:	46c0      	nop			; (mov r8, r8)
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b002      	add	sp, #8
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	23a7      	movs	r3, #167	; 0xa7
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	5cd3      	ldrb	r3, [r2, r3]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d822      	bhi.n	8007b70 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	88db      	ldrh	r3, [r3, #6]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d006      	beq.n	8007b40 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	0011      	movs	r1, r2
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 f89b 	bl	8007c74 <USBD_CtlError>
        break;
 8007b3e:	e01e      	b.n	8007b7e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	23a9      	movs	r3, #169	; 0xa9
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	58d3      	ldr	r3, [r2, r3]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	2202      	movs	r2, #2
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	330c      	adds	r3, #12
 8007b62:	0019      	movs	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 f901 	bl	8007d70 <USBD_CtlSendData>
      break;
 8007b6e:	e006      	b.n	8007b7e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	0011      	movs	r1, r2
 8007b76:	0018      	movs	r0, r3
 8007b78:	f000 f87c 	bl	8007c74 <USBD_CtlError>
      break;
 8007b7c:	46c0      	nop			; (mov r8, r8)
  }
}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b002      	add	sp, #8
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d108      	bne.n	8007baa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	23a9      	movs	r3, #169	; 0xa9
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 f94d 	bl	8007e44 <USBD_CtlSendStatus>
  }
}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b002      	add	sp, #8
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	23a7      	movs	r3, #167	; 0xa7
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	5cd3      	ldrb	r3, [r2, r3]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d80d      	bhi.n	8007be6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d110      	bne.n	8007bf4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	23a9      	movs	r3, #169	; 0xa9
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	2100      	movs	r1, #0
 8007bda:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 f930 	bl	8007e44 <USBD_CtlSendStatus>
      }
      break;
 8007be4:	e006      	b.n	8007bf4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 f841 	bl	8007c74 <USBD_CtlError>
      break;
 8007bf2:	e000      	b.n	8007bf6 <USBD_ClrFeature+0x44>
      break;
 8007bf4:	46c0      	nop			; (mov r8, r8)
  }
}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b002      	add	sp, #8
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785a      	ldrb	r2, [r3, #1]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	3303      	adds	r3, #3
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	18d3      	adds	r3, r2, r3
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	3304      	adds	r3, #4
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	3305      	adds	r3, #5
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	18d3      	adds	r3, r2, r3
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	3306      	adds	r3, #6
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	3307      	adds	r3, #7
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	18d3      	adds	r3, r2, r3
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	80da      	strh	r2, [r3, #6]

}
 8007c6c:	46c0      	nop			; (mov r8, r8)
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b002      	add	sp, #8
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	0018      	movs	r0, r3
 8007c84:	f000 fcc5 	bl	8008612 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	f000 fcc0 	bl	8008612 <USBD_LL_StallEP>
}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b002      	add	sp, #8
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c9a:	b590      	push	{r4, r7, lr}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ca6:	2417      	movs	r4, #23
 8007ca8:	193b      	adds	r3, r7, r4
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d03c      	beq.n	8007d2e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f000 f83d 	bl	8007d36 <USBD_GetLen>
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	18db      	adds	r3, r3, r3
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007cca:	193b      	adds	r3, r7, r4
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	193a      	adds	r2, r7, r4
 8007cd0:	1c59      	adds	r1, r3, #1
 8007cd2:	7011      	strb	r1, [r2, #0]
 8007cd4:	001a      	movs	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	189b      	adds	r3, r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ce0:	193b      	adds	r3, r7, r4
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	193a      	adds	r2, r7, r4
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	7011      	strb	r1, [r2, #0]
 8007cea:	001a      	movs	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	189b      	adds	r3, r3, r2
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007cf4:	e017      	b.n	8007d26 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	60fa      	str	r2, [r7, #12]
 8007cfc:	2417      	movs	r4, #23
 8007cfe:	193a      	adds	r2, r7, r4
 8007d00:	7812      	ldrb	r2, [r2, #0]
 8007d02:	1939      	adds	r1, r7, r4
 8007d04:	1c50      	adds	r0, r2, #1
 8007d06:	7008      	strb	r0, [r1, #0]
 8007d08:	0011      	movs	r1, r2
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	1852      	adds	r2, r2, r1
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d12:	193b      	adds	r3, r7, r4
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	193a      	adds	r2, r7, r4
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	7011      	strb	r1, [r2, #0]
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	189b      	adds	r3, r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e3      	bne.n	8007cf6 <USBD_GetString+0x5c>
    }
  }
}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b007      	add	sp, #28
 8007d34:	bd90      	pop	{r4, r7, pc}

08007d36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d3e:	230f      	movs	r3, #15
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007d46:	e008      	b.n	8007d5a <USBD_GetLen+0x24>
  {
    len++;
 8007d48:	210f      	movs	r1, #15
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	3201      	adds	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]
    buf++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3301      	adds	r3, #1
 8007d58:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f2      	bne.n	8007d48 <USBD_GetLen+0x12>
  }

  return len;
 8007d62:	230f      	movs	r3, #15
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	781b      	ldrb	r3, [r3, #0]
}
 8007d68:	0018      	movs	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b004      	add	sp, #16
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	1dbb      	adds	r3, r7, #6
 8007d7c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	23a5      	movs	r3, #165	; 0xa5
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	2102      	movs	r1, #2
 8007d86:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007d88:	1dbb      	adds	r3, r7, #6
 8007d8a:	881a      	ldrh	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d90:	1dbb      	adds	r3, r7, #6
 8007d92:	881a      	ldrh	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d98:	1dbb      	adds	r3, r7, #6
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	2100      	movs	r1, #0
 8007da2:	f000 fce8 	bl	8008776 <USBD_LL_Transmit>

  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	0018      	movs	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b004      	add	sp, #16
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	1dbb      	adds	r3, r7, #6
 8007dbc:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dbe:	1dbb      	adds	r3, r7, #6
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	f000 fcd5 	bl	8008776 <USBD_LL_Transmit>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	0018      	movs	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b004      	add	sp, #16
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	1dbb      	adds	r3, r7, #6
 8007de2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	23a5      	movs	r3, #165	; 0xa5
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	2103      	movs	r1, #3
 8007dec:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007dee:	1dbb      	adds	r3, r7, #6
 8007df0:	8819      	ldrh	r1, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	23ae      	movs	r3, #174	; 0xae
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007dfa:	1dbb      	adds	r3, r7, #6
 8007dfc:	8819      	ldrh	r1, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	23b0      	movs	r3, #176	; 0xb0
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e06:	1dbb      	adds	r3, r7, #6
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	f000 fce8 	bl	80087e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	0018      	movs	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b004      	add	sp, #16
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	1dbb      	adds	r3, r7, #6
 8007e2a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e2c:	1dbb      	adds	r3, r7, #6
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	2100      	movs	r1, #0
 8007e36:	f000 fcd5 	bl	80087e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b004      	add	sp, #16
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	23a5      	movs	r3, #165	; 0xa5
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	2104      	movs	r1, #4
 8007e54:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f000 fc8a 	bl	8008776 <USBD_LL_Transmit>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b002      	add	sp, #8
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	23a5      	movs	r3, #165	; 0xa5
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	2105      	movs	r1, #5
 8007e7c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	f000 fcad 	bl	80087e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b002      	add	sp, #8
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e98:	4914      	ldr	r1, [pc, #80]	; (8007eec <MX_USB_DEVICE_Init+0x58>)
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <MX_USB_DEVICE_Init+0x5c>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7fe fdea 	bl	8006a78 <USBD_Init>
 8007ea4:	1e03      	subs	r3, r0, #0
 8007ea6:	d001      	beq.n	8007eac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ea8:	f7f8 fca8 	bl	80007fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007eac:	4a11      	ldr	r2, [pc, #68]	; (8007ef4 <MX_USB_DEVICE_Init+0x60>)
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <MX_USB_DEVICE_Init+0x5c>)
 8007eb0:	0011      	movs	r1, r2
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f7fe fe11 	bl	8006ada <USBD_RegisterClass>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007ebc:	f7f8 fc9e 	bl	80007fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <MX_USB_DEVICE_Init+0x64>)
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <MX_USB_DEVICE_Init+0x5c>)
 8007ec4:	0011      	movs	r1, r2
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f7fe fd26 	bl	8006918 <USBD_CDC_RegisterInterface>
 8007ecc:	1e03      	subs	r3, r0, #0
 8007ece:	d001      	beq.n	8007ed4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007ed0:	f7f8 fc94 	bl	80007fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <MX_USB_DEVICE_Init+0x5c>)
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f7fe fe1f 	bl	8006b1a <USBD_Start>
 8007edc:	1e03      	subs	r3, r0, #0
 8007ede:	d001      	beq.n	8007ee4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007ee0:	f7f8 fc8c 	bl	80007fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	2000012c 	.word	0x2000012c
 8007ef0:	20000758 	.word	0x20000758
 8007ef4:	20000018 	.word	0x20000018
 8007ef8:	2000011c 	.word	0x2000011c

08007efc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f00:	4907      	ldr	r1, [pc, #28]	; (8007f20 <CDC_Init_FS+0x24>)
 8007f02:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <CDC_Init_FS+0x28>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7fe fd21 	bl	800694e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <CDC_Init_FS+0x2c>)
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <CDC_Init_FS+0x28>)
 8007f10:	0011      	movs	r1, r2
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7fe fd37 	bl	8006986 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f18:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000e04 	.word	0x20000e04
 8007f24:	20000758 	.word	0x20000758
 8007f28:	20000a1c 	.word	0x20000a1c

08007f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f32:	0018      	movs	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	0011      	movs	r1, r2
 8007f42:	1dfb      	adds	r3, r7, #7
 8007f44:	1c02      	adds	r2, r0, #0
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	1c0a      	adds	r2, r1, #0
 8007f4c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f4e:	1dfb      	adds	r3, r7, #7
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b23      	cmp	r3, #35	; 0x23
 8007f54:	d804      	bhi.n	8007f60 <CDC_Control_FS+0x28>
 8007f56:	009a      	lsls	r2, r3, #2
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <CDC_Control_FS+0x34>)
 8007f5a:	18d3      	adds	r3, r2, r3
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f60:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8007f62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f64:	0018      	movs	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	08008b7c 	.word	0x08008b7c

08007f70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <CDC_Receive_FS+0x38>)
 8007f7e:	0011      	movs	r1, r2
 8007f80:	0018      	movs	r0, r3
 8007f82:	f7fe fd00 	bl	8006986 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f86:	4b08      	ldr	r3, [pc, #32]	; (8007fa8 <CDC_Receive_FS+0x38>)
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fe fd47 	bl	8006a1c <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	0011      	movs	r1, r2
 8007f96:	0018      	movs	r0, r3
 8007f98:	f7f8 fa02 	bl	80003a0 <CDC_ReceiveCallback>
  return (USBD_OK);
 8007f9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b002      	add	sp, #8
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	20000758 	.word	0x20000758

08007fac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fac:	b5b0      	push	{r4, r5, r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	000a      	movs	r2, r1
 8007fb6:	1cbb      	adds	r3, r7, #2
 8007fb8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007fba:	230f      	movs	r3, #15
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fc2:	4a11      	ldr	r2, [pc, #68]	; (8008008 <CDC_Transmit_FS+0x5c>)
 8007fc4:	23ae      	movs	r3, #174	; 0xae
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	58d3      	ldr	r3, [r2, r3]
 8007fca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	2385      	movs	r3, #133	; 0x85
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	58d3      	ldr	r3, [r2, r3]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e010      	b.n	8007ffe <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fdc:	1cbb      	adds	r3, r7, #2
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <CDC_Transmit_FS+0x5c>)
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f7fe fcb2 	bl	800694e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fea:	250f      	movs	r5, #15
 8007fec:	197c      	adds	r4, r7, r5
 8007fee:	4b06      	ldr	r3, [pc, #24]	; (8008008 <CDC_Transmit_FS+0x5c>)
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f7fe fcdc 	bl	80069ae <USBD_CDC_TransmitPacket>
 8007ff6:	0003      	movs	r3, r0
 8007ff8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8007ffa:	197b      	adds	r3, r7, r5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
}
 8007ffe:	0018      	movs	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	b004      	add	sp, #16
 8008004:	bdb0      	pop	{r4, r5, r7, pc}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	20000758 	.word	0x20000758

0800800c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	0002      	movs	r2, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	1dfb      	adds	r3, r7, #7
 8008018:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2212      	movs	r2, #18
 800801e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008022:	0018      	movs	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	b002      	add	sp, #8
 8008028:	bd80      	pop	{r7, pc}
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	20000148 	.word	0x20000148

08008030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	0002      	movs	r2, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	1dfb      	adds	r3, r7, #7
 800803c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2204      	movs	r2, #4
 8008042:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008046:	0018      	movs	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	b002      	add	sp, #8
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	2000015c 	.word	0x2000015c

08008054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	0002      	movs	r2, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008062:	1dfb      	adds	r3, r7, #7
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4908      	ldr	r1, [pc, #32]	; (8008090 <USBD_FS_ProductStrDescriptor+0x3c>)
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <USBD_FS_ProductStrDescriptor+0x40>)
 8008070:	0018      	movs	r0, r3
 8008072:	f7ff fe12 	bl	8007c9a <USBD_GetString>
 8008076:	e005      	b.n	8008084 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4905      	ldr	r1, [pc, #20]	; (8008090 <USBD_FS_ProductStrDescriptor+0x3c>)
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <USBD_FS_ProductStrDescriptor+0x40>)
 800807e:	0018      	movs	r0, r3
 8008080:	f7ff fe0b 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008084:	4b02      	ldr	r3, [pc, #8]	; (8008090 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b002      	add	sp, #8
 800808c:	bd80      	pop	{r7, pc}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	200011ec 	.word	0x200011ec
 8008094:	080089c8 	.word	0x080089c8

08008098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	0002      	movs	r2, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	1dfb      	adds	r3, r7, #7
 80080a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4904      	ldr	r1, [pc, #16]	; (80080bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7ff fdf4 	bl	8007c9a <USBD_GetString>
  return USBD_StrDesc;
 80080b2:	4b02      	ldr	r3, [pc, #8]	; (80080bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80080b4:	0018      	movs	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200011ec 	.word	0x200011ec
 80080c0:	080089e0 	.word	0x080089e0

080080c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	0002      	movs	r2, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	1dfb      	adds	r3, r7, #7
 80080d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	221a      	movs	r2, #26
 80080d6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080d8:	f000 f84c 	bl	8008174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b002      	add	sp, #8
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	20000160 	.word	0x20000160

080080ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	0002      	movs	r2, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	1dfb      	adds	r3, r7, #7
 80080f8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80080fa:	1dfb      	adds	r3, r7, #7
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4908      	ldr	r1, [pc, #32]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <USBD_FS_ConfigStrDescriptor+0x40>)
 8008108:	0018      	movs	r0, r3
 800810a:	f7ff fdc6 	bl	8007c9a <USBD_GetString>
 800810e:	e005      	b.n	800811c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	4905      	ldr	r1, [pc, #20]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008114:	4b05      	ldr	r3, [pc, #20]	; (800812c <USBD_FS_ConfigStrDescriptor+0x40>)
 8008116:	0018      	movs	r0, r3
 8008118:	f7ff fdbf 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b002      	add	sp, #8
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	200011ec 	.word	0x200011ec
 800812c:	080089f4 	.word	0x080089f4

08008130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	0002      	movs	r2, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	1dfb      	adds	r3, r7, #7
 800813c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800813e:	1dfb      	adds	r3, r7, #7
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4908      	ldr	r1, [pc, #32]	; (800816c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800814c:	0018      	movs	r0, r3
 800814e:	f7ff fda4 	bl	8007c9a <USBD_GetString>
 8008152:	e005      	b.n	8008160 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4905      	ldr	r1, [pc, #20]	; (800816c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800815a:	0018      	movs	r0, r3
 800815c:	f7ff fd9d 	bl	8007c9a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008162:	0018      	movs	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	b002      	add	sp, #8
 8008168:	bd80      	pop	{r7, pc}
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	200011ec 	.word	0x200011ec
 8008170:	08008a00 	.word	0x08008a00

08008174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <Get_SerialNum+0x48>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <Get_SerialNum+0x4c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008186:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <Get_SerialNum+0x50>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	18d3      	adds	r3, r2, r3
 8008192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800819a:	490b      	ldr	r1, [pc, #44]	; (80081c8 <Get_SerialNum+0x54>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2208      	movs	r2, #8
 80081a0:	0018      	movs	r0, r3
 80081a2:	f000 f815 	bl	80081d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081a6:	4909      	ldr	r1, [pc, #36]	; (80081cc <Get_SerialNum+0x58>)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2204      	movs	r2, #4
 80081ac:	0018      	movs	r0, r3
 80081ae:	f000 f80f 	bl	80081d0 <IntToUnicode>
  }
}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	46bd      	mov	sp, r7
 80081b6:	b004      	add	sp, #16
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	1ffff7ac 	.word	0x1ffff7ac
 80081c0:	1ffff7b0 	.word	0x1ffff7b0
 80081c4:	1ffff7b4 	.word	0x1ffff7b4
 80081c8:	20000162 	.word	0x20000162
 80081cc:	20000172 	.word	0x20000172

080081d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	1dfb      	adds	r3, r7, #7
 80081dc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80081de:	2117      	movs	r1, #23
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e02f      	b.n	800824e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	0f1b      	lsrs	r3, r3, #28
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d80d      	bhi.n	8008212 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	0f1b      	lsrs	r3, r3, #28
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	2317      	movs	r3, #23
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	0019      	movs	r1, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	185b      	adds	r3, r3, r1
 800820a:	3230      	adds	r2, #48	; 0x30
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	e00c      	b.n	800822c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	0f1b      	lsrs	r3, r3, #28
 8008216:	b2da      	uxtb	r2, r3
 8008218:	2317      	movs	r3, #23
 800821a:	18fb      	adds	r3, r7, r3
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	0019      	movs	r1, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	185b      	adds	r3, r3, r1
 8008226:	3237      	adds	r2, #55	; 0x37
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008232:	2117      	movs	r1, #23
 8008234:	187b      	adds	r3, r7, r1
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	3301      	adds	r3, #1
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	18d3      	adds	r3, r2, r3
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008244:	187b      	adds	r3, r7, r1
 8008246:	781a      	ldrb	r2, [r3, #0]
 8008248:	187b      	adds	r3, r7, r1
 800824a:	3201      	adds	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	2317      	movs	r3, #23
 8008250:	18fa      	adds	r2, r7, r3
 8008252:	1dfb      	adds	r3, r7, #7
 8008254:	7812      	ldrb	r2, [r2, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d3c8      	bcc.n	80081ee <IntToUnicode+0x1e>
  }
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	46bd      	mov	sp, r7
 8008262:	b006      	add	sp, #24
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a0e      	ldr	r2, [pc, #56]	; (80082b0 <HAL_PCD_MspInit+0x48>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d115      	bne.n	80082a6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <HAL_PCD_MspInit+0x4c>)
 800827c:	69da      	ldr	r2, [r3, #28]
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <HAL_PCD_MspInit+0x4c>)
 8008280:	2180      	movs	r1, #128	; 0x80
 8008282:	0409      	lsls	r1, r1, #16
 8008284:	430a      	orrs	r2, r1
 8008286:	61da      	str	r2, [r3, #28]
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <HAL_PCD_MspInit+0x4c>)
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	2380      	movs	r3, #128	; 0x80
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	4013      	ands	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	201f      	movs	r0, #31
 800829c:	f7f9 fa7a 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80082a0:	201f      	movs	r0, #31
 80082a2:	f7f9 fa8c 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	40005c00 	.word	0x40005c00
 80082b4:	40021000 	.word	0x40021000

080082b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	23bc      	movs	r3, #188	; 0xbc
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	58d2      	ldr	r2, [r2, r3]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	21ac      	movs	r1, #172	; 0xac
 80082cc:	0089      	lsls	r1, r1, #2
 80082ce:	468c      	mov	ip, r1
 80082d0:	4463      	add	r3, ip
 80082d2:	0019      	movs	r1, r3
 80082d4:	0010      	movs	r0, r2
 80082d6:	f7fe fc73 	bl	8006bc0 <USBD_LL_SetupStage>
}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	46bd      	mov	sp, r7
 80082de:	b002      	add	sp, #8
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e2:	b590      	push	{r4, r7, lr}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	000a      	movs	r2, r1
 80082ec:	1cfb      	adds	r3, r7, #3
 80082ee:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	23bc      	movs	r3, #188	; 0xbc
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	58d4      	ldr	r4, [r2, r3]
 80082f8:	1cfb      	adds	r3, r7, #3
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	23be      	movs	r3, #190	; 0xbe
 8008300:	0059      	lsls	r1, r3, #1
 8008302:	0013      	movs	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	189b      	adds	r3, r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	18c3      	adds	r3, r0, r3
 800830c:	185b      	adds	r3, r3, r1
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	1cfb      	adds	r3, r7, #3
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	0019      	movs	r1, r3
 8008316:	0020      	movs	r0, r4
 8008318:	f7fe fcb0 	bl	8006c7c <USBD_LL_DataOutStage>
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b003      	add	sp, #12
 8008322:	bd90      	pop	{r4, r7, pc}

08008324 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	000a      	movs	r2, r1
 800832e:	1cfb      	adds	r3, r7, #3
 8008330:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	23bc      	movs	r3, #188	; 0xbc
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	58d0      	ldr	r0, [r2, r3]
 800833a:	1cfb      	adds	r3, r7, #3
 800833c:	781a      	ldrb	r2, [r3, #0]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	0013      	movs	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	189b      	adds	r3, r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	18cb      	adds	r3, r1, r3
 800834a:	333c      	adds	r3, #60	; 0x3c
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	1cfb      	adds	r3, r7, #3
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	0019      	movs	r1, r3
 8008354:	f7fe fd14 	bl	8006d80 <USBD_LL_DataInStage>
}
 8008358:	46c0      	nop			; (mov r8, r8)
 800835a:	46bd      	mov	sp, r7
 800835c:	b002      	add	sp, #8
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	23bc      	movs	r3, #188	; 0xbc
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	58d3      	ldr	r3, [r2, r3]
 8008370:	0018      	movs	r0, r3
 8008372:	f7fe fe4b 	bl	800700c <USBD_LL_SOF>
}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	46bd      	mov	sp, r7
 800837a:	b002      	add	sp, #8
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008386:	230f      	movs	r3, #15
 8008388:	18fb      	adds	r3, r7, r3
 800838a:	2201      	movs	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d001      	beq.n	800839a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008396:	f7f8 fa31 	bl	80007fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	23bc      	movs	r3, #188	; 0xbc
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	58d2      	ldr	r2, [r2, r3]
 80083a2:	230f      	movs	r3, #15
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	0019      	movs	r1, r3
 80083aa:	0010      	movs	r0, r2
 80083ac:	f7fe fded 	bl	8006f8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	23bc      	movs	r3, #188	; 0xbc
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	58d3      	ldr	r3, [r2, r3]
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7fe fd9e 	bl	8006efa <USBD_LL_Reset>
}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	46bd      	mov	sp, r7
 80083c2:	b004      	add	sp, #16
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	23bc      	movs	r3, #188	; 0xbc
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	58d3      	ldr	r3, [r2, r3]
 80083d8:	0018      	movs	r0, r3
 80083da:	f7fe fde7 	bl	8006fac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083e6:	4b05      	ldr	r3, [pc, #20]	; (80083fc <HAL_PCD_SuspendCallback+0x34>)
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	4b04      	ldr	r3, [pc, #16]	; (80083fc <HAL_PCD_SuspendCallback+0x34>)
 80083ec:	2106      	movs	r1, #6
 80083ee:	430a      	orrs	r2, r1
 80083f0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	46bd      	mov	sp, r7
 80083f6:	b002      	add	sp, #8
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	e000ed00 	.word	0xe000ed00

08008400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <HAL_PCD_ResumeCallback+0x38>)
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	4b08      	ldr	r3, [pc, #32]	; (8008438 <HAL_PCD_ResumeCallback+0x38>)
 8008416:	2106      	movs	r1, #6
 8008418:	438a      	bics	r2, r1
 800841a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800841c:	f000 fa44 	bl	80088a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	23bc      	movs	r3, #188	; 0xbc
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	58d3      	ldr	r3, [r2, r3]
 8008428:	0018      	movs	r0, r3
 800842a:	f7fe fdd7 	bl	8006fdc <USBD_LL_Resume>
}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	46bd      	mov	sp, r7
 8008432:	b002      	add	sp, #8
 8008434:	bd80      	pop	{r7, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008444:	4a2d      	ldr	r2, [pc, #180]	; (80084fc <USBD_LL_Init+0xc0>)
 8008446:	23bc      	movs	r3, #188	; 0xbc
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	23b0      	movs	r3, #176	; 0xb0
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4929      	ldr	r1, [pc, #164]	; (80084fc <USBD_LL_Init+0xc0>)
 8008456:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008458:	4b28      	ldr	r3, [pc, #160]	; (80084fc <USBD_LL_Init+0xc0>)
 800845a:	4a29      	ldr	r2, [pc, #164]	; (8008500 <USBD_LL_Init+0xc4>)
 800845c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800845e:	4b27      	ldr	r3, [pc, #156]	; (80084fc <USBD_LL_Init+0xc0>)
 8008460:	2208      	movs	r2, #8
 8008462:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008464:	4b25      	ldr	r3, [pc, #148]	; (80084fc <USBD_LL_Init+0xc0>)
 8008466:	2202      	movs	r2, #2
 8008468:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <USBD_LL_Init+0xc0>)
 800846c:	2202      	movs	r2, #2
 800846e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008470:	4b22      	ldr	r3, [pc, #136]	; (80084fc <USBD_LL_Init+0xc0>)
 8008472:	2200      	movs	r2, #0
 8008474:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <USBD_LL_Init+0xc0>)
 8008478:	2200      	movs	r2, #0
 800847a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800847c:	4b1f      	ldr	r3, [pc, #124]	; (80084fc <USBD_LL_Init+0xc0>)
 800847e:	2200      	movs	r2, #0
 8008480:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008482:	4b1e      	ldr	r3, [pc, #120]	; (80084fc <USBD_LL_Init+0xc0>)
 8008484:	0018      	movs	r0, r3
 8008486:	f7f9 fb4d 	bl	8001b24 <HAL_PCD_Init>
 800848a:	1e03      	subs	r3, r0, #0
 800848c:	d001      	beq.n	8008492 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800848e:	f7f8 f9b5 	bl	80007fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	23b0      	movs	r3, #176	; 0xb0
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	58d0      	ldr	r0, [r2, r3]
 800849a:	2318      	movs	r3, #24
 800849c:	2200      	movs	r2, #0
 800849e:	2100      	movs	r1, #0
 80084a0:	f7fb f92e 	bl	8003700 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	23b0      	movs	r3, #176	; 0xb0
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	58d0      	ldr	r0, [r2, r3]
 80084ac:	2358      	movs	r3, #88	; 0x58
 80084ae:	2200      	movs	r2, #0
 80084b0:	2180      	movs	r1, #128	; 0x80
 80084b2:	f7fb f925 	bl	8003700 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	23b0      	movs	r3, #176	; 0xb0
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	58d0      	ldr	r0, [r2, r3]
 80084be:	23c0      	movs	r3, #192	; 0xc0
 80084c0:	2200      	movs	r2, #0
 80084c2:	2181      	movs	r1, #129	; 0x81
 80084c4:	f7fb f91c 	bl	8003700 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	23b0      	movs	r3, #176	; 0xb0
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	58d0      	ldr	r0, [r2, r3]
 80084d0:	2388      	movs	r3, #136	; 0x88
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2200      	movs	r2, #0
 80084d6:	2101      	movs	r1, #1
 80084d8:	f7fb f912 	bl	8003700 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	23b0      	movs	r3, #176	; 0xb0
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	58d0      	ldr	r0, [r2, r3]
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	2200      	movs	r2, #0
 80084ea:	2182      	movs	r1, #130	; 0x82
 80084ec:	f7fb f908 	bl	8003700 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b002      	add	sp, #8
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	200013ec 	.word	0x200013ec
 8008500:	40005c00 	.word	0x40005c00

08008504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850c:	210f      	movs	r1, #15
 800850e:	187b      	adds	r3, r7, r1
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	260e      	movs	r6, #14
 8008516:	19bb      	adds	r3, r7, r6
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	23b0      	movs	r3, #176	; 0xb0
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	58d3      	ldr	r3, [r2, r3]
 8008524:	000d      	movs	r5, r1
 8008526:	187c      	adds	r4, r7, r1
 8008528:	0018      	movs	r0, r3
 800852a:	f7f9 fc0b 	bl	8001d44 <HAL_PCD_Start>
 800852e:	0003      	movs	r3, r0
 8008530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008532:	19bc      	adds	r4, r7, r6
 8008534:	197b      	adds	r3, r7, r5
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	0018      	movs	r0, r3
 800853a:	f000 f9bc 	bl	80088b6 <USBD_Get_USB_Status>
 800853e:	0003      	movs	r3, r0
 8008540:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008542:	19bb      	adds	r3, r7, r6
 8008544:	781b      	ldrb	r3, [r3, #0]
}
 8008546:	0018      	movs	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	b005      	add	sp, #20
 800854c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800854e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800854e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	000c      	movs	r4, r1
 8008558:	0010      	movs	r0, r2
 800855a:	0019      	movs	r1, r3
 800855c:	1cfb      	adds	r3, r7, #3
 800855e:	1c22      	adds	r2, r4, #0
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	1cbb      	adds	r3, r7, #2
 8008564:	1c02      	adds	r2, r0, #0
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	003b      	movs	r3, r7
 800856a:	1c0a      	adds	r2, r1, #0
 800856c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856e:	260f      	movs	r6, #15
 8008570:	19bb      	adds	r3, r7, r6
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008576:	250e      	movs	r5, #14
 8008578:	197b      	adds	r3, r7, r5
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	23b0      	movs	r3, #176	; 0xb0
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	58d0      	ldr	r0, [r2, r3]
 8008586:	19bc      	adds	r4, r7, r6
 8008588:	1cbb      	adds	r3, r7, #2
 800858a:	781d      	ldrb	r5, [r3, #0]
 800858c:	003b      	movs	r3, r7
 800858e:	881a      	ldrh	r2, [r3, #0]
 8008590:	1cfb      	adds	r3, r7, #3
 8008592:	7819      	ldrb	r1, [r3, #0]
 8008594:	002b      	movs	r3, r5
 8008596:	f7f9 fda2 	bl	80020de <HAL_PCD_EP_Open>
 800859a:	0003      	movs	r3, r0
 800859c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859e:	250e      	movs	r5, #14
 80085a0:	197c      	adds	r4, r7, r5
 80085a2:	19bb      	adds	r3, r7, r6
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	0018      	movs	r0, r3
 80085a8:	f000 f985 	bl	80088b6 <USBD_Get_USB_Status>
 80085ac:	0003      	movs	r3, r0
 80085ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80085b0:	197b      	adds	r3, r7, r5
 80085b2:	781b      	ldrb	r3, [r3, #0]
}
 80085b4:	0018      	movs	r0, r3
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b005      	add	sp, #20
 80085ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	000a      	movs	r2, r1
 80085c6:	1cfb      	adds	r3, r7, #3
 80085c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	210f      	movs	r1, #15
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d2:	260e      	movs	r6, #14
 80085d4:	19bb      	adds	r3, r7, r6
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	23b0      	movs	r3, #176	; 0xb0
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	58d2      	ldr	r2, [r2, r3]
 80085e2:	000d      	movs	r5, r1
 80085e4:	187c      	adds	r4, r7, r1
 80085e6:	1cfb      	adds	r3, r7, #3
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	0019      	movs	r1, r3
 80085ec:	0010      	movs	r0, r2
 80085ee:	f7f9 fdee 	bl	80021ce <HAL_PCD_EP_Close>
 80085f2:	0003      	movs	r3, r0
 80085f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f6:	19bc      	adds	r4, r7, r6
 80085f8:	197b      	adds	r3, r7, r5
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f000 f95a 	bl	80088b6 <USBD_Get_USB_Status>
 8008602:	0003      	movs	r3, r0
 8008604:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008606:	19bb      	adds	r3, r7, r6
 8008608:	781b      	ldrb	r3, [r3, #0]
}
 800860a:	0018      	movs	r0, r3
 800860c:	46bd      	mov	sp, r7
 800860e:	b005      	add	sp, #20
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008612 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	000a      	movs	r2, r1
 800861c:	1cfb      	adds	r3, r7, #3
 800861e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	210f      	movs	r1, #15
 8008622:	187b      	adds	r3, r7, r1
 8008624:	2200      	movs	r2, #0
 8008626:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	260e      	movs	r6, #14
 800862a:	19bb      	adds	r3, r7, r6
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	23b0      	movs	r3, #176	; 0xb0
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	58d2      	ldr	r2, [r2, r3]
 8008638:	000d      	movs	r5, r1
 800863a:	187c      	adds	r4, r7, r1
 800863c:	1cfb      	adds	r3, r7, #3
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	0019      	movs	r1, r3
 8008642:	0010      	movs	r0, r2
 8008644:	f7f9 feba 	bl	80023bc <HAL_PCD_EP_SetStall>
 8008648:	0003      	movs	r3, r0
 800864a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	19bc      	adds	r4, r7, r6
 800864e:	197b      	adds	r3, r7, r5
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	0018      	movs	r0, r3
 8008654:	f000 f92f 	bl	80088b6 <USBD_Get_USB_Status>
 8008658:	0003      	movs	r3, r0
 800865a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800865c:	19bb      	adds	r3, r7, r6
 800865e:	781b      	ldrb	r3, [r3, #0]
}
 8008660:	0018      	movs	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	b005      	add	sp, #20
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008668 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	000a      	movs	r2, r1
 8008672:	1cfb      	adds	r3, r7, #3
 8008674:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	210f      	movs	r1, #15
 8008678:	187b      	adds	r3, r7, r1
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867e:	260e      	movs	r6, #14
 8008680:	19bb      	adds	r3, r7, r6
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	23b0      	movs	r3, #176	; 0xb0
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	58d2      	ldr	r2, [r2, r3]
 800868e:	000d      	movs	r5, r1
 8008690:	187c      	adds	r4, r7, r1
 8008692:	1cfb      	adds	r3, r7, #3
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	0019      	movs	r1, r3
 8008698:	0010      	movs	r0, r2
 800869a:	f7f9 feeb 	bl	8002474 <HAL_PCD_EP_ClrStall>
 800869e:	0003      	movs	r3, r0
 80086a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a2:	19bc      	adds	r4, r7, r6
 80086a4:	197b      	adds	r3, r7, r5
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	0018      	movs	r0, r3
 80086aa:	f000 f904 	bl	80088b6 <USBD_Get_USB_Status>
 80086ae:	0003      	movs	r3, r0
 80086b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80086b2:	19bb      	adds	r3, r7, r6
 80086b4:	781b      	ldrb	r3, [r3, #0]
}
 80086b6:	0018      	movs	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b005      	add	sp, #20
 80086bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	000a      	movs	r2, r1
 80086c8:	1cfb      	adds	r3, r7, #3
 80086ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	23b0      	movs	r3, #176	; 0xb0
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	58d3      	ldr	r3, [r2, r3]
 80086d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086d6:	1cfb      	adds	r3, r7, #3
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da0d      	bge.n	80086fc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086e0:	1cfb      	adds	r3, r7, #3
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	227f      	movs	r2, #127	; 0x7f
 80086e6:	4013      	ands	r3, r2
 80086e8:	68f9      	ldr	r1, [r7, #12]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	0013      	movs	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	189b      	adds	r3, r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	18cb      	adds	r3, r1, r3
 80086f6:	3302      	adds	r3, #2
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	e00d      	b.n	8008718 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086fc:	1cfb      	adds	r3, r7, #3
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	227f      	movs	r2, #127	; 0x7f
 8008702:	401a      	ands	r2, r3
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	23b5      	movs	r3, #181	; 0xb5
 8008708:	0059      	lsls	r1, r3, #1
 800870a:	0013      	movs	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	189b      	adds	r3, r3, r2
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	18c3      	adds	r3, r0, r3
 8008714:	185b      	adds	r3, r3, r1
 8008716:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	b004      	add	sp, #16
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	000a      	movs	r2, r1
 800872a:	1cfb      	adds	r3, r7, #3
 800872c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872e:	210f      	movs	r1, #15
 8008730:	187b      	adds	r3, r7, r1
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008736:	260e      	movs	r6, #14
 8008738:	19bb      	adds	r3, r7, r6
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	23b0      	movs	r3, #176	; 0xb0
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	58d2      	ldr	r2, [r2, r3]
 8008746:	000d      	movs	r5, r1
 8008748:	187c      	adds	r4, r7, r1
 800874a:	1cfb      	adds	r3, r7, #3
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	0019      	movs	r1, r3
 8008750:	0010      	movs	r0, r2
 8008752:	f7f9 fc99 	bl	8002088 <HAL_PCD_SetAddress>
 8008756:	0003      	movs	r3, r0
 8008758:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875a:	19bc      	adds	r4, r7, r6
 800875c:	197b      	adds	r3, r7, r5
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	0018      	movs	r0, r3
 8008762:	f000 f8a8 	bl	80088b6 <USBD_Get_USB_Status>
 8008766:	0003      	movs	r3, r0
 8008768:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800876a:	19bb      	adds	r3, r7, r6
 800876c:	781b      	ldrb	r3, [r3, #0]
}
 800876e:	0018      	movs	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	b005      	add	sp, #20
 8008774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	0008      	movs	r0, r1
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	0019      	movs	r1, r3
 8008784:	230b      	movs	r3, #11
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	1c02      	adds	r2, r0, #0
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	2408      	movs	r4, #8
 800878e:	193b      	adds	r3, r7, r4
 8008790:	1c0a      	adds	r2, r1, #0
 8008792:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2117      	movs	r1, #23
 8008796:	187b      	adds	r3, r7, r1
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879c:	2516      	movs	r5, #22
 800879e:	197b      	adds	r3, r7, r5
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	23b0      	movs	r3, #176	; 0xb0
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	58d0      	ldr	r0, [r2, r3]
 80087ac:	193b      	adds	r3, r7, r4
 80087ae:	881d      	ldrh	r5, [r3, #0]
 80087b0:	000e      	movs	r6, r1
 80087b2:	187c      	adds	r4, r7, r1
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	230b      	movs	r3, #11
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	7819      	ldrb	r1, [r3, #0]
 80087bc:	002b      	movs	r3, r5
 80087be:	f7f9 fdb4 	bl	800232a <HAL_PCD_EP_Transmit>
 80087c2:	0003      	movs	r3, r0
 80087c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c6:	2516      	movs	r5, #22
 80087c8:	197c      	adds	r4, r7, r5
 80087ca:	19bb      	adds	r3, r7, r6
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 f871 	bl	80088b6 <USBD_Get_USB_Status>
 80087d4:	0003      	movs	r3, r0
 80087d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80087d8:	197b      	adds	r3, r7, r5
 80087da:	781b      	ldrb	r3, [r3, #0]
}
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b007      	add	sp, #28
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	0008      	movs	r0, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	0019      	movs	r1, r3
 80087f2:	230b      	movs	r3, #11
 80087f4:	18fb      	adds	r3, r7, r3
 80087f6:	1c02      	adds	r2, r0, #0
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	2408      	movs	r4, #8
 80087fc:	193b      	adds	r3, r7, r4
 80087fe:	1c0a      	adds	r2, r1, #0
 8008800:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008802:	2117      	movs	r1, #23
 8008804:	187b      	adds	r3, r7, r1
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880a:	2516      	movs	r5, #22
 800880c:	197b      	adds	r3, r7, r5
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	23b0      	movs	r3, #176	; 0xb0
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	58d0      	ldr	r0, [r2, r3]
 800881a:	193b      	adds	r3, r7, r4
 800881c:	881d      	ldrh	r5, [r3, #0]
 800881e:	000e      	movs	r6, r1
 8008820:	187c      	adds	r4, r7, r1
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	230b      	movs	r3, #11
 8008826:	18fb      	adds	r3, r7, r3
 8008828:	7819      	ldrb	r1, [r3, #0]
 800882a:	002b      	movs	r3, r5
 800882c:	f7f9 fd20 	bl	8002270 <HAL_PCD_EP_Receive>
 8008830:	0003      	movs	r3, r0
 8008832:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008834:	2516      	movs	r5, #22
 8008836:	197c      	adds	r4, r7, r5
 8008838:	19bb      	adds	r3, r7, r6
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	0018      	movs	r0, r3
 800883e:	f000 f83a 	bl	80088b6 <USBD_Get_USB_Status>
 8008842:	0003      	movs	r3, r0
 8008844:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008846:	197b      	adds	r3, r7, r5
 8008848:	781b      	ldrb	r3, [r3, #0]
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b007      	add	sp, #28
 8008850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008852 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	000a      	movs	r2, r1
 800885c:	1cfb      	adds	r3, r7, #3
 800885e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	23b0      	movs	r3, #176	; 0xb0
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	58d2      	ldr	r2, [r2, r3]
 8008868:	1cfb      	adds	r3, r7, #3
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	0019      	movs	r1, r3
 800886e:	0010      	movs	r0, r2
 8008870:	f7f9 fd42 	bl	80022f8 <HAL_PCD_EP_GetRxCount>
 8008874:	0003      	movs	r3, r0
}
 8008876:	0018      	movs	r0, r3
 8008878:	46bd      	mov	sp, r7
 800887a:	b002      	add	sp, #8
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <USBD_static_malloc+0x14>)
}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b002      	add	sp, #8
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	200001a4 	.word	0x200001a4

08008898 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

}
 80088a0:	46c0      	nop			; (mov r8, r8)
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b002      	add	sp, #8
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088ac:	f7f7 fec4 	bl	8000638 <SystemClock_Config>
}
 80088b0:	46c0      	nop			; (mov r8, r8)
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	0002      	movs	r2, r0
 80088be:	1dfb      	adds	r3, r7, #7
 80088c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c2:	230f      	movs	r3, #15
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80088ca:	1dfb      	adds	r3, r7, #7
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d017      	beq.n	8008902 <USBD_Get_USB_Status+0x4c>
 80088d2:	dc1b      	bgt.n	800890c <USBD_Get_USB_Status+0x56>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d00f      	beq.n	80088f8 <USBD_Get_USB_Status+0x42>
 80088d8:	dc18      	bgt.n	800890c <USBD_Get_USB_Status+0x56>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <USBD_Get_USB_Status+0x2e>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d005      	beq.n	80088ee <USBD_Get_USB_Status+0x38>
 80088e2:	e013      	b.n	800890c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088e4:	230f      	movs	r3, #15
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	2200      	movs	r2, #0
 80088ea:	701a      	strb	r2, [r3, #0]
    break;
 80088ec:	e013      	b.n	8008916 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088ee:	230f      	movs	r3, #15
 80088f0:	18fb      	adds	r3, r7, r3
 80088f2:	2202      	movs	r2, #2
 80088f4:	701a      	strb	r2, [r3, #0]
    break;
 80088f6:	e00e      	b.n	8008916 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088f8:	230f      	movs	r3, #15
 80088fa:	18fb      	adds	r3, r7, r3
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
    break;
 8008900:	e009      	b.n	8008916 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008902:	230f      	movs	r3, #15
 8008904:	18fb      	adds	r3, r7, r3
 8008906:	2202      	movs	r2, #2
 8008908:	701a      	strb	r2, [r3, #0]
    break;
 800890a:	e004      	b.n	8008916 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800890c:	230f      	movs	r3, #15
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	2202      	movs	r2, #2
 8008912:	701a      	strb	r2, [r3, #0]
    break;
 8008914:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008916:	230f      	movs	r3, #15
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	781b      	ldrb	r3, [r3, #0]
}
 800891c:	0018      	movs	r0, r3
 800891e:	46bd      	mov	sp, r7
 8008920:	b004      	add	sp, #16
 8008922:	bd80      	pop	{r7, pc}

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	2600      	movs	r6, #0
 8008928:	4d0c      	ldr	r5, [pc, #48]	; (800895c <__libc_init_array+0x38>)
 800892a:	4c0d      	ldr	r4, [pc, #52]	; (8008960 <__libc_init_array+0x3c>)
 800892c:	1b64      	subs	r4, r4, r5
 800892e:	10a4      	asrs	r4, r4, #2
 8008930:	42a6      	cmp	r6, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	2600      	movs	r6, #0
 8008936:	f000 f82b 	bl	8008990 <_init>
 800893a:	4d0a      	ldr	r5, [pc, #40]	; (8008964 <__libc_init_array+0x40>)
 800893c:	4c0a      	ldr	r4, [pc, #40]	; (8008968 <__libc_init_array+0x44>)
 800893e:	1b64      	subs	r4, r4, r5
 8008940:	10a4      	asrs	r4, r4, #2
 8008942:	42a6      	cmp	r6, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	00b3      	lsls	r3, r6, #2
 800894a:	58eb      	ldr	r3, [r5, r3]
 800894c:	4798      	blx	r3
 800894e:	3601      	adds	r6, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	00b3      	lsls	r3, r6, #2
 8008954:	58eb      	ldr	r3, [r5, r3]
 8008956:	4798      	blx	r3
 8008958:	3601      	adds	r6, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	08008c0c 	.word	0x08008c0c
 8008960:	08008c0c 	.word	0x08008c0c
 8008964:	08008c0c 	.word	0x08008c0c
 8008968:	08008c10 	.word	0x08008c10

0800896c <memcpy>:
 800896c:	2300      	movs	r3, #0
 800896e:	b510      	push	{r4, lr}
 8008970:	429a      	cmp	r2, r3
 8008972:	d100      	bne.n	8008976 <memcpy+0xa>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	5ccc      	ldrb	r4, [r1, r3]
 8008978:	54c4      	strb	r4, [r0, r3]
 800897a:	3301      	adds	r3, #1
 800897c:	e7f8      	b.n	8008970 <memcpy+0x4>

0800897e <memset>:
 800897e:	0003      	movs	r3, r0
 8008980:	1882      	adds	r2, r0, r2
 8008982:	4293      	cmp	r3, r2
 8008984:	d100      	bne.n	8008988 <memset+0xa>
 8008986:	4770      	bx	lr
 8008988:	7019      	strb	r1, [r3, #0]
 800898a:	3301      	adds	r3, #1
 800898c:	e7f9      	b.n	8008982 <memset+0x4>
	...

08008990 <_init>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr

0800899c <_fini>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr
